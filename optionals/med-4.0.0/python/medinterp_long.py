# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_medinterp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_medinterp')
    _medinterp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_medinterp', [dirname(__file__)])
        except ImportError:
            import _medinterp
            return _medinterp
        try:
            _mod = imp.load_module('_medinterp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _medinterp = swig_import_helper()
    del swig_import_helper
else:
    import _medinterp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator_medinterp_module(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator_medinterp_module, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator_medinterp_module, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _medinterp.delete_SwigPyIterator_medinterp_module
    __del__ = lambda self: None

    def value(self):
        return _medinterp.SwigPyIterator_medinterp_module_value(self)

    def incr(self, n=1):
        return _medinterp.SwigPyIterator_medinterp_module_incr(self, n)

    def decr(self, n=1):
        return _medinterp.SwigPyIterator_medinterp_module_decr(self, n)

    def distance(self, x):
        return _medinterp.SwigPyIterator_medinterp_module_distance(self, x)

    def equal(self, x):
        return _medinterp.SwigPyIterator_medinterp_module_equal(self, x)

    def copy(self):
        return _medinterp.SwigPyIterator_medinterp_module_copy(self)

    def next(self):
        return _medinterp.SwigPyIterator_medinterp_module_next(self)

    def __next__(self):
        return _medinterp.SwigPyIterator_medinterp_module___next__(self)

    def previous(self):
        return _medinterp.SwigPyIterator_medinterp_module_previous(self)

    def advance(self, n):
        return _medinterp.SwigPyIterator_medinterp_module_advance(self, n)

    def __eq__(self, x):
        return _medinterp.SwigPyIterator_medinterp_module___eq__(self, x)

    def __ne__(self, x):
        return _medinterp.SwigPyIterator_medinterp_module___ne__(self, x)

    def __iadd__(self, n):
        return _medinterp.SwigPyIterator_medinterp_module___iadd__(self, n)

    def __isub__(self, n):
        return _medinterp.SwigPyIterator_medinterp_module___isub__(self, n)

    def __add__(self, n):
        return _medinterp.SwigPyIterator_medinterp_module___add__(self, n)

    def __sub__(self, *args):
        return _medinterp.SwigPyIterator_medinterp_module___sub__(self, *args)
    def __iter__(self): return self
    def __iter__(self):
        return self
SwigPyIterator_medinterp_module_swigregister = _medinterp.SwigPyIterator_medinterp_module_swigregister
SwigPyIterator_medinterp_module_swigregister(SwigPyIterator_medinterp_module)

ABSOLUTE_H5IPUBLIC_H = _medinterp.ABSOLUTE_H5IPUBLIC_H
ABSOLUTE_H5PUBLIC_H = _medinterp.ABSOLUTE_H5PUBLIC_H
HAVE_CC_C99 = _medinterp.HAVE_CC_C99
HAVE_CUSERID = _medinterp.HAVE_CUSERID
HAVE_DLFCN_H = _medinterp.HAVE_DLFCN_H
HAVE_FTIME = _medinterp.HAVE_FTIME
HAVE_GETEUID = _medinterp.HAVE_GETEUID
HAVE_GETPWUID = _medinterp.HAVE_GETPWUID
HAVE_GETTIMEOFDAY = _medinterp.HAVE_GETTIMEOFDAY
HAVE_H5IPUBLIC_H = _medinterp.HAVE_H5IPUBLIC_H
HAVE_H5PUBLIC_H = _medinterp.HAVE_H5PUBLIC_H
HAVE_INTTYPES_H = _medinterp.HAVE_INTTYPES_H
HAVE_LIBHDF5 = _medinterp.HAVE_LIBHDF5
HAVE_MALLOC_H = _medinterp.HAVE_MALLOC_H
HAVE_MEMORY_H = _medinterp.HAVE_MEMORY_H
HAVE_PWD_H = _medinterp.HAVE_PWD_H
HAVE_PYTHON = _medinterp.HAVE_PYTHON
HAVE_STDBOOL_H = _medinterp.HAVE_STDBOOL_H
HAVE_STDINT_H = _medinterp.HAVE_STDINT_H
HAVE_STDLIB_H = _medinterp.HAVE_STDLIB_H
HAVE_STRINGS_H = _medinterp.HAVE_STRINGS_H
HAVE_STRING_H = _medinterp.HAVE_STRING_H
HAVE_SYS_STAT_H = _medinterp.HAVE_SYS_STAT_H
HAVE_SYS_TIMEB_H = _medinterp.HAVE_SYS_TIMEB_H
HAVE_SYS_TIME_H = _medinterp.HAVE_SYS_TIME_H
HAVE_SYS_TYPES_H = _medinterp.HAVE_SYS_TYPES_H
HAVE_UNISTD_H = _medinterp.HAVE_UNISTD_H
HAVE__BOOL = _medinterp.HAVE__BOOL
LT_OBJDIR = _medinterp.LT_OBJDIR
MED_API_23 = _medinterp.MED_API_23
MED_CHECK_23FORMAT = _medinterp.MED_CHECK_23FORMAT
MED_HAVE_FORTRAN = _medinterp.MED_HAVE_FORTRAN
MED_HAVE_PYTHON = _medinterp.MED_HAVE_PYTHON
MESGERR = _medinterp.MESGERR
PACKAGE = _medinterp.PACKAGE
PACKAGE_BUGREPORT = _medinterp.PACKAGE_BUGREPORT
PACKAGE_NAME = _medinterp.PACKAGE_NAME
PACKAGE_STRING = _medinterp.PACKAGE_STRING
PACKAGE_TARNAME = _medinterp.PACKAGE_TARNAME
PACKAGE_URL = _medinterp.PACKAGE_URL
PACKAGE_VERSION = _medinterp.PACKAGE_VERSION
SIZEOF_FORTRAN_INTEGER = _medinterp.SIZEOF_FORTRAN_INTEGER
SIZEOF_FORTRAN_INTEGERp8 = _medinterp.SIZEOF_FORTRAN_INTEGERp8
SIZEOF_HID_T = _medinterp.SIZEOF_HID_T
SIZEOF_INT = _medinterp.SIZEOF_INT
SIZEOF_LONG = _medinterp.SIZEOF_LONG
SIZEOF_LONG_LONG = _medinterp.SIZEOF_LONG_LONG
STDC_HEADERS = _medinterp.STDC_HEADERS
TIME_WITH_SYS_TIME = _medinterp.TIME_WITH_SYS_TIME
VERSION = _medinterp.VERSION
HDF_VERSION_MAJOR_REF = _medinterp.HDF_VERSION_MAJOR_REF
HDF_VERSION_MINOR_REF = _medinterp.HDF_VERSION_MINOR_REF
HDF_VERSION_RELEASE_REF = _medinterp.HDF_VERSION_RELEASE_REF
HDF_VERSION_NUM_REF = _medinterp.HDF_VERSION_NUM_REF
H5F_LIBVER_18 = _medinterp.H5F_LIBVER_18
MED_MAJOR_NUM = _medinterp.MED_MAJOR_NUM
MED_MINOR_NUM = _medinterp.MED_MINOR_NUM
MED_RELEASE_NUM = _medinterp.MED_RELEASE_NUM
MED_3_LATEST_MINOR = _medinterp.MED_3_LATEST_MINOR
MED_4_LATEST_MINOR = _medinterp.MED_4_LATEST_MINOR
MED_NUM_MAJEUR = _medinterp.MED_NUM_MAJEUR
MED_NUM_MINEUR = _medinterp.MED_NUM_MINEUR
MED_NUM_RELEASE = _medinterp.MED_NUM_RELEASE
MED_VERSION_STR = _medinterp.MED_VERSION_STR
MED_MAX_PARA = _medinterp.MED_MAX_PARA
MED_COMMENT_SIZE = _medinterp.MED_COMMENT_SIZE
MED_IDENT_SIZE = _medinterp.MED_IDENT_SIZE
MED_NAME_SIZE = _medinterp.MED_NAME_SIZE
MED_SNAME_SIZE = _medinterp.MED_SNAME_SIZE
MED_LNAME_SIZE = _medinterp.MED_LNAME_SIZE
MED_SNAME_BLANK = _medinterp.MED_SNAME_BLANK
MED_NAME_BLANK = _medinterp.MED_NAME_BLANK
MED_PATHNAME_SIZE = _medinterp.MED_PATHNAME_SIZE
MED_MAX_CHFID_PATH = _medinterp.MED_MAX_CHFID_PATH
MED_FULL_INTERLACE = _medinterp.MED_FULL_INTERLACE
MED_NO_INTERLACE = _medinterp.MED_NO_INTERLACE
MED_UNDEF_INTERLACE = _medinterp.MED_UNDEF_INTERLACE
MED_UNDEF_STMODE = _medinterp.MED_UNDEF_STMODE
MED_GLOBAL_STMODE = _medinterp.MED_GLOBAL_STMODE
MED_COMPACT_STMODE = _medinterp.MED_COMPACT_STMODE
MED_GLOBAL_PFLMODE = _medinterp.MED_GLOBAL_PFLMODE
MED_COMPACT_PFLMODE = _medinterp.MED_COMPACT_PFLMODE
MED_UNDEF_PFLMODE = _medinterp.MED_UNDEF_PFLMODE
MED_ACC_RDONLY = _medinterp.MED_ACC_RDONLY
MED_ACC_RDWR = _medinterp.MED_ACC_RDWR
MED_ACC_RDEXT = _medinterp.MED_ACC_RDEXT
MED_ACC_CREAT = _medinterp.MED_ACC_CREAT
MED_ACC_UNDEF = _medinterp.MED_ACC_UNDEF
MED_UNSTRUCTURED_MESH = _medinterp.MED_UNSTRUCTURED_MESH
MED_STRUCTURED_MESH = _medinterp.MED_STRUCTURED_MESH
MED_UNDEF_MESH_TYPE = _medinterp.MED_UNDEF_MESH_TYPE
MED_CARTESIAN_GRID = _medinterp.MED_CARTESIAN_GRID
MED_POLAR_GRID = _medinterp.MED_POLAR_GRID
MED_CURVILINEAR_GRID = _medinterp.MED_CURVILINEAR_GRID
MED_UNDEF_GRID_TYPE = _medinterp.MED_UNDEF_GRID_TYPE
MED_CELL = _medinterp.MED_CELL
MED_DESCENDING_FACE = _medinterp.MED_DESCENDING_FACE
MED_DESCENDING_EDGE = _medinterp.MED_DESCENDING_EDGE
MED_NODE = _medinterp.MED_NODE
MED_NODE_ELEMENT = _medinterp.MED_NODE_ELEMENT
MED_STRUCT_ELEMENT = _medinterp.MED_STRUCT_ELEMENT
MED_ALL_ENTITY_TYPE = _medinterp.MED_ALL_ENTITY_TYPE
MED_UNDEF_ENTITY_TYPE = _medinterp.MED_UNDEF_ENTITY_TYPE
MED_N_ENTITY_TYPES = _medinterp.MED_N_ENTITY_TYPES
MED_COORDINATE = _medinterp.MED_COORDINATE
MED_CONNECTIVITY = _medinterp.MED_CONNECTIVITY
MED_NAME = _medinterp.MED_NAME
MED_NUMBER = _medinterp.MED_NUMBER
MED_FAMILY_NUMBER = _medinterp.MED_FAMILY_NUMBER
MED_COORDINATE_AXIS1 = _medinterp.MED_COORDINATE_AXIS1
MED_COORDINATE_AXIS2 = _medinterp.MED_COORDINATE_AXIS2
MED_COORDINATE_AXIS3 = _medinterp.MED_COORDINATE_AXIS3
MED_INDEX_FACE = _medinterp.MED_INDEX_FACE
MED_INDEX_NODE = _medinterp.MED_INDEX_NODE
MED_GLOBAL_NUMBER = _medinterp.MED_GLOBAL_NUMBER
MED_VARIABLE_ATTRIBUTE = _medinterp.MED_VARIABLE_ATTRIBUTE
MED_COORDINATE_TRSF = _medinterp.MED_COORDINATE_TRSF
MED_UNDEF_DATATYPE = _medinterp.MED_UNDEF_DATATYPE
MED_INTERNAL_FLOAT32 = _medinterp.MED_INTERNAL_FLOAT32
MED_INTERNAL_FLOAT64 = _medinterp.MED_INTERNAL_FLOAT64
MED_INTERNAL_INT32 = _medinterp.MED_INTERNAL_INT32
MED_INTERNAL_INT64 = _medinterp.MED_INTERNAL_INT64
MED_INTERNAL_INT = _medinterp.MED_INTERNAL_INT
MED_INTERNAL_NAME = _medinterp.MED_INTERNAL_NAME
MED_INTERNAL_SNAME = _medinterp.MED_INTERNAL_SNAME
MED_INTERNAL_LNAME = _medinterp.MED_INTERNAL_LNAME
MED_INTERNAL_IDENT = _medinterp.MED_INTERNAL_IDENT
MED_INTERNAL_CHAR = _medinterp.MED_INTERNAL_CHAR
MED_INTERNAL_UNDEF = _medinterp.MED_INTERNAL_UNDEF
MED_DOUBLE = _medinterp.MED_DOUBLE
MED_FLOAT64 = _medinterp.MED_FLOAT64
MED_FLOAT32 = _medinterp.MED_FLOAT32
MED_INT32 = _medinterp.MED_INT32
MED_INT64 = _medinterp.MED_INT64
MED_INT = _medinterp.MED_INT
MED_ATT_FLOAT64 = _medinterp.MED_ATT_FLOAT64
MED_ATT_INT = _medinterp.MED_ATT_INT
MED_ATT_NAME = _medinterp.MED_ATT_NAME
MED_ATT_UNDEF = _medinterp.MED_ATT_UNDEF
MED_MESH = _medinterp.MED_MESH
MED_FIELD = _medinterp.MED_FIELD
MED_LIBRARY = _medinterp.MED_LIBRARY
MED_FILE = _medinterp.MED_FILE
MED_MESH_SUPPORT = _medinterp.MED_MESH_SUPPORT
MED_ELSTRUCT = _medinterp.MED_ELSTRUCT
MED_FAMILY = _medinterp.MED_FAMILY
MED_EQUIVALENCE = _medinterp.MED_EQUIVALENCE
MED_GROUP = _medinterp.MED_GROUP
MED_JOINT = _medinterp.MED_JOINT
MED_LOCALIZATION = _medinterp.MED_LOCALIZATION
MED_PROFILE = _medinterp.MED_PROFILE
MED_FILTER = _medinterp.MED_FILTER
MED_INTERPOLATION = _medinterp.MED_INTERPOLATION
MED_NUMERICAL_DATA = _medinterp.MED_NUMERICAL_DATA
MED_LINK = _medinterp.MED_LINK
MED_CLASS_UNDEF = _medinterp.MED_CLASS_UNDEF
MED_CLASS_ALL = _medinterp.MED_CLASS_ALL
MED_POINT1 = _medinterp.MED_POINT1
MED_SEG2 = _medinterp.MED_SEG2
MED_SEG3 = _medinterp.MED_SEG3
MED_SEG4 = _medinterp.MED_SEG4
MED_TRIA3 = _medinterp.MED_TRIA3
MED_QUAD4 = _medinterp.MED_QUAD4
MED_TRIA6 = _medinterp.MED_TRIA6
MED_TRIA7 = _medinterp.MED_TRIA7
MED_QUAD8 = _medinterp.MED_QUAD8
MED_QUAD9 = _medinterp.MED_QUAD9
MED_TETRA4 = _medinterp.MED_TETRA4
MED_PYRA5 = _medinterp.MED_PYRA5
MED_PENTA6 = _medinterp.MED_PENTA6
MED_HEXA8 = _medinterp.MED_HEXA8
MED_TETRA10 = _medinterp.MED_TETRA10
MED_OCTA12 = _medinterp.MED_OCTA12
MED_PYRA13 = _medinterp.MED_PYRA13
MED_PENTA15 = _medinterp.MED_PENTA15
MED_PENTA18 = _medinterp.MED_PENTA18
MED_HEXA20 = _medinterp.MED_HEXA20
MED_HEXA27 = _medinterp.MED_HEXA27
MED_POLYGON = _medinterp.MED_POLYGON
MED_POLYGON2 = _medinterp.MED_POLYGON2
MED_POLYHEDRON = _medinterp.MED_POLYHEDRON
MED_STRUCT_GEO_INTERNAL = _medinterp.MED_STRUCT_GEO_INTERNAL
MED_STRUCT_GEO_SUP_INTERNAL = _medinterp.MED_STRUCT_GEO_SUP_INTERNAL
MED_NONE = _medinterp.MED_NONE
MED_NO_GEOTYPE = _medinterp.MED_NO_GEOTYPE
MED_UNDEF_GEOTYPE = _medinterp.MED_UNDEF_GEOTYPE
MED_UNDEF_GEOMETRY_TYPE = _medinterp.MED_UNDEF_GEOMETRY_TYPE
MED_ALL_GEOTYPE = _medinterp.MED_ALL_GEOTYPE
MED_GEO_ALL = _medinterp.MED_GEO_ALL
MED_N_CELL_GEO = _medinterp.MED_N_CELL_GEO
MED_N_CELL_FIXED_GEO = _medinterp.MED_N_CELL_FIXED_GEO
MED_N_CELL_GEO_FIXED_CON = _medinterp.MED_N_CELL_GEO_FIXED_CON
MED_N_FACE_GEO = _medinterp.MED_N_FACE_GEO
MED_N_FACE_FIXED_GEO = _medinterp.MED_N_FACE_FIXED_GEO
MED_N_FACE_GEO_FIXED_CON = _medinterp.MED_N_FACE_GEO_FIXED_CON
MED_N_EDGE_TYPES = _medinterp.MED_N_EDGE_TYPES
MED_N_EDGE_FIXED_GEO = _medinterp.MED_N_EDGE_FIXED_GEO
MED_N_EDGE_GEO_FIXED_CON = _medinterp.MED_N_EDGE_GEO_FIXED_CON
MED_N_NODE_GEO = _medinterp.MED_N_NODE_GEO
MED_N_NODE_FIXED_GEO = _medinterp.MED_N_NODE_FIXED_GEO
MED_N_NODE_GEO_FIXED_CON = _medinterp.MED_N_NODE_GEO_FIXED_CON
MED_NODAL = _medinterp.MED_NODAL
MED_DESCENDING = _medinterp.MED_DESCENDING
MED_UNDEF_CONNECTIVITY_MODE = _medinterp.MED_UNDEF_CONNECTIVITY_MODE
MED_NO_CMODE = _medinterp.MED_NO_CMODE
MED_CARTESIAN = _medinterp.MED_CARTESIAN
MED_CYLINDRICAL = _medinterp.MED_CYLINDRICAL
MED_SPHERICAL = _medinterp.MED_SPHERICAL
MED_UNDEF_AXIS_TYPE = _medinterp.MED_UNDEF_AXIS_TYPE
MED_FALSE = _medinterp.MED_FALSE
MED_TRUE = _medinterp.MED_TRUE
MED_GAUSS_ELNO = _medinterp.MED_GAUSS_ELNO
MED_IPOINT_ELNO = _medinterp.MED_IPOINT_ELNO
MED_NO_NAME = _medinterp.MED_NO_NAME
MED_NO_MESHNAME = _medinterp.MED_NO_MESHNAME
MED_NO_MESH = _medinterp.MED_NO_MESH
MED_NO_MESH_SUPPORT = _medinterp.MED_NO_MESH_SUPPORT
MED_NO_LOCALIZATION = _medinterp.MED_NO_LOCALIZATION
MED_NO_INTERPOLATION = _medinterp.MED_NO_INTERPOLATION
MED_NO_IPOINT_INTERNAL = _medinterp.MED_NO_IPOINT_INTERNAL
MED_NO_PROFILE = _medinterp.MED_NO_PROFILE
MED_NO_GROUP = _medinterp.MED_NO_GROUP
MED_ALLENTITIES_PROFILE = _medinterp.MED_ALLENTITIES_PROFILE
MED_NO_PROFILE_INTERNAL = _medinterp.MED_NO_PROFILE_INTERNAL
MED_SAME_PROFILE_INTERNAL = _medinterp.MED_SAME_PROFILE_INTERNAL
MED_ALL_CONSTITUENT = _medinterp.MED_ALL_CONSTITUENT
MED_UNDEF_SIZE = _medinterp.MED_UNDEF_SIZE
MED_NO_PROFILE_SIZE = _medinterp.MED_NO_PROFILE_SIZE
MED_SORT_DTIT = _medinterp.MED_SORT_DTIT
MED_SORT_ITDT = _medinterp.MED_SORT_ITDT
MED_SORT_UNDEF = _medinterp.MED_SORT_UNDEF
MED_NO_DT = _medinterp.MED_NO_DT
MED_NO_IT = _medinterp.MED_NO_IT
MED_UNDEF_DT = _medinterp.MED_UNDEF_DT
MED_ATT_NOT_FILLED = _medinterp.MED_ATT_NOT_FILLED
MED_MAX_FILTER_SPACES = _medinterp.MED_MAX_FILTER_SPACES
class med_filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, med_filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, med_filter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nspaces"] = _medinterp.med_filter_nspaces_set
    __swig_getmethods__["nspaces"] = _medinterp.med_filter_nspaces_get
    if _newclass:
        nspaces = _swig_property(_medinterp.med_filter_nspaces_get, _medinterp.med_filter_nspaces_set)
    __swig_setmethods__["memspace"] = _medinterp.med_filter_memspace_set
    __swig_getmethods__["memspace"] = _medinterp.med_filter_memspace_get
    if _newclass:
        memspace = _swig_property(_medinterp.med_filter_memspace_get, _medinterp.med_filter_memspace_set)
    __swig_setmethods__["diskspace"] = _medinterp.med_filter_diskspace_set
    __swig_getmethods__["diskspace"] = _medinterp.med_filter_diskspace_get
    if _newclass:
        diskspace = _swig_property(_medinterp.med_filter_diskspace_get, _medinterp.med_filter_diskspace_set)
    __swig_setmethods__["nentity"] = _medinterp.med_filter_nentity_set
    __swig_getmethods__["nentity"] = _medinterp.med_filter_nentity_get
    if _newclass:
        nentity = _swig_property(_medinterp.med_filter_nentity_get, _medinterp.med_filter_nentity_set)
    __swig_setmethods__["nvaluesperentity"] = _medinterp.med_filter_nvaluesperentity_set
    __swig_getmethods__["nvaluesperentity"] = _medinterp.med_filter_nvaluesperentity_get
    if _newclass:
        nvaluesperentity = _swig_property(_medinterp.med_filter_nvaluesperentity_get, _medinterp.med_filter_nvaluesperentity_set)
    __swig_setmethods__["nconstituentpervalue"] = _medinterp.med_filter_nconstituentpervalue_set
    __swig_getmethods__["nconstituentpervalue"] = _medinterp.med_filter_nconstituentpervalue_get
    if _newclass:
        nconstituentpervalue = _swig_property(_medinterp.med_filter_nconstituentpervalue_get, _medinterp.med_filter_nconstituentpervalue_set)
    __swig_setmethods__["constituentselect"] = _medinterp.med_filter_constituentselect_set
    __swig_getmethods__["constituentselect"] = _medinterp.med_filter_constituentselect_get
    if _newclass:
        constituentselect = _swig_property(_medinterp.med_filter_constituentselect_get, _medinterp.med_filter_constituentselect_set)
    __swig_setmethods__["switchmode"] = _medinterp.med_filter_switchmode_set
    __swig_getmethods__["switchmode"] = _medinterp.med_filter_switchmode_get
    if _newclass:
        switchmode = _swig_property(_medinterp.med_filter_switchmode_get, _medinterp.med_filter_switchmode_set)
    __swig_setmethods__["filterarraysize"] = _medinterp.med_filter_filterarraysize_set
    __swig_getmethods__["filterarraysize"] = _medinterp.med_filter_filterarraysize_get
    if _newclass:
        filterarraysize = _swig_property(_medinterp.med_filter_filterarraysize_get, _medinterp.med_filter_filterarraysize_set)
    __swig_setmethods__["filterarray23v30"] = _medinterp.med_filter_filterarray23v30_set
    __swig_getmethods__["filterarray23v30"] = _medinterp.med_filter_filterarray23v30_get
    if _newclass:
        filterarray23v30 = _swig_property(_medinterp.med_filter_filterarray23v30_get, _medinterp.med_filter_filterarray23v30_set)
    __swig_setmethods__["profilearraysize"] = _medinterp.med_filter_profilearraysize_set
    __swig_getmethods__["profilearraysize"] = _medinterp.med_filter_profilearraysize_get
    if _newclass:
        profilearraysize = _swig_property(_medinterp.med_filter_profilearraysize_get, _medinterp.med_filter_profilearraysize_set)
    __swig_setmethods__["storagemode"] = _medinterp.med_filter_storagemode_set
    __swig_getmethods__["storagemode"] = _medinterp.med_filter_storagemode_get
    if _newclass:
        storagemode = _swig_property(_medinterp.med_filter_storagemode_get, _medinterp.med_filter_storagemode_set)
    __swig_setmethods__["profilename"] = _medinterp.med_filter_profilename_set
    __swig_getmethods__["profilename"] = _medinterp.med_filter_profilename_get
    if _newclass:
        profilename = _swig_property(_medinterp.med_filter_profilename_get, _medinterp.med_filter_profilename_set)

    def __init__(self):
        """__init__(self) -> med_filter"""
        this = _medinterp.new_med_filter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _medinterp.delete_med_filter
    __del__ = lambda self: None
med_filter_swigregister = _medinterp.med_filter_swigregister
med_filter_swigregister(med_filter)

MED_NO_FILTER_SIZE = _medinterp.MED_NO_FILTER_SIZE
MED_NO_PROFILE_F = _medinterp.MED_NO_PROFILE_F
class med_file_version(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, med_file_version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, med_file_version, name)
    __repr__ = _swig_repr
    __swig_setmethods__["majeur"] = _medinterp.med_file_version_majeur_set
    __swig_getmethods__["majeur"] = _medinterp.med_file_version_majeur_get
    if _newclass:
        majeur = _swig_property(_medinterp.med_file_version_majeur_get, _medinterp.med_file_version_majeur_set)
    __swig_setmethods__["mineur"] = _medinterp.med_file_version_mineur_set
    __swig_getmethods__["mineur"] = _medinterp.med_file_version_mineur_get
    if _newclass:
        mineur = _swig_property(_medinterp.med_file_version_mineur_get, _medinterp.med_file_version_mineur_set)
    __swig_setmethods__["release"] = _medinterp.med_file_version_release_set
    __swig_getmethods__["release"] = _medinterp.med_file_version_release_get
    if _newclass:
        release = _swig_property(_medinterp.med_file_version_release_get, _medinterp.med_file_version_release_set)

    def __init__(self):
        """__init__(self) -> med_file_version"""
        this = _medinterp.new_med_file_version()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _medinterp.delete_med_file_version
    __del__ = lambda self: None
med_file_version_swigregister = _medinterp.med_file_version_swigregister
med_file_version_swigregister(med_file_version)

class med_memfile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, med_memfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, med_memfile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["app_image_ptr"] = _medinterp.med_memfile_app_image_ptr_set
    __swig_getmethods__["app_image_ptr"] = _medinterp.med_memfile_app_image_ptr_get
    if _newclass:
        app_image_ptr = _swig_property(_medinterp.med_memfile_app_image_ptr_get, _medinterp.med_memfile_app_image_ptr_set)
    __swig_setmethods__["app_image_size"] = _medinterp.med_memfile_app_image_size_set
    __swig_getmethods__["app_image_size"] = _medinterp.med_memfile_app_image_size_get
    if _newclass:
        app_image_size = _swig_property(_medinterp.med_memfile_app_image_size_get, _medinterp.med_memfile_app_image_size_set)
    __swig_setmethods__["ref_count"] = _medinterp.med_memfile_ref_count_set
    __swig_getmethods__["ref_count"] = _medinterp.med_memfile_ref_count_get
    if _newclass:
        ref_count = _swig_property(_medinterp.med_memfile_ref_count_get, _medinterp.med_memfile_ref_count_set)
    __swig_setmethods__["fapl_image_ptr"] = _medinterp.med_memfile_fapl_image_ptr_set
    __swig_getmethods__["fapl_image_ptr"] = _medinterp.med_memfile_fapl_image_ptr_get
    if _newclass:
        fapl_image_ptr = _swig_property(_medinterp.med_memfile_fapl_image_ptr_get, _medinterp.med_memfile_fapl_image_ptr_set)
    __swig_setmethods__["fapl_image_size"] = _medinterp.med_memfile_fapl_image_size_set
    __swig_getmethods__["fapl_image_size"] = _medinterp.med_memfile_fapl_image_size_get
    if _newclass:
        fapl_image_size = _swig_property(_medinterp.med_memfile_fapl_image_size_get, _medinterp.med_memfile_fapl_image_size_set)
    __swig_setmethods__["fapl_ref_count"] = _medinterp.med_memfile_fapl_ref_count_set
    __swig_getmethods__["fapl_ref_count"] = _medinterp.med_memfile_fapl_ref_count_get
    if _newclass:
        fapl_ref_count = _swig_property(_medinterp.med_memfile_fapl_ref_count_get, _medinterp.med_memfile_fapl_ref_count_set)
    __swig_setmethods__["vfd_image_ptr"] = _medinterp.med_memfile_vfd_image_ptr_set
    __swig_getmethods__["vfd_image_ptr"] = _medinterp.med_memfile_vfd_image_ptr_get
    if _newclass:
        vfd_image_ptr = _swig_property(_medinterp.med_memfile_vfd_image_ptr_get, _medinterp.med_memfile_vfd_image_ptr_set)
    __swig_setmethods__["vfd_image_size"] = _medinterp.med_memfile_vfd_image_size_set
    __swig_getmethods__["vfd_image_size"] = _medinterp.med_memfile_vfd_image_size_get
    if _newclass:
        vfd_image_size = _swig_property(_medinterp.med_memfile_vfd_image_size_get, _medinterp.med_memfile_vfd_image_size_set)
    __swig_setmethods__["vfd_ref_count"] = _medinterp.med_memfile_vfd_ref_count_set
    __swig_getmethods__["vfd_ref_count"] = _medinterp.med_memfile_vfd_ref_count_get
    if _newclass:
        vfd_ref_count = _swig_property(_medinterp.med_memfile_vfd_ref_count_get, _medinterp.med_memfile_vfd_ref_count_set)
    __swig_setmethods__["flags"] = _medinterp.med_memfile_flags_set
    __swig_getmethods__["flags"] = _medinterp.med_memfile_flags_get
    if _newclass:
        flags = _swig_property(_medinterp.med_memfile_flags_get, _medinterp.med_memfile_flags_set)

    def __init__(self):
        """__init__(self) -> med_memfile"""
        this = _medinterp.new_med_memfile()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _medinterp.delete_med_memfile
    __del__ = lambda self: None
med_memfile_swigregister = _medinterp.med_memfile_swigregister
med_memfile_swigregister(med_memfile)

MED_PARTICLE_NAME = _medinterp.MED_PARTICLE_NAME
MED_BALL_NAME = _medinterp.MED_BALL_NAME
MED_BEAM_NAME = _medinterp.MED_BEAM_NAME
MED_PARTICLE_LABEL = _medinterp.MED_PARTICLE_LABEL
MED_BALL_DIAMETER = _medinterp.MED_BALL_DIAMETER
MED_BEAM_THICKNESS = _medinterp.MED_BEAM_THICKNESS
import med.medenum
class MEDBOOL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDBOOL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDBOOL, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _medinterp.MEDBOOL_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _medinterp.MEDBOOL___nonzero__(self)

    def __bool__(self):
        return _medinterp.MEDBOOL___bool__(self)

    def __len__(self):
        return _medinterp.MEDBOOL___len__(self)

    def __getslice__(self, i, j):
        return _medinterp.MEDBOOL___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _medinterp.MEDBOOL___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _medinterp.MEDBOOL___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _medinterp.MEDBOOL___delitem__(self, *args)

    def __getitem__(self, *args):
        return _medinterp.MEDBOOL___getitem__(self, *args)

    def __setitem__(self, *args):
        return _medinterp.MEDBOOL___setitem__(self, *args)

    def pop(self):
        return _medinterp.MEDBOOL_pop(self)

    def append(self, x):
        return _medinterp.MEDBOOL_append(self, x)

    def empty(self):
        return _medinterp.MEDBOOL_empty(self)

    def size(self):
        return _medinterp.MEDBOOL_size(self)

    def swap(self, v):
        return _medinterp.MEDBOOL_swap(self, v)

    def begin(self):
        return _medinterp.MEDBOOL_begin(self)

    def end(self):
        return _medinterp.MEDBOOL_end(self)

    def rbegin(self):
        return _medinterp.MEDBOOL_rbegin(self)

    def rend(self):
        return _medinterp.MEDBOOL_rend(self)

    def clear(self):
        return _medinterp.MEDBOOL_clear(self)

    def get_allocator(self):
        return _medinterp.MEDBOOL_get_allocator(self)

    def pop_back(self):
        return _medinterp.MEDBOOL_pop_back(self)

    def erase(self, *args):
        return _medinterp.MEDBOOL_erase(self, *args)

    def __init__(self, *args):
        this = _medinterp.new_MEDBOOL(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _medinterp.MEDBOOL_push_back(self, x)

    def front(self):
        return _medinterp.MEDBOOL_front(self)

    def back(self):
        return _medinterp.MEDBOOL_back(self)

    def assign(self, n, x):
        return _medinterp.MEDBOOL_assign(self, n, x)

    def resize(self, *args):
        return _medinterp.MEDBOOL_resize(self, *args)

    def insert(self, *args):
        return _medinterp.MEDBOOL_insert(self, *args)

    def reserve(self, n):
        return _medinterp.MEDBOOL_reserve(self, n)

    def capacity(self):
        return _medinterp.MEDBOOL_capacity(self)
    __swig_destroy__ = _medinterp.delete_MEDBOOL
    __del__ = lambda self: None
MEDBOOL_swigregister = _medinterp.MEDBOOL_swigregister
MEDBOOL_swigregister(MEDBOOL)
cvar = _medinterp.cvar
MED_GET_ENTITY_TYPENAME = cvar.MED_GET_ENTITY_TYPENAME
MED_GET_CELL_GEOMETRY_TYPENAME = cvar.MED_GET_CELL_GEOMETRY_TYPENAME
MED_GET_FACE_GEOMETRY_TYPENAME = cvar.MED_GET_FACE_GEOMETRY_TYPENAME


MEDBOOL.__str__= lambda self: str([x for x in self])
MEDBOOL.__repr__= lambda self: "MEDBOOL("+str([x for x in self])+")"

class MEDFLOAT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFLOAT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFLOAT, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _medinterp.MEDFLOAT_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _medinterp.MEDFLOAT___nonzero__(self)

    def __bool__(self):
        return _medinterp.MEDFLOAT___bool__(self)

    def __len__(self):
        return _medinterp.MEDFLOAT___len__(self)

    def __getslice__(self, i, j):
        return _medinterp.MEDFLOAT___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _medinterp.MEDFLOAT___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _medinterp.MEDFLOAT___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _medinterp.MEDFLOAT___delitem__(self, *args)

    def __getitem__(self, *args):
        return _medinterp.MEDFLOAT___getitem__(self, *args)

    def __setitem__(self, *args):
        return _medinterp.MEDFLOAT___setitem__(self, *args)

    def pop(self):
        return _medinterp.MEDFLOAT_pop(self)

    def append(self, x):
        return _medinterp.MEDFLOAT_append(self, x)

    def empty(self):
        return _medinterp.MEDFLOAT_empty(self)

    def size(self):
        return _medinterp.MEDFLOAT_size(self)

    def swap(self, v):
        return _medinterp.MEDFLOAT_swap(self, v)

    def begin(self):
        return _medinterp.MEDFLOAT_begin(self)

    def end(self):
        return _medinterp.MEDFLOAT_end(self)

    def rbegin(self):
        return _medinterp.MEDFLOAT_rbegin(self)

    def rend(self):
        return _medinterp.MEDFLOAT_rend(self)

    def clear(self):
        return _medinterp.MEDFLOAT_clear(self)

    def get_allocator(self):
        return _medinterp.MEDFLOAT_get_allocator(self)

    def pop_back(self):
        return _medinterp.MEDFLOAT_pop_back(self)

    def erase(self, *args):
        return _medinterp.MEDFLOAT_erase(self, *args)

    def __init__(self, *args):
        this = _medinterp.new_MEDFLOAT(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _medinterp.MEDFLOAT_push_back(self, x)

    def front(self):
        return _medinterp.MEDFLOAT_front(self)

    def back(self):
        return _medinterp.MEDFLOAT_back(self)

    def assign(self, n, x):
        return _medinterp.MEDFLOAT_assign(self, n, x)

    def resize(self, *args):
        return _medinterp.MEDFLOAT_resize(self, *args)

    def insert(self, *args):
        return _medinterp.MEDFLOAT_insert(self, *args)

    def reserve(self, n):
        return _medinterp.MEDFLOAT_reserve(self, n)

    def capacity(self):
        return _medinterp.MEDFLOAT_capacity(self)

    def __iadd__(self, value):
        return _medinterp.MEDFLOAT___iadd__(self, value)

    def __add__(self, value):
        return _medinterp.MEDFLOAT___add__(self, value)

    def __isub__(self, value):
        return _medinterp.MEDFLOAT___isub__(self, value)

    def __sub__(self, value):
        return _medinterp.MEDFLOAT___sub__(self, value)

    def __imul__(self, value):
        return _medinterp.MEDFLOAT___imul__(self, value)

    def __mul__(self, value):
        return _medinterp.MEDFLOAT___mul__(self, value)

    def __itruediv__(self, *args):
        return _medinterp.MEDFLOAT___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _medinterp.MEDFLOAT___truediv__(self, *args)
    __div__ = __truediv__



    def __le__(self, value):
        return _medinterp.MEDFLOAT___le__(self, value)

    def __lt__(self, value):
        return _medinterp.MEDFLOAT___lt__(self, value)

    def __gt__(self, value):
        return _medinterp.MEDFLOAT___gt__(self, value)

    def __ge__(self, value):
        return _medinterp.MEDFLOAT___ge__(self, value)

    def __eq__(self, value):
        return _medinterp.MEDFLOAT___eq__(self, value)

    def __ne__(self, value):
        return _medinterp.MEDFLOAT___ne__(self, value)
    __swig_destroy__ = _medinterp.delete_MEDFLOAT
    __del__ = lambda self: None
MEDFLOAT_swigregister = _medinterp.MEDFLOAT_swigregister
MEDFLOAT_swigregister(MEDFLOAT)


MEDFLOAT.__str__= lambda self: str([x for x in self])
MEDFLOAT.__repr__= lambda self:"MEDFLOAT" +"("+str([x for x in self])+")"


MEDFLOAT64=MEDFLOAT
MEDDOUBLE=MEDFLOAT

class MEDFLOAT32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDFLOAT32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDFLOAT32, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _medinterp.MEDFLOAT32_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _medinterp.MEDFLOAT32___nonzero__(self)

    def __bool__(self):
        return _medinterp.MEDFLOAT32___bool__(self)

    def __len__(self):
        return _medinterp.MEDFLOAT32___len__(self)

    def __getslice__(self, i, j):
        return _medinterp.MEDFLOAT32___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _medinterp.MEDFLOAT32___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _medinterp.MEDFLOAT32___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _medinterp.MEDFLOAT32___delitem__(self, *args)

    def __getitem__(self, *args):
        return _medinterp.MEDFLOAT32___getitem__(self, *args)

    def __setitem__(self, *args):
        return _medinterp.MEDFLOAT32___setitem__(self, *args)

    def pop(self):
        return _medinterp.MEDFLOAT32_pop(self)

    def append(self, x):
        return _medinterp.MEDFLOAT32_append(self, x)

    def empty(self):
        return _medinterp.MEDFLOAT32_empty(self)

    def size(self):
        return _medinterp.MEDFLOAT32_size(self)

    def swap(self, v):
        return _medinterp.MEDFLOAT32_swap(self, v)

    def begin(self):
        return _medinterp.MEDFLOAT32_begin(self)

    def end(self):
        return _medinterp.MEDFLOAT32_end(self)

    def rbegin(self):
        return _medinterp.MEDFLOAT32_rbegin(self)

    def rend(self):
        return _medinterp.MEDFLOAT32_rend(self)

    def clear(self):
        return _medinterp.MEDFLOAT32_clear(self)

    def get_allocator(self):
        return _medinterp.MEDFLOAT32_get_allocator(self)

    def pop_back(self):
        return _medinterp.MEDFLOAT32_pop_back(self)

    def erase(self, *args):
        return _medinterp.MEDFLOAT32_erase(self, *args)

    def __init__(self, *args):
        this = _medinterp.new_MEDFLOAT32(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _medinterp.MEDFLOAT32_push_back(self, x)

    def front(self):
        return _medinterp.MEDFLOAT32_front(self)

    def back(self):
        return _medinterp.MEDFLOAT32_back(self)

    def assign(self, n, x):
        return _medinterp.MEDFLOAT32_assign(self, n, x)

    def resize(self, *args):
        return _medinterp.MEDFLOAT32_resize(self, *args)

    def insert(self, *args):
        return _medinterp.MEDFLOAT32_insert(self, *args)

    def reserve(self, n):
        return _medinterp.MEDFLOAT32_reserve(self, n)

    def capacity(self):
        return _medinterp.MEDFLOAT32_capacity(self)

    def __iadd__(self, value):
        return _medinterp.MEDFLOAT32___iadd__(self, value)

    def __add__(self, value):
        return _medinterp.MEDFLOAT32___add__(self, value)

    def __isub__(self, value):
        return _medinterp.MEDFLOAT32___isub__(self, value)

    def __sub__(self, value):
        return _medinterp.MEDFLOAT32___sub__(self, value)

    def __imul__(self, value):
        return _medinterp.MEDFLOAT32___imul__(self, value)

    def __mul__(self, value):
        return _medinterp.MEDFLOAT32___mul__(self, value)

    def __itruediv__(self, *args):
        return _medinterp.MEDFLOAT32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _medinterp.MEDFLOAT32___truediv__(self, *args)
    __div__ = __truediv__



    def __le__(self, value):
        return _medinterp.MEDFLOAT32___le__(self, value)

    def __lt__(self, value):
        return _medinterp.MEDFLOAT32___lt__(self, value)

    def __gt__(self, value):
        return _medinterp.MEDFLOAT32___gt__(self, value)

    def __ge__(self, value):
        return _medinterp.MEDFLOAT32___ge__(self, value)

    def __eq__(self, value):
        return _medinterp.MEDFLOAT32___eq__(self, value)

    def __ne__(self, value):
        return _medinterp.MEDFLOAT32___ne__(self, value)
    __swig_destroy__ = _medinterp.delete_MEDFLOAT32
    __del__ = lambda self: None
MEDFLOAT32_swigregister = _medinterp.MEDFLOAT32_swigregister
MEDFLOAT32_swigregister(MEDFLOAT32)


MEDFLOAT32.__str__= lambda self: str([x for x in self])
MEDFLOAT32.__repr__= lambda self:"MEDFLOAT32" +"("+str([x for x in self])+")"

class MEDINT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDINT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDINT, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _medinterp.MEDINT_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _medinterp.MEDINT___nonzero__(self)

    def __bool__(self):
        return _medinterp.MEDINT___bool__(self)

    def __len__(self):
        return _medinterp.MEDINT___len__(self)

    def __getslice__(self, i, j):
        return _medinterp.MEDINT___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _medinterp.MEDINT___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _medinterp.MEDINT___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _medinterp.MEDINT___delitem__(self, *args)

    def __getitem__(self, *args):
        return _medinterp.MEDINT___getitem__(self, *args)

    def __setitem__(self, *args):
        return _medinterp.MEDINT___setitem__(self, *args)

    def pop(self):
        return _medinterp.MEDINT_pop(self)

    def append(self, x):
        return _medinterp.MEDINT_append(self, x)

    def empty(self):
        return _medinterp.MEDINT_empty(self)

    def size(self):
        return _medinterp.MEDINT_size(self)

    def swap(self, v):
        return _medinterp.MEDINT_swap(self, v)

    def begin(self):
        return _medinterp.MEDINT_begin(self)

    def end(self):
        return _medinterp.MEDINT_end(self)

    def rbegin(self):
        return _medinterp.MEDINT_rbegin(self)

    def rend(self):
        return _medinterp.MEDINT_rend(self)

    def clear(self):
        return _medinterp.MEDINT_clear(self)

    def get_allocator(self):
        return _medinterp.MEDINT_get_allocator(self)

    def pop_back(self):
        return _medinterp.MEDINT_pop_back(self)

    def erase(self, *args):
        return _medinterp.MEDINT_erase(self, *args)

    def __init__(self, *args):
        this = _medinterp.new_MEDINT(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _medinterp.MEDINT_push_back(self, x)

    def front(self):
        return _medinterp.MEDINT_front(self)

    def back(self):
        return _medinterp.MEDINT_back(self)

    def assign(self, n, x):
        return _medinterp.MEDINT_assign(self, n, x)

    def resize(self, *args):
        return _medinterp.MEDINT_resize(self, *args)

    def insert(self, *args):
        return _medinterp.MEDINT_insert(self, *args)

    def reserve(self, n):
        return _medinterp.MEDINT_reserve(self, n)

    def capacity(self):
        return _medinterp.MEDINT_capacity(self)

    def __iadd__(self, value):
        return _medinterp.MEDINT___iadd__(self, value)

    def __add__(self, value):
        return _medinterp.MEDINT___add__(self, value)

    def __isub__(self, value):
        return _medinterp.MEDINT___isub__(self, value)

    def __sub__(self, value):
        return _medinterp.MEDINT___sub__(self, value)

    def __imul__(self, value):
        return _medinterp.MEDINT___imul__(self, value)

    def __mul__(self, value):
        return _medinterp.MEDINT___mul__(self, value)

    def __itruediv__(self, *args):
        return _medinterp.MEDINT___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _medinterp.MEDINT___truediv__(self, *args)
    __div__ = __truediv__



    def __le__(self, value):
        return _medinterp.MEDINT___le__(self, value)

    def __lt__(self, value):
        return _medinterp.MEDINT___lt__(self, value)

    def __gt__(self, value):
        return _medinterp.MEDINT___gt__(self, value)

    def __ge__(self, value):
        return _medinterp.MEDINT___ge__(self, value)

    def __eq__(self, value):
        return _medinterp.MEDINT___eq__(self, value)

    def __ne__(self, value):
        return _medinterp.MEDINT___ne__(self, value)
    __swig_destroy__ = _medinterp.delete_MEDINT
    __del__ = lambda self: None
MEDINT_swigregister = _medinterp.MEDINT_swigregister
MEDINT_swigregister(MEDINT)


MEDINT.__str__= lambda self: str([x for x in self])
MEDINT.__repr__= lambda self:"MEDINT" +"("+str([x for x in self])+")"


MEDINT64=MEDINT

class MEDINT32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDINT32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDINT32, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _medinterp.MEDINT32_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _medinterp.MEDINT32___nonzero__(self)

    def __bool__(self):
        return _medinterp.MEDINT32___bool__(self)

    def __len__(self):
        return _medinterp.MEDINT32___len__(self)

    def __getslice__(self, i, j):
        return _medinterp.MEDINT32___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _medinterp.MEDINT32___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _medinterp.MEDINT32___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _medinterp.MEDINT32___delitem__(self, *args)

    def __getitem__(self, *args):
        return _medinterp.MEDINT32___getitem__(self, *args)

    def __setitem__(self, *args):
        return _medinterp.MEDINT32___setitem__(self, *args)

    def pop(self):
        return _medinterp.MEDINT32_pop(self)

    def append(self, x):
        return _medinterp.MEDINT32_append(self, x)

    def empty(self):
        return _medinterp.MEDINT32_empty(self)

    def size(self):
        return _medinterp.MEDINT32_size(self)

    def swap(self, v):
        return _medinterp.MEDINT32_swap(self, v)

    def begin(self):
        return _medinterp.MEDINT32_begin(self)

    def end(self):
        return _medinterp.MEDINT32_end(self)

    def rbegin(self):
        return _medinterp.MEDINT32_rbegin(self)

    def rend(self):
        return _medinterp.MEDINT32_rend(self)

    def clear(self):
        return _medinterp.MEDINT32_clear(self)

    def get_allocator(self):
        return _medinterp.MEDINT32_get_allocator(self)

    def pop_back(self):
        return _medinterp.MEDINT32_pop_back(self)

    def erase(self, *args):
        return _medinterp.MEDINT32_erase(self, *args)

    def __init__(self, *args):
        this = _medinterp.new_MEDINT32(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _medinterp.MEDINT32_push_back(self, x)

    def front(self):
        return _medinterp.MEDINT32_front(self)

    def back(self):
        return _medinterp.MEDINT32_back(self)

    def assign(self, n, x):
        return _medinterp.MEDINT32_assign(self, n, x)

    def resize(self, *args):
        return _medinterp.MEDINT32_resize(self, *args)

    def insert(self, *args):
        return _medinterp.MEDINT32_insert(self, *args)

    def reserve(self, n):
        return _medinterp.MEDINT32_reserve(self, n)

    def capacity(self):
        return _medinterp.MEDINT32_capacity(self)

    def __iadd__(self, value):
        return _medinterp.MEDINT32___iadd__(self, value)

    def __add__(self, value):
        return _medinterp.MEDINT32___add__(self, value)

    def __isub__(self, value):
        return _medinterp.MEDINT32___isub__(self, value)

    def __sub__(self, value):
        return _medinterp.MEDINT32___sub__(self, value)

    def __imul__(self, value):
        return _medinterp.MEDINT32___imul__(self, value)

    def __mul__(self, value):
        return _medinterp.MEDINT32___mul__(self, value)

    def __itruediv__(self, *args):
        return _medinterp.MEDINT32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _medinterp.MEDINT32___truediv__(self, *args)
    __div__ = __truediv__



    def __le__(self, value):
        return _medinterp.MEDINT32___le__(self, value)

    def __lt__(self, value):
        return _medinterp.MEDINT32___lt__(self, value)

    def __gt__(self, value):
        return _medinterp.MEDINT32___gt__(self, value)

    def __ge__(self, value):
        return _medinterp.MEDINT32___ge__(self, value)

    def __eq__(self, value):
        return _medinterp.MEDINT32___eq__(self, value)

    def __ne__(self, value):
        return _medinterp.MEDINT32___ne__(self, value)
    __swig_destroy__ = _medinterp.delete_MEDINT32
    __del__ = lambda self: None
MEDINT32_swigregister = _medinterp.MEDINT32_swigregister
MEDINT32_swigregister(MEDINT32)


MEDINT32.__str__= lambda self: str([x for x in self])
MEDINT32.__repr__= lambda self:"MEDINT32" +"("+str([x for x in self])+")"

class MEDCHAR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCHAR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCHAR, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _medinterp.MEDCHAR_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _medinterp.MEDCHAR___nonzero__(self)

    def __bool__(self):
        return _medinterp.MEDCHAR___bool__(self)

    def __len__(self):
        return _medinterp.MEDCHAR___len__(self)

    def __getslice__(self, i, j):
        return _medinterp.MEDCHAR___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _medinterp.MEDCHAR___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _medinterp.MEDCHAR___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _medinterp.MEDCHAR___delitem__(self, *args)

    def __getitem__(self, *args):
        return _medinterp.MEDCHAR___getitem__(self, *args)

    def __setitem__(self, *args):
        return _medinterp.MEDCHAR___setitem__(self, *args)

    def pop(self):
        return _medinterp.MEDCHAR_pop(self)

    def append(self, x):
        return _medinterp.MEDCHAR_append(self, x)

    def empty(self):
        return _medinterp.MEDCHAR_empty(self)

    def size(self):
        return _medinterp.MEDCHAR_size(self)

    def swap(self, v):
        return _medinterp.MEDCHAR_swap(self, v)

    def begin(self):
        return _medinterp.MEDCHAR_begin(self)

    def end(self):
        return _medinterp.MEDCHAR_end(self)

    def rbegin(self):
        return _medinterp.MEDCHAR_rbegin(self)

    def rend(self):
        return _medinterp.MEDCHAR_rend(self)

    def clear(self):
        return _medinterp.MEDCHAR_clear(self)

    def get_allocator(self):
        return _medinterp.MEDCHAR_get_allocator(self)

    def pop_back(self):
        return _medinterp.MEDCHAR_pop_back(self)

    def erase(self, *args):
        return _medinterp.MEDCHAR_erase(self, *args)

    def __init__(self, *args):
        this = _medinterp.new_MEDCHAR(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _medinterp.MEDCHAR_push_back(self, x)

    def front(self):
        return _medinterp.MEDCHAR_front(self)

    def back(self):
        return _medinterp.MEDCHAR_back(self)

    def assign(self, n, x):
        return _medinterp.MEDCHAR_assign(self, n, x)

    def resize(self, *args):
        return _medinterp.MEDCHAR_resize(self, *args)

    def insert(self, *args):
        return _medinterp.MEDCHAR_insert(self, *args)

    def reserve(self, n):
        return _medinterp.MEDCHAR_reserve(self, n)

    def capacity(self):
        return _medinterp.MEDCHAR_capacity(self)

    def __iadd__(self, value):
        return _medinterp.MEDCHAR___iadd__(self, value)

    def __add__(self, value):
        return _medinterp.MEDCHAR___add__(self, value)

    def __isub__(self, value):
        return _medinterp.MEDCHAR___isub__(self, value)

    def __sub__(self, value):
        return _medinterp.MEDCHAR___sub__(self, value)

    def __imul__(self, value):
        return _medinterp.MEDCHAR___imul__(self, value)

    def __mul__(self, value):
        return _medinterp.MEDCHAR___mul__(self, value)

    def __itruediv__(self, *args):
        return _medinterp.MEDCHAR___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _medinterp.MEDCHAR___truediv__(self, *args)
    __div__ = __truediv__



    def __le__(self, value):
        return _medinterp.MEDCHAR___le__(self, value)

    def __lt__(self, value):
        return _medinterp.MEDCHAR___lt__(self, value)

    def __gt__(self, value):
        return _medinterp.MEDCHAR___gt__(self, value)

    def __ge__(self, value):
        return _medinterp.MEDCHAR___ge__(self, value)

    def __eq__(self, value):
        return _medinterp.MEDCHAR___eq__(self, value)

    def __ne__(self, value):
        return _medinterp.MEDCHAR___ne__(self, value)
    __swig_destroy__ = _medinterp.delete_MEDCHAR
    __del__ = lambda self: None
MEDCHAR_swigregister = _medinterp.MEDCHAR_swigregister
MEDCHAR_swigregister(MEDCHAR)


MEDCHAR.__str__= lambda self: str([x for x in self])
MEDCHAR.__repr__= lambda self:"MEDCHAR" +"("+str([x for x in self])+")"


MEDCHAR.__str__= lambda self: str([x for x in self])
MEDCHAR.__repr__= lambda self:"MEDCHAR" +"("+str([x for x in self])+")"


MEDCHAR.__str__= lambda self: str([x for x in self])
MEDCHAR.__repr__= lambda self:"MEDCHAR" +"("+str([x for x in self])+")"


def MEDinterpCr(fid, interpname, geotype, cellnodes, nvariable, maxdegree, nmaxcoef):
    """
    MEDinterpCr(fid, interpname, geotype, cellnodes, nvariable, maxdegree, nmaxcoef) -> med_err

    Parameters
    ----------
    fid: med_idt const
    interpname: char const *const
    geotype: med_geometry_type const
    cellnodes: enum med_bool const
    nvariable: med_int const
    maxdegree: med_int const
    nmaxcoef: med_int const

    """
    return _medinterp.MEDinterpCr(fid, interpname, geotype, cellnodes, nvariable, maxdegree, nmaxcoef)

def MEDinterpBaseFunctionWr(fid, interpname, basisfuncit, ncoef, power, coefficient):
    """
    MEDinterpBaseFunctionWr(fid, interpname, basisfuncit, ncoef, power, coefficient) -> med_err

    Parameters
    ----------
    fid: med_idt const
    interpname: char const *const
    basisfuncit: med_int const
    ncoef: med_int const
    power: med_int const *const
    coefficient: med_float const *const

    """
    return _medinterp.MEDinterpBaseFunctionWr(fid, interpname, basisfuncit, ncoef, power, coefficient)

def MEDnInterp(fid):
    """
    MEDnInterp(fid) -> med_int

    Parameters
    ----------
    fid: med_idt const

    """
    return _medinterp.MEDnInterp(fid)

def MEDinterpInfo(fid, interpit):
    """
    MEDinterpInfo(fid, interpit) -> med_err

    Parameters
    ----------
    fid: med_idt const
    interpit: int const

    """
    return _medinterp.MEDinterpInfo(fid, interpit)

def MEDinterpInfoByName(fid, interpname):
    """
    MEDinterpInfoByName(fid, interpname) -> med_err

    Parameters
    ----------
    fid: med_idt const
    interpname: char const *const

    """
    return _medinterp.MEDinterpInfoByName(fid, interpname)

def MEDinterpBaseFunctionRd(fid, interpname, basisfuncit, power, coefficient):
    """
    MEDinterpBaseFunctionRd(fid, interpname, basisfuncit, power, coefficient) -> med_err

    Parameters
    ----------
    fid: med_idt const
    interpname: char const *const
    basisfuncit: int const
    power: med_int *const
    coefficient: med_float *const

    """
    return _medinterp.MEDinterpBaseFunctionRd(fid, interpname, basisfuncit, power, coefficient)

def MEDinterpBaseFunctionCoefSize(fid, interpname, basisfuncit):
    """
    MEDinterpBaseFunctionCoefSize(fid, interpname, basisfuncit) -> med_int

    Parameters
    ----------
    fid: med_idt const
    interpname: char const *const
    basisfuncit: med_int const

    """
    return _medinterp.MEDinterpBaseFunctionCoefSize(fid, interpname, basisfuncit)
# This file is compatible with both classic and new-style classes.


