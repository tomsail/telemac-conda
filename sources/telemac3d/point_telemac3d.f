!                   **************************
                    SUBROUTINE POINT_TELEMAC3D
!                   **************************
!
!
!***********************************************************************
! TELEMAC3D   V8P4
!***********************************************************************
!
!brief    ALLOCATES TELEMAC3D STRUCTURES.
!
!history  JACEK A. JANKOWSKI PINXIT
!+        **/03/1999
!+
!+   FORTRAN 95 VERSION
!
!history  J-M HERVOUET (LNHE)
!+        19/10/2009
!+        V6P0
!+
!
!history  N.DURAND (HRW), S.E.BOURBAN (HRW)
!+        13/07/2010
!+        V6P0
!+   Translation of French comments within the FORTRAN sources into
!+   English comments
!
!history  N.DURAND (HRW), S.E.BOURBAN (HRW)
!+        21/08/2010
!+        V6P0
!+   Creation of DOXYGEN tags for automated documentation and
!+   cross-referencing of the FORTRAN sources
!
!history  J-M HERVOUET (LNHE)
!+        02/04/2012
!+        V6P2
!+   New variables for graphic printouts added, for a clean restart.
!
!history  J-M HERVOUET (EDF R&D, LNHE)
!+        18/06/2013
!+        V6P3
!+   Size of IT1,2,3,4 modified in case of weak characteristics.
!
!history  C. VILLARET & T. BENSON & D. KELLY (HR-WALLINGFORD)
!+        27/02/2014
!+        V7P0
!+   New developments in sediment merged on 25/02/2014.
!
!history  J-M HERVOUET (EDF R&D, LNHE)
!+        14/05/2014
!+        V7P0
!+   ZCONV and ZFLATS now declared as type 15, discontinuous linear.
!
!history  G. ANTOINE (EDF LAB, LNHE)
!+        19/09/2014
!+        V7P0
!+   Adding variables for mixed sediment, see IF(S3D_MIXTE).
!
!history  J-M HERVOUET (EDF LAB, LNHE)
!+        28/07/2015
!+        V7P1
!+   Adding aliases and 2D private arrays.
!
!history  A. JOLY (EDF LAB, LNHE)
!+        27/08/2015
!+        V7P1
!+   Imposed flowrates on the bed.
!
!history  J-M HERVOUET (EDF LAB, LNHE)
!+        24/03/2016
!+        V7P2
!+   Adding ZN.
!
!history  J-M HERVOUET (EDF LAB, LNHE)
!+        22/08/2016
!+        V7P2
!+   Adding TB2, a block of work arrays for the LIPS advection scheme.
!
!history  C.-T. PHAM (EDF, LNHE)
!+        01/03/2017
!+        V7P2
!+   Allowing k-epsilon model on a direction and not on the other.
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      USE BIEF
      USE DECLARATIONS_TELEMAC
      USE DECLARATIONS_TELEMAC3D
      USE METEO_TELEMAC !, ONLY: WINDX,WINDY,PATMOS,TAIR,POINT_METEO
      USE DECLARATIONS_WAQTEL, ONLY: WAQPROCESS
      USE DECLARATIONS_GAIA, ONLY: NUM_ISUSP_ICLA,FLUDP,FLUDPT,FLUER
!
      USE DECLARATIONS_SPECIAL
      IMPLICIT NONE
!
!-----------------------------------------------------------------------
!
      INTEGER CFG(2),CFG2D(2),CFGMURD(2),CFGBOR2D(2),CFGMURD_TF(2)
      INTEGER ITRAC,ITAB,IELM,IELV,IELH,STATUT,NTR,I,NSEG,SIZ,K,IPLAN
      LOGICAL YESWEAK,YESLIPS
      CHARACTER(LEN=1) TYPDIA, TYPEXT
!
!-----------------------------------------------------------------------
!
      IF(LISTIN) THEN
        WRITE(LU,21)
      ENDIF
 21   FORMAT(1X,/,1X,'POINT_TELEMAC3D: MEMORY ALLOCATION',/)
!
!-----------------------------------------------------------------------
!
!     WILL THERE BE WEAK CHARACTERISTICS?
!
      YESWEAK=.FALSE.
      IF(OPTCHA.GT.1) THEN
        IF(SCHCVI.EQ.ADV_CAR) YESWEAK=.TRUE.
        IF(SCHCKE.EQ.ADV_CAR) YESWEAK=.TRUE.
        DO ITRAC=1,NTRAC
          IF(SCHCTA(ITRAC).EQ.ADV_CAR) YESWEAK=.TRUE.
        ENDDO
      ENDIF
!
!-----------------------------------------------------------------------
!
!     WILL THERE BE A LIPS SCHEME?
!
      YESLIPS=.FALSE.
!     LOOKING AT VELOCITIES
      IF((SCHCVI.EQ.ADV_NSC.OR.SCHCVI.EQ.ADV_PSI).AND.
     &   OPTADV_VI.EQ.4) THEN
        YESLIPS=.TRUE.
      ENDIF
!     LOOKING AT K-EPSILON
      IF((SCHCKE.EQ.ADV_NSC.OR.SCHCKE.EQ.ADV_PSI).AND.
     &   OPTADV_KE.EQ.4) THEN
        YESLIPS=.TRUE.
      ENDIF
!     LOOKING AT TRACERS
      IF(NTRAC.GT.0) THEN
        DO ITRAC=1,NTRAC
          IF((SCHCTA(ITRAC).EQ.ADV_NSC.OR.SCHCTA(ITRAC).EQ.ADV_PSI).AND.
     &        OPTADV_TR(ITRAC).EQ.4) THEN
            YESLIPS=.TRUE.
          ENDIF
        ENDDO
      ENDIF
!
!-----------------------------------------------------------------------
! DECLARES DISCRETISATION TYPES HERE
!
      IELM0 = 10*(IELMH/10) ! FOR TELEMAC2D
      IELM1 = IELBOR(IELMH,1) ! BOUNDARY DISCRET. FOR TELEMAC2D
!
! IELMU IS 12, WHEN QUASI-BUBBLE FREE SURFACE REQUIRED (IN LECDON)
! IF NOT, IELMU=IELMH
!
      IELMX=MAX(IELMU,IELM2H,IELMH) ! IT WILL BE MAX. DISCR. IN 2D
!
! STORAGE TYPE AND MATRIX-VECTOR PRODUCT TYPE
!
      CFG(1) = OPTASS
      CFG(2) = PRODUC   ! PRODUC=1 HARD IN LECDON
      CFG2D(1) = OPTASS2D
      CFG2D(2) = PRODUC   ! PRODUC=1 HARD IN LECDON
!     MURD MATRIX WITH EDGE-BASED STORAGE FOR TIDAL FLATS
      CFGMURD_TF(1)=3
      CFGMURD_TF(2)=1
!     NORMAL MURD MATRIX WITH EBE STORAGE BECAUSE (SEE MURD3D.F) PSI
!     SCHEME IS DONE IN EBE STORAGE
      CFGMURD(1)=1
      CFGMURD(2)=1
!
      CFGBOR2D(1)=1
      CFGBOR2D(2)=1
!
!=======================================================================
!
!                     *********************
!                     *  MESH - GEOMETRY  *
!                     *********************
!
! TWO MESHES ARE ALLOCATED: (1) 2D BASE MESH, (2) 3D SIGMA-MESH
!
! ALLOCATES THE 2D MESH STRUCTURE FOR TELEMAC2D
! DISCRETISATION IELMH GIVEN IN LECDON
! IELMX = IELMU IF QUASI-BUBBLE ELEMENT REQUIRED, OTHERWISE IELMH
!
      EQUA = 'NO_EQUATION_IS_GIVEN'
!
      CALL ALMESH(MESH2D,'MESH2D',IELMX,SPHERI,CFG2D,
     &            T3D_FILES(T3DGEO)%FMT,
     &            T3D_FILES(T3DGEO)%LU,EQUA,0,NPLAN=1,
     &            PROJECTION=PROTYP,LATI0=LATIT,LONGI0=LONGIT)
      NSEG=MESH2D%NSEG
!
! ALIASES FOR CERTAIN COMPONENTS OF THE 2D MESH STRUCTURE
!
      X2      => MESH2D%X
      Y2      => MESH2D%Y
!
      SURFA2  => MESH2D%SURFAC
      XNEBOR2 => MESH2D%XNEBOR
      YNEBOR2 => MESH2D%YNEBOR
      XSGBOR2 => MESH2D%XSGBOR
      YSGBOR2 => MESH2D%YSGBOR
      IKLE2   => MESH2D%IKLE
      NBOR2   => MESH2D%NBOR   ! PREVIOUSLY SIMPLY NBOR
!
      NELEM2  => MESH2D%NELEM
      NELMAX2 => MESH2D%NELMAX  ! PREVIOUSLY NELMA2 (ADAPTIVITY OUTLOOK)
      NPTFR2  => MESH2D%NPTFR   ! PREVIOUSLY SIMPLY NPTFR
      NPTFRX2 => MESH2D%NPTFRX
      DIM2    => MESH2D%DIM1
      TYPELM2 => MESH2D%TYPELM
      NPOIN2  => MESH2D%NPOIN
      NPMAX2  => MESH2D%NPMAX
      MXPTVS2 => MESH2D%MXPTVS
      MXELVS2 => MESH2D%MXELVS
      LV      => MESH2D%LV      ! MESH-CHECKED? 2D=3D FOR SIGMA MESH
!
!-----------------------------------------------------------------------
! ALLOCATES THE 3D MESH STRUCTURE (EQUA=EMPTY) (READ AGAIN?)
!
      EQUA = 'NO_EQUATION_IS_GIVEN'
!
      CALL ALMESH(MESH3D,'MESH3D',IELM3,SPHERI,CFG,
     &            T3D_FILES(T3DGEO)%FMT,
     &            T3D_FILES(T3DGEO)%LU,EQUA,0,NPLAN=NPLAN,
     &            PROJECTION=PROTYP,LATI0=LATIT,LONGI0=LONGIT)
!
! ALIAS FOR CERTAIN COMPONENTS OF THE 3D MESH STRUCTURE
! THEY ARE DEFINED IN DECLARATIONS
!
      X       => MESH3D%X%R
      Y       => MESH3D%Y%R
      Z       => MESH3D%Z%R
      X3      => MESH3D%X    ! POINTERS
      Y3      => MESH3D%Y
      Z3      => MESH3D%Z
      SURFA3  => MESH3D%SURFAC
      XSGBOR3 => MESH3D%XSGBOR
      YSGBOR3 => MESH3D%YSGBOR
      ZSGBOR3 => MESH3D%ZSGBOR
      IKLE3   => MESH3D%IKLE
      NBOR3   => MESH3D%NBOR
!
      W1      => MESH3D%W
!
      NELEM3  => MESH3D%NELEM
      NELMAX3 => MESH3D%NELMAX   ! PREVIOUSLY NELMA3 (ADAPTIVITY?)
      NELEB   => MESH3D%NELEB
      NELEBX  => MESH3D%NELEBX
      NPTFR3  => MESH3D%NPTFR
      NPTFRX3 => MESH3D%NPTFRX
      DIM3    => MESH3D%DIM1
      TYPELM3 => MESH3D%TYPELM
      NPOIN3  => MESH3D%NPOIN
      NPMAX3  => MESH3D%NPMAX
      MXPTVS3 => MESH3D%MXPTVS
      MXELVS3 => MESH3D%MXELVS
!
!-----------------------------------------------------------------------
! VARIOUS MESH PARAMETER FIX
!
      NETAGE = NPLAN - 1
!
!     NUMBER OF ADVECTED VARIABLES (3 FOR VELOCITY, 2 FOR K-EPSILON
!                                   THEN TRACERS)
      NVBIL  = 5 + NTRAC
!
      IF (LISTIN) THEN
        WRITE(LU,32)
     &             TYPELM2,NPOIN2,NELEM2,NPTFR2,TYPELM3,NPOIN3,NELEM3,
     &             NPLAN,NELEB,NPTFR3+2*NPOIN2,NPTFR3,NPOIN2,NPOIN2
      ENDIF
!
 32   FORMAT(/,' 2D MESH',/,
     &         ' -------',//,
     &         ' 2D ELEMENT TYPE                : ',I8,/,
     &         ' NUMBER OF 2D NODES             : ',I8,/,
     &         ' NUMBER OF 2D ELEMENTS          : ',I8,/,
     &         ' NUMBER OF 2D BOUNDARY NODES    : ',I8,///,
     &         ' 3D MESH',/,
     &         ' -------',//,
     &         ' 3D ELEMENT TYPE                : ',I8,/,
     &         ' NUMBER OF 3D NODES             : ',I8,/,
     &         ' NUMBER OF 3D ELEMENTS          : ',I8,/,
     &         ' NUMBER OF LEVELS               : ',I8,/,
     &         ' NUMBER OF BOUNDARY ELEMENTS    : ',I8,/,
     &         ' TOTAL NUMBER OF BOUNDARY NODES : ',I8,/,
     &         ' INCLUDING   LATERAL BOUNDARIES : ',I8,/,
     &         '                        SURFACE : ',I8,/,
     &         '                         BOTTOM : ',I8,/)
!
!-----------------------------------------------------------------------
! FIELDS CONNECTED STRONGLY WITH GEOMETRY AND MESH
! REAL
!
      CALL BIEF_ALLVEC(1, ZPROP,  'ZPROP ', IELM3 , 1, 1,MESH3D)
!     USED ONLY WITH SUPG ADVECTION
      CALL BIEF_ALLVEC(1, ZT   ,  'ZT    ', IELM3 , 1, 1,MESH3D)
!     USED ONLY WITH DISTRIBUTIVE SCHEMES WITH UPWIND OF DERIVATIVE
!     IN TIME
      CALL BIEF_ALLVEC(1, ZN   ,  'ZN    ', IELM3 , 1, 1,MESH3D)
!
      CALL ALLBLO(GRADZF, 'GRADZF')
!     23/11/2010 NOW GRADZF CONTAINS GRADIENTS OF ALL PLANES
      CALL BIEF_ALLVEC_IN_BLOCK(GRADZF,2,1,'GRAZF ',IELM3 ,1,1,MESH3D)
!
      CALL ALLBLO(GRADZS, 'GRADZS')
      CALL BIEF_ALLVEC_IN_BLOCK(GRADZS,2,1,'GRAZS ',IELM2H,1,1,MESH2D)
      CALL ALLBLO(GRADZN, 'GRADZN')
      CALL BIEF_ALLVEC_IN_BLOCK(GRADZN,2,1,'GRAZN ',IELM2H,1,1,MESH2D)
!
      CALL BIEF_ALLVEC(1, DSSUDT, 'DSSUDT', IELM2H, 1, 1,MESH2D)
!
!     DESCRIBES THE MESH ON THE VERTICAL
!
      CALL BIEF_ALLVEC(1, ZSTAR       , 'ZSTAR ' , NPLAN ,1,0,MESH3D)
      CALL BIEF_ALLVEC(1, ZPLANE      , 'ZPLANE' , NPLAN ,1,0,MESH3D)
      CALL BIEF_ALLVEC(1, ZCHAR       , 'ZCHAR ' , NPLAN ,1,0,MESH3D)
      CALL BIEF_ALLVEC(2, TRANSF_PLANE, 'TRAPLA' , NPLAN ,1,0,MESH3D)
!
! MESH AND GEOMETRY, INTEGERS
!
      CALL BIEF_ALLVEC(2,LIHBOR, 'LIHBOR',         IELM1,1,1,MESH2D)
      CALL BIEF_ALLVEC(2,NUMLIQ, 'NUMLIQ',        IELM2V,1,1,MESH3D)
      CALL BIEF_ALLVEC(2,NUMLIQ_ELM, 'NLQELM',10*(IELM2V/10),1,1,MESH3D)
      CALL BIEF_ALLVEC(2,BOUNDARY_COLOUR ,'BNDCOL',IELM1,1,1,MESH2D)
      CALL BIEF_ALLVEC(2,LIMPRO, 'LIMPRO',         IELM1,6,1,MESH2D)
!
! OPEN BED BOUNDARIES VARIABLES
!
      IF(BEDBOU)THEN
        CALL BIEF_ALLVEC(2,NLIQBED, 'NLIQBE', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1,BEDFLU , 'BEDFLU', IELM2H, 1, 1,MESH2D)
        DO I=1,NBEDFLO
          NLIQBED%I(I)=0
        ENDDO
      ELSE
        CALL BIEF_ALLVEC(2,NLIQBED, 'NLIQBE', 0     , 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1,BEDFLU , 'BEDFLU', 0     , 1, 0,MESH2D)
      ENDIF
!
!-----------------------------------------------------------------------
!
!  BLOCK OF BOUNDARY CONDITIONS MASKS FOR PROPAGATION
!
!  BLOCK OF 9 VECTORS FOR MASKING (2D AND 3D)
!
      CALL ALLBLO(MASK  , 'MASK  ')
      CALL BIEF_ALLVEC_IN_BLOCK(MASK,9,1,'MASK  ',IELM1,1,1,MESH2D)
      CALL ALLBLO(MASK_3D, 'MASK3D')
      CALL BIEF_ALLVEC_IN_BLOCK(MASK_3D,9,1,'MSK3D ',
     &                          10*(IELM2V/10),1,1,MESH3D)
!
! MASKING
!
      IF (MSK.OR.(OPTBAN.EQ.1.AND.NONHYD)) THEN
        CALL BIEF_ALLVEC(1, MASKEL, 'MASKEL',10*(IELM3/10),1,1,MESH3D)
        CALL BIEF_ALLVEC(1, MASKPT, 'MASKPT', IELM3,       1,1,MESH3D)
      ELSE
        CALL BIEF_ALLVEC(1, MASKEL, 'MASKEL', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, MASKPT, 'MASKPT', 0, 1, 0,MESH3D)
      ENDIF
!
!    MASKS FOR LATERAL BOUNDARY ELEMENTS...
!
!     USED WHEN ELEMENTS ARE MASKED
      CALL BIEF_ALLVEC(1, MASKBR, 'MASKBR',10*(IELM2V/10), 1, 1,MESH3D)
!     USED AS WORK ARRAY IN DEBIMP_3D
      CALL BIEF_ALLVEC(1, MASKTR, 'MASKTR',10*(IELM2V/10), 1, 1,MESH3D)
!
!=======================================================================
!                     ********************
!                     *    VARIABLES     *
!                     ********************
!
!-----------------------------------------------------------------------
! HORIZONTAL VELOCITY (U,V)
!
! U AND V VELOCITY COMPONENTS
!
      CALL BIEF_ALLVEC(1, UN,       'UN    ',IELM3,  1,1,MESH3D)
      CALL BIEF_ALLVEC(1, VN,       'VN    ',IELM3,  1,1,MESH3D)
      CALL BIEF_ALLVEC(1, UC,       'UC    ',IELM3,  1,1,MESH3D)
      CALL BIEF_ALLVEC(1, VC,       'VC    ',IELM3,  1,1,MESH3D)
      CALL BIEF_ALLVEC(1, UD,       'UD    ',IELM3,  1,1,MESH3D)
      CALL BIEF_ALLVEC(1, VD,       'VD    ',IELM3,  1,1,MESH3D)
      CALL BIEF_ALLVEC(1, U,        'U     ',IELM3,  1,2,MESH3D)
      CALL BIEF_ALLVEC(1, V,        'V     ',IELM3,  1,2,MESH3D)
      CALL BIEF_ALLVEC(1, S0U,      'S0U   ',IELM3,  1,1,MESH3D)
      CALL BIEF_ALLVEC(1, S0V,      'S0V   ',IELM3,  1,1,MESH3D)
      CALL BIEF_ALLVEC(1, S1U,      'S1U   ',IELM3,  1,1,MESH3D)
      CALL BIEF_ALLVEC(1, S1V,      'S1V   ',IELM3,  1,1,MESH3D)
      CALL BIEF_ALLVEC(1, SMU,      'SMU   ',IELM3,  1,1,MESH3D)
      CALL BIEF_ALLVEC(1, SMV,      'SMV   ',IELM3,  1,1,MESH3D)
      CALL BIEF_ALLVEC(1, UBORF,    'UBORF ',IELM2H, 1,1,MESH2D)
      CALL BIEF_ALLVEC(1, VBORF,    'VBORF ',IELM2H, 1,1,MESH2D)
      CALL BIEF_ALLVEC(1, UBORL,    'UBORL ',IELM2V, 1,1,MESH3D)
      CALL BIEF_ALLVEC(1, VBORL,    'VBORL ',IELM2V, 1,1,MESH3D)
      CALL BIEF_ALLVEC(1, UBORS,    'UBORS ',IELM2H, 1,1,MESH2D)
      CALL BIEF_ALLVEC(1, VBORS,    'VBORS ',IELM2H, 1,1,MESH2D)
      CALL BIEF_ALLVEC(1, AUBORF,   'AUBORF',IELM2H, 1,1,MESH2D)
      CALL BIEF_ALLVEC(1, AVBORF,   'AVBORF',IELM2H, 1,1,MESH2D)
      CALL BIEF_ALLVEC(1, AUBORL,   'AUBORL',IELM2V, 1,1,MESH3D)
      CALL BIEF_ALLVEC(1, UETCAL,   'UETCAL',IELM2V, 1,1,MESH3D)
      CALL BIEF_ALLVEC(1, AVBORL,   'AVBORL',IELM2V, 1,1,MESH3D)
      CALL BIEF_ALLVEC(1, AUBORS,   'AUBORS',IELM2H, 1,1,MESH2D)
      CALL BIEF_ALLVEC(1, AVBORS,   'AVBORS',IELM2H, 1,1,MESH2D)
      CALL BIEF_ALLVEC(1, BUBORF,   'BUBORF',IELM2H, 1,1,MESH2D)
      CALL BIEF_ALLVEC(1, BUBORL,   'BUBORL',IELM2V, 1,1,MESH3D)
      CALL BIEF_ALLVEC(1, BUBORS,   'BUBORS',IELM2H, 1,1,MESH2D)
      CALL BIEF_ALLVEC(1, BVBORF,   'BVBORF',IELM2H, 1,1,MESH2D)
      CALL BIEF_ALLVEC(1, BVBORL,   'BVBORL',IELM2V, 1,1,MESH3D)
      CALL BIEF_ALLVEC(1, BVBORS,   'BVBORS',IELM2H, 1,1,MESH2D)
      CALL BIEF_ALLVEC(1, UBORSAVE, 'UBSAVE',IELM2V, 1,1,MESH3D)
      CALL BIEF_ALLVEC(1, VBORSAVE, 'VBSAVE',IELM2V, 1,1,MESH3D)
      CALL BIEF_ALLVEC(1, WBORSAVE, 'WBSAVE',IELM2V, 1,1,MESH3D)
      CALL BIEF_ALLVEC(1, WDIST  ,  'WDIST ',IELM2H, 1,1,MESH2D)
      CALL BIEF_ALLVEC(1, STRAIN,   'STRAIN',IELM3,  1,1,MESH3D)
      CALL BIEF_ALLVEC(1, ROTAN ,   'ROTAN ',IELM3,  1,1,MESH3D)
!
      IF(TIDALTYPE.EQ.0) THEN
        CALL BIEF_ALLVEC(1,HBTIDE ,'HBTIDE',0,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,UBTIDE ,'UBTIDE',0,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,VBTIDE ,'VBTIDE',0,1,0,MESH2D)
        CALL BIEF_ALLVEC(2,NUMTIDE,'NUMTID',0,1,0,MESH2D)
      ELSE
        CALL BIEF_ALLVEC(1,HBTIDE ,'HBTIDE',IELM1 ,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,UBTIDE ,'UBTIDE',IELM1 ,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,VBTIDE ,'VBTIDE',IELM1 ,1,1,MESH2D)
        CALL BIEF_ALLVEC(2,NUMTIDE,'NUMTID',IELM1 ,1,1,MESH2D)
      ENDIF
!
! FRICTION VELOCITY **2 ON THE BOTTOM
!
      CALL BIEF_ALLVEC(1, UETCAR, 'UETCAR', IELM2H, 1,1,MESH2D)
!
! PLANE ON THE BOTTOM (THE FIRST ONE WITH A REAL ELEMENT HEIGHT ABOVE)
!
      CALL BIEF_ALLVEC(2, IPBOT,  'IPBOT ', IELM2H, 1,1,MESH2D)
!
! BOUNDARY CONDITION TYPES/
! ATTRIBUTES FOR THE HORIZONTAL VELOCITY COMPONENTS
!
      CALL BIEF_ALLVEC(2, LIUBOF,     'LIUBOF', IELM2H, 1,1,MESH2D)
! LIUBOL, LIVBOL, LIWBOL, LIEBOL, LIKBOL, LITABL:
! VALUES SAVED IN SECOND DIMENSION BECAUSE ADVECTION SCHEMES (CVDF3D)
! MAY CHANGE THE VALUES
      CALL BIEF_ALLVEC(2, LIUBOL,     'LIUBOL', IELM2V, 2,1,MESH3D)
      CALL BIEF_ALLVEC(2, LIUBOS,     'LIUBOS', IELM2H, 1,1,MESH2D)
!
      CALL BIEF_ALLVEC(2, LIVBOF,     'LIVBOF', IELM2H, 1,1,MESH2D)
      CALL BIEF_ALLVEC(2, LIVBOL,     'LIVBOL', IELM2V, 2,1,MESH3D)
      CALL BIEF_ALLVEC(2, LIVBOS,     'LIVBOS', IELM2H, 1,1,MESH2D)
!
! BOUNDARY CONDITION SAVED WHEN THOMPSON CONDITIONS USED
!
      IF(THOMFR) THEN
        CALL BIEF_ALLVEC(2,LIHBOR_USER, 'HB_USE',IELM1 ,1,1,MESH2D)
        CALL BIEF_ALLVEC(2,LIUBOL_USER, 'UB_USE',IELM2V,1,1,MESH3D)
        CALL BIEF_ALLVEC(2,LIVBOL_USER, 'UV_USE',IELM2V,1,1,MESH3D)
      ENDIF
!
!-----------------------------------------------------------------------
! W VERTICAL VELOCITY COMPONENT (REAL VALUES)
! TREATED DIFFERENTLY DEPENDING ON THE (NON)HYDROSTATIC OPTION
!
      IF (NONHYD) THEN
        CALL BIEF_ALLVEC(1, WN,     'WN    ', IELM3, 1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, WC,     'WC    ', IELM3, 1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, WD,     'WD    ', IELM3, 1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, WCONV , 'WCONV ', IELM3, 1, 1,MESH3D)
      ELSE ! DUMMIES
        CALL BIEF_ALLVEC(1, WN,     'WN    ', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, WC,     'WC    ', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, WD,     'WD    ', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, WCONV , 'WCONV ', 0, 1, 0,MESH3D)
      ENDIF
      CALL BIEF_ALLVEC(1, W,      'W     ', IELM3,  1, 1,MESH3D)
      IF (NONHYD) THEN
        CALL BIEF_ALLVEC(1, S0W,    'S0W   ', IELM3,  1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, S1W,    'S1W   ', IELM3,  1, 1,MESH3D)
      ELSE ! DUMMIES
        CALL BIEF_ALLVEC(1, S0W,    'S0W   ', 0,  1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, S1W,    'S1W   ', 0,  1, 0,MESH3D)
      ENDIF
      CALL BIEF_ALLVEC(1, WBORF,  'WBORF ', IELM2H, 1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, WBORL,  'WBORL ', IELM2V, 1, 1,MESH3D)
      CALL BIEF_ALLVEC(1, WBORS,  'WBORS ', IELM2H, 1, 1,MESH2D)
      IF (NONHYD) THEN
        CALL BIEF_ALLVEC(1, AWBORF, 'AWBORF', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, AWBORL, 'AWBORL', IELM2V, 1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, AWBORS, 'AWBORS', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, BWBORF, 'BWBORF', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, BWBORL, 'BWBORL', IELM2V, 1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, BWBORS, 'BWBORS', IELM2H, 1, 1,MESH2D)
      ELSE ! DUMMIES
        CALL BIEF_ALLVEC(1, AWBORF, 'AWBORF', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, AWBORL, 'AWBORL', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, AWBORS, 'AWBORS', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, BWBORF, 'BWBORF', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, BWBORL, 'BWBORL', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, BWBORS, 'BWBORS', 0, 1, 0,MESH2D)
      ENDIF
!
      CALL BIEF_ALLVEC(2, LIWBOF,    'LIWBOF', IELM2H, 1, 1,MESH2D)
      CALL BIEF_ALLVEC(2, LIWBOL,    'LIWBOL', IELM2V, 2, 1,MESH3D)
      CALL BIEF_ALLVEC(2, LIWBOS,    'LIWBOS', IELM2H, 1, 1,MESH2D)
!
! SIGMA-TRANSFORMED VALUES / NO BLOCK
!
      CALL BIEF_ALLVEC(1,WS,'WS    ',IELM3,1,1,MESH3D)
!
! VECTOR OF SIZE NUMBER OF POINTS IN THE ELEMENT * NELEM
!
      CALL BIEF_ALLVEC(1,WEL,'WEL   ',10*(IELM3/10),
     &                 BIEF_NBPEL(IELM3,MESH3D),1,MESH3D)
!
!=======================================================================
! HYDRODYNAMIC PRESSURE SPECIFIC FOR THE NON-HYDROSTATIC OPTION
!
      IF (NONHYD) THEN
        CALL BIEF_ALLVEC(1, DP,     'DP    ', IELM3,  1, 2,MESH3D)
        CALL BIEF_ALLVEC(1, DPN,    'DPN   ', IELM3,  1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, PH,     'PH    ', IELM3,  1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, PBORF,  'PBORF ', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, PBORL,  'PBORL ', IELM2V, 1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, PBORS,  'PBORS ', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(2, LIPBOF, 'LIPBOF', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(2, LIPBOL, 'LIPBOL', IELM2V, 1, 1,MESH3D)
        CALL BIEF_ALLVEC(2, LIPBOS, 'LIPBOS', IELM2H, 1, 1,MESH2D)
      ELSE
        CALL BIEF_ALLVEC(1, DP,     'DP    ', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, DPN,    'DPN   ', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, PH,     'PH    ', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, PBORF,  'PBORF ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, PBORL,  'PBORL ', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, PBORS,  'PBORS ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(2, LIPBOF, 'LIPBOF', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(2, LIPBOL, 'LIPBOL', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(2, LIPBOS, 'LIPBOS', 0, 1, 0,MESH2D)
      ENDIF
!
!=======================================================================
!
      CALL ALLBLO(TRN      ,'TRN   ')
      CALL ALLBLO(TAC      ,'TAC   ')
      CALL ALLBLO(TA       ,'TA    ')
      CALL ALLBLO(S0TA     ,'S0TA  ')
      CALL ALLBLO(S1TA     ,'S1TA  ')
      CALL ALLBLO(TABORF   ,'TABORF')
      CALL ALLBLO(TABORL   ,'TABORL')
      CALL ALLBLO(TABORS   ,'TABORS')
      CALL ALLBLO(ATABOF   ,'ATABOF')
      CALL ALLBLO(ATABOL   ,'ATABOL')
      CALL ALLBLO(ATABOS   ,'ATABOS')
      CALL ALLBLO(BTABOF   ,'BTABOF')
      CALL ALLBLO(BTABOL   ,'BTABOL')
      CALL ALLBLO(BTABOS   ,'BTABOS')
      CALL ALLBLO(LITABF   ,'LITABF')
      CALL ALLBLO(LITABL   ,'LITABL')
      CALL ALLBLO(LITABS   ,'LITABS')
      CALL ALLBLO(TRBORSAVE,'TBSAVE')
      CALL ALLBLO(TA_SCE   ,'TA_SCE')
      CALL ALLBLO(WCHU     ,'WCHU  ')
!
      IF(NTRAC.NE.0) THEN
        IELM   = IELM3
        IELH   = IELM2H
        IELV   = IELM2V
        STATUT = 1
      ELSE
        IELM   = 0
        IELH   = 0
        IELV   = 0
        STATUT = 0
      ENDIF
!
! GENERIC NAMES SHORTENED IN ORDER TO PROVIDE THE AUTOMATIC
! NUMBERING MECHANISM!
!
! MAX(NTRAC,1) BELOW : TO HAVE AT LEAST ONE ARRAY, EVEN EMPTY
!                      TO PUT IN THE CALL TO CONLIM
!                      AND CALL TO TEL4DEL
!
      CALL BIEF_ALLVEC_IN_BLOCK(TRN,    NTRAC,
     &                          1, 'TRN   ', IELM, 1, STATUT,MESH3D)
      CALL BIEF_ALLVEC_IN_BLOCK(TAC,    NTRAC,
     &                          1, 'TAC   ', IELM, 1, STATUT,MESH3D)
      CALL BIEF_ALLVEC_IN_BLOCK(TA,     MAX(NTRAC,1),
     &                          1, 'TA    ', IELM, 1, STATUT,MESH3D)
      CALL BIEF_ALLVEC_IN_BLOCK(S0TA,   NTRAC,
     &                          1, 'S0TA  ', IELM, 1, STATUT,MESH3D)
      CALL BIEF_ALLVEC_IN_BLOCK(S1TA,   NTRAC,
     &                          1, 'S1TA  ', IELM, 1, STATUT,MESH3D)
      CALL BIEF_ALLVEC_IN_BLOCK(TABORF, NTRAC,
     &                          1, 'TABF  ', IELH, 1, STATUT,MESH2D)
      CALL BIEF_ALLVEC_IN_BLOCK(TABORL, MAX(NTRAC,1) ,
     &                          1, 'TABL  ', IELV, 1, STATUT,MESH3D)
      CALL BIEF_ALLVEC_IN_BLOCK(TABORS, NTRAC,
     &                          1, 'TABS  ', IELH, 1, STATUT,MESH2D)
      CALL BIEF_ALLVEC_IN_BLOCK(ATABOF, NTRAC,
     &                          1, 'ATAF  ', IELH, 1, STATUT,MESH2D)
      CALL BIEF_ALLVEC_IN_BLOCK(ATABOL, MAX(NTRAC,1),
     &                          1, 'ATAL  ', IELV, 1, STATUT,MESH3D)
      CALL BIEF_ALLVEC_IN_BLOCK(ATABOS, NTRAC,
     &                          1, 'ATAS  ', IELH, 1, STATUT,MESH2D)
      CALL BIEF_ALLVEC_IN_BLOCK(BTABOF, NTRAC,
     &                          1, 'BTAF  ', IELH, 1, STATUT,MESH2D)
      CALL BIEF_ALLVEC_IN_BLOCK(BTABOL, MAX(NTRAC,1),
     &                          1, 'BTAL  ', IELV, 1, STATUT,MESH3D)
      CALL BIEF_ALLVEC_IN_BLOCK(BTABOS, NTRAC,
     &                          1, 'BTAS  ', IELH, 1, STATUT,MESH2D)
      CALL BIEF_ALLVEC_IN_BLOCK(LITABF, NTRAC,
     &                          2, 'LTAF  ', IELH, 1, STATUT,MESH2D)
      CALL BIEF_ALLVEC_IN_BLOCK(LITABL, MAX(NTRAC,1) ,
     &                          2, 'LTAL  ', IELV, 2, STATUT,MESH3D)
      CALL BIEF_ALLVEC_IN_BLOCK(LITABS, NTRAC,
     &                          2, 'LTAS  ', IELH, 1, STATUT,MESH2D)
      CALL BIEF_ALLVEC_IN_BLOCK(TRBORSAVE,NTRAC,
     &                          1, 'TBSA  ', IELV, 1, STATUT,MESH3D)
      CALL BIEF_ALLVEC_IN_BLOCK(TA_SCE,NTRAC,
     &                          1, 'TSCE  ', NSCE, 1, 0     ,MESH3D)
!                                                     SIZE NSCE ALWAYS
      CALL BIEF_ALLVEC_IN_BLOCK(WCHU,     MAX(NTRAC,1),
     &                          1, 'WCHU  ', IELM, 1, STATUT,MESH3D)
!
!=======================================================================
! K-EPSILON MODEL
!
      IF(ITURBV.EQ.3.OR.ITURBH.EQ.3.OR.ITURBV.EQ.7.OR.ITURBH.EQ.7) THEN
        IELM   = IELM3
        IELH   = IELM2H
        IELV   = IELM2V
        STATUT = 1
      ELSE
        IELM   = 0
        IELH   = 0
        IELV   = 0
        STATUT = 0
      ENDIF
!
      CALL BIEF_ALLVEC(1, AKN,      'AKN   ',IELM,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, AKC,      'AKC   ',IELM,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, S0AK,     'S0AK  ',IELM,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, S1AK,     'S1AK  ',IELM,1, STATUT,MESH3D )
!
      CALL BIEF_ALLVEC(1, EPN,      'EPN   ',IELM,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, EPC,      'EPC   ',IELM,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, S0EP,     'S0EP  ',IELM,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, S1EP,     'S1EP  ',IELM,1, STATUT,MESH3D )
!
      CALL BIEF_ALLVEC(1, KBORF,    'KBORF ',IELH,1, STATUT,MESH2D )
      CALL BIEF_ALLVEC(1, KBORL,    'KBORL ',IELV,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, KBORSAVE, 'KBSAVE',IELV,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, KBORS,    'KBORS ',IELH,1, STATUT,MESH2D )
!
      CALL BIEF_ALLVEC(1, EBORF,    'EBORF ',IELH,1, STATUT,MESH2D )
      CALL BIEF_ALLVEC(1, EBORL,    'EBORL ',IELV,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, EBORSAVE, 'EBSAVE',IELV,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, EBORS,    'EBORS ',IELH,1, STATUT,MESH2D )
!
      CALL BIEF_ALLVEC(1, AKBORF, 'AKBORF', IELH, 1, STATUT,MESH2D )
      CALL BIEF_ALLVEC(1, AKBORL, 'AKBORL', IELV, 1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, AKBORS, 'AKBORS', IELH, 1, STATUT,MESH2D )
!
      CALL BIEF_ALLVEC(1, AEBORF, 'AEBORF', IELH, 1, STATUT,MESH2D )
      CALL BIEF_ALLVEC(1, AEBORL, 'AEBORL', IELV, 1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, AEBORS, 'AEBORS', IELH, 1, STATUT,MESH2D )
!
      CALL BIEF_ALLVEC(1, BKBORF, 'BKBORF', IELH, 1, STATUT,MESH2D )
      CALL BIEF_ALLVEC(1, BKBORL, 'BKBORL', IELV, 1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, BKBORS, 'BKBORS', IELH, 1, STATUT,MESH2D )
!
      CALL BIEF_ALLVEC(1, BEBORF, 'BEBORF', IELH, 1, STATUT,MESH2D )
      CALL BIEF_ALLVEC(1, BEBORL, 'BEBORL', IELV, 1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, BEBORS, 'BEBORS', IELH, 1, STATUT,MESH2D )
!
      CALL BIEF_ALLVEC(2, LIKBOF, 'LIKBOF', IELH, 1, STATUT,MESH2D )
      CALL BIEF_ALLVEC(2, LIKBOL, 'LIKBOL', IELV, 2, STATUT,MESH3D )
      CALL BIEF_ALLVEC(2, LIKBOS, 'LIKBOS', IELH, 1, STATUT,MESH2D )
!
      CALL BIEF_ALLVEC(2, LIEBOF, 'LIEBOF', IELH, 1, STATUT,MESH2D )
      CALL BIEF_ALLVEC(2, LIEBOL, 'LIEBOL', IELV, 2, STATUT,MESH3D )
      CALL BIEF_ALLVEC(2, LIEBOS, 'LIEBOS', IELH, 1, STATUT,MESH2D )
!
      IF(    ITURBV.EQ.3.OR.ITURBH.EQ.3.OR.ITURBV.EQ.7.OR.ITURBH.EQ.7
     &   .OR.ITURBV.EQ.5.OR.ITURBH.EQ.5.OR.ITURBV.EQ.9.OR.ITURBH.EQ.9
     &   .OR.ITURBV.EQ.6) THEN
        IELM   = IELM3
        IELH   = IELM2H
        IELV   = IELM2V
        STATUT = 1
      ELSE
        IELM   = 0
        IELH   = 0
        IELV   = 0
        STATUT = 0
      ENDIF
!
!     AK AND EP ARE USED WHEN WE RECONSTRUCT KINETIC ENERGY AND
!     DISSIPATION WITH THE SPALART TURBULENT VISCOSITY OR GOTM
!
      CALL BIEF_ALLVEC(1, AK,       'AK    ',IELM,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, EP,       'EP    ',IELM,1, STATUT,MESH3D )
!
      IF(ITURBV.EQ.5.OR.ITURBH.EQ.5.OR.ITURBV.EQ.9.OR.ITURBH.EQ.9
     &   .OR.ITURBV.EQ.6) THEN
        IELM   = IELM3
        IELH   = IELM2H
        IELV   = IELM2V
        STATUT = 1
      ELSE
        IELM   = 0
        IELH   = 0
        IELV   = 0
        STATUT = 0
      ENDIF
!
      CALL BIEF_ALLVEC(1, NUN,      'NUN   ',IELM,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, NUC,      'NUC   ',IELM,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, NU,       'NU    ',IELM,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, S0NU,     'S0NU  ',IELM,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, S1NU,     'S1NU  ',IELM,1, STATUT,MESH3D )
!
      CALL BIEF_ALLVEC(1, NUBORF,   'NUBORF',IELH,1, STATUT,MESH2D )
      CALL BIEF_ALLVEC(1, NUBORL,   'NUBORL',IELV,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, NUBORS,   'NUBORS',IELH,1, STATUT,MESH2D )
      CALL BIEF_ALLVEC(1, NUBORSAVE,'NBSAVE',IELV,1, STATUT,MESH3D )

      CALL BIEF_ALLVEC(1, ANUBORF,  'ANUBORF',IELH,1, STATUT,MESH2D )
      CALL BIEF_ALLVEC(1, ANUBORL,  'ANUBORL',IELV,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, ANUBORS,  'ANUBORS',IELH,1, STATUT,MESH2D )

      CALL BIEF_ALLVEC(1, BNUBORF,  'BNUBORF',IELH,1, STATUT,MESH2D )
      CALL BIEF_ALLVEC(1, BNUBORL,  'BNUBORL',IELV,1, STATUT,MESH3D )
      CALL BIEF_ALLVEC(1, BNUBORS,  'BNUBORS',IELH,1, STATUT,MESH2D )
!
      CALL BIEF_ALLVEC(2, LINUBOF, 'LINUBOF', IELH, 1, STATUT,MESH2D )
      CALL BIEF_ALLVEC(2, LINUBOL, 'LINUBOL', IELV, 2, STATUT,MESH3D )
      CALL BIEF_ALLVEC(2, LINUBOS, 'LINUBOS', IELH, 1, STATUT,MESH2D )
!
!=======================================================================
!
!                     *******************
!                     * OTHER VARIABLES *
!                     *******************
!
!  VARIOUS VELOCITY COMPONENTS 3D, 2D, BOUNDARY CONDITION VALUES
!
      CALL BIEF_ALLVEC(1, U2D,        'U2D   ', IELMU,  1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, UN2D,       'UN2D  ', IELMU,  1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, FU,         'FU    ', IELMU,  1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, V2D,        'V2D   ', IELMU,  1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, VN2D,       'VN2D  ', IELMU,  1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, FV,         'FV    ', IELMU,  1, 1,MESH2D)
!     DIMENSION 2 : SEE IN LECLIM, USED IN BORD3D
      CALL BIEF_ALLVEC(1, UBOR2D,     'UBOR2D', IELM1, 2, 1,MESH2D)
      CALL BIEF_ALLVEC(1, VBOR2D,     'VBOR2D', IELM1, 2, 1,MESH2D)
!
      CALL BIEF_ALLVEC(1, FLBOR ,     'FLBOR ', IELM1, 1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, FLBLIM,     'FLBLIM', IELM1, 1, 1,MESH2D)
!
      CALL BIEF_ALLVEC(1, UCONV ,      'UCONV ', IELM3, 1, 1,MESH3D)
      CALL BIEF_ALLVEC(1, VCONV ,      'VCONV ', IELM3, 1, 1,MESH3D)
      CALL BIEF_ALLVEC(1, VCONVC,      'VCONVC', IELM3, 1, 1,MESH3D)
      CALL BIEF_ALLVEC(1, UCONVC,      'UCONVC', IELM3, 1, 1,MESH3D)
      CALL BIEF_ALLVEC(1, WSCONV,      'WSCONV', IELM3, 1, 1,MESH3D)
      CALL BIEF_ALLVEC(1, DM1   ,      'DM1   ', IELM3, 1, 1,MESH3D)
!
!-----------------------------------------------------------------------
! WATER DEPTH AND VARIABLES DERIVED FROM IT,
! PRINCIPALLY T2D DISCRETISATION OF DEPTH IELMH = IELM2H
!
      CALL BIEF_ALLVEC(1, H,      'H     ', IELMH, 1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, HN,     'HN    ', IELMH, 1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, HPROP,  'HPROP ', IELMH, 1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, NUWAVE, 'NUWAVE', 10   , 1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, HBOR,   'HBOR  ', IELM1, 1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, DH,     'DH    ', IELMH, 1, 2,MESH2D)
      CALL BIEF_ALLVEC(1, SMH,    'SMH   ', IELMH, 1, 1,MESH2D)
!
      IF(RAIN) THEN
        CALL BIEF_ALLVEC(1,PLUIE,'PLUIE ',IELMH,1,2,MESH2D)
        IF(NCSIZE.GT.1) THEN
          CALL BIEF_ALLVEC(1,PARAPLUIE,'PARAPL',IELMH,1,2,MESH2D)
        ELSE
          CALL BIEF_ALLVEC(1,PARAPLUIE,'PARAPL',0    ,1,0,MESH2D)
          DEALLOCATE(PARAPLUIE%R)
          PARAPLUIE%R=>PLUIE%R
        ENDIF
      ELSE
        CALL BIEF_ALLVEC(1,PLUIE    ,'PLUIE ',0    ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,PARAPLUIE,'PARAPL',0    ,1,0,MESH2D)
      ENDIF
!
      IF(SORG2D(35)) THEN
        CALL BIEF_ALLVEC(1,MAXZ,'MAXZ  ',IELMH,1,1 ,MESH2D)
      ELSE
        CALL BIEF_ALLVEC(1,MAXZ,'MAXZ  ',0    ,1,0 ,MESH2D)
      ENDIF
      IF(SORG2D(36)) THEN
        CALL BIEF_ALLVEC(1,TMAXZ,'TMAXZ ',IELMH,1,1 ,MESH2D)
      ELSE
        CALL BIEF_ALLVEC(1,TMAXZ,'TMAXZ ',0    ,1,0 ,MESH2D)
      ENDIF
!
!-----------------------------------------------------------------------
!
      IF(COUROU.OR.INCLUS(COUPLING,'TOMAWAC')) THEN
        CALL BIEF_ALLVEC(1,FXH,'FXH   ',IELMU,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,FYH,'FYH   ',IELMU,1,1,MESH2D)
      ELSE
        CALL BIEF_ALLVEC(1,FXH,'FXH   ',0    ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,FYH,'FYH   ',0    ,1,0,MESH2D)
      ENDIF
!
!     VARIABLES TRANSMITTED FROM TOMAWAC TO SISYPHE OR GAIA
!
      IF(INCLUS(COUPLING,'TOMAWAC')) THEN
        CALL BIEF_ALLVEC(1,DIRMOY,'DIRMOY',IELMH,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,COSDIR,'COSDIR',IELMH,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,SINDIR,'SINDIR',IELMH,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,HM0   ,'HM0   ',IELMH,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,TPR5  ,'TPR5  ',IELMH,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,ORBVEL,'ORBVEL',IELMH,1,1,MESH2D)
      ELSE
        CALL BIEF_ALLVEC(1,DIRMOY,'DIRMOY',0    ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,COSDIR,'COSDIR',0    ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,SINDIR,'SINDIR',0    ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,HM0   ,'HM0   ',0    ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,TPR5  ,'TPR5  ',0    ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,ORBVEL,'ORBVEL',0    ,1,0,MESH2D)
      ENDIF
!
!-----------------------------------------------------------------------
! NUMERICAL VARIABLES
!
      CALL BIEF_ALLVEC(1, VOLU  , 'VOLU  ', IELM3 , 1, 1,MESH3D)
      CALL BIEF_ALLVEC(1, VOLUN , 'VOLUN ', IELM3 , 1, 1,MESH3D)
      CALL BIEF_ALLVEC(1, VOLU3D, 'VOLU3D', IELM3 , 1, 1,MESH3D)
      IF(NCSIZE.GT.1) THEN
        CALL BIEF_ALLVEC(1,VOLUPAR,'VOLUPA',IELM3,1,1,MESH3D)
        CALL BIEF_ALLVEC(1,VOLUNPAR,'VLNPAR',IELM3,1,1,MESH3D)
        CALL BIEF_ALLVEC(1,VOLU3DPAR,'VLTDPA',IELM3,1,1,MESH3D)
      ELSE
        CALL BIEF_ALLVEC(1,VOLUPAR,'VOLUPA',0    ,1,0,MESH3D)
        DEALLOCATE(VOLUPAR%R)
        VOLUPAR%R=>VOLU%R
        CALL BIEF_ALLVEC(1,VOLUNPAR,'VLNPAR',0    ,1,0,MESH3D)
        DEALLOCATE(VOLUNPAR%R)
        VOLUNPAR%R=>VOLUN%R
        CALL BIEF_ALLVEC(1,VOLU3DPAR,'VLTDPA',0    ,1,0,MESH3D)
        DEALLOCATE(VOLU3DPAR%R)
        VOLU3DPAR%R=>VOLU3D%R
      ENDIF
      CALL BIEF_ALLVEC(1, VOLUT , 'VOLUT ', IELM3 , 1, 1,MESH3D)
      CALL BIEF_ALLVEC(1, VOLU2D, 'VOLU2D', IELM2H, 1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, V2DPAR, 'V2DPAR', IELM2H, 1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, UNSV2D, 'UNSV2D', IELM2H, 1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, UNSV3D, 'UNSV3D', IELM3 , 1, 1,MESH3D)
!
      CALL BIEF_ALLVEC(1, FLUINT,    'FLUINT', IELM3 , 1, 1,MESH3D)
      CALL BIEF_ALLVEC(1, FLUEXT,    'FLUEXT', IELM3 , 1, 1,MESH3D)
      IF(NCSIZE.GT.1) THEN
        CALL BIEF_ALLVEC(1,FLUEXTPAR,'FLXTPA',IELM3,1,1,MESH3D)
      ELSE
        CALL BIEF_ALLVEC(1,FLUEXTPAR,'FLXTPA',1    ,1,0,MESH3D)
        DEALLOCATE(FLUEXTPAR%R)
        FLUEXTPAR%R=>FLUEXT%R
      ENDIF
      CALL BIEF_ALLVEC(1, FLINT2,    'FLINT2', IELM2H, 1, 1,MESH2D)
!
!-----------------------------------------------------------------------
! PHYSICAL VARIABLES
!
! (COMPONENTS OF VISCOSITY AS SEPARATE VECTORS ARE REQUIRED!)
!
      CALL ALLBLO(VISCVI, 'VISCVI')
      CALL ALLBLO(VISCNU, 'VISCNU')
      CALL BIEF_ALLVEC_IN_BLOCK(VISCVI,3,1,'VISC  ',IELM3,1,2,MESH3D)
      CALL BIEF_ALLVEC_IN_BLOCK(VISCNU,3,1,'VISCN ',IELM3,1,2,MESH3D)
!
! ADDRESSING IS AWKWARD, E.G. REAL PART OF THE DIFFUSIVITY STRUCTURE
! OF THE THIRD TRACER IN THE Y-DIRECTION IS VISCTA%ADR(3)%P%ADR(2)%P%R
! DEAR ME!
!
      CALL ALLBLO(VISCTA, 'VISCTA')
      IF(NTRAC.GT.0) THEN
        CALL ALLBLO_IN_BLOCK(VISCTA, NTRAC, 'VBTA  ')
        DO ITRAC = 1,NTRAC
          CALL BIEF_ALLVEC_IN_BLOCK ( VISCTA%ADR(ITRAC)%P, 3 , 1,
     &                              'VITA  ',IELM3,1,2,MESH3D)
        ENDDO
      ENDIF
!
      CALL BIEF_ALLVEC(1, ROTAT,  'ROTAT ', IELM3,  1, 1,MESH3D)
!
      CALL BIEF_ALLVEC(1, DELTAR, 'DELTAR', IELM3,  1, 1,MESH3D)
      CALL BIEF_ALLVEC(1, RHO   , 'RHO   ', IELM3,  1, 1,MESH3D)
      IF(ITURBV.EQ.6) THEN
        CALL BIEF_ALLVEC(1, RHOPOT, 'RHOPOT', IELM3,1, 1,MESH3D)
      ELSE
        CALL BIEF_ALLVEC(1, RHOPOT, 'RHOPOT', 0,1,0,MESH3D)
      ENDIF
      CALL BIEF_ALLVEC(1, RI,     'RI    ', IELM3,  1, 1,MESH3D)
!
      CALL BIEF_ALLVEC(1, RUGOF,  'RUGOF ', IELMU , 1, 1,MESH2D)
      CALL BIEF_ALLVEC(1, RUGOL,  'RUGOL ', IELM2V, 1, 1,MESH3D)
      CALL BIEF_ALLVEC(1, CF   ,  'CF    ', IELMU , 1, 1,MESH2D)
!
!     WINDX, WINDY, PATMOS NOW ALLOCATED IN METEO_TELEMAC
!
!     CALL ALLBLO(WIND, 'WIND  ')
!     IF (VENT.OR.INCLUS(COUPLING,'WAQTEL')) THEN
!       CALL BIEF_ALLVEC_IN_BLOCK(WIND, 2, 1,'WIND  ',IELM2H,1,1,MESH2D)
!     ELSE
!       CALL BIEF_ALLVEC_IN_BLOCK(WIND, 2, 1,'WIND  ',0,1,0,MESH2D)
!     ENDIF
!
      IF( (INCLUS(COUPLING,'WAQTEL') ).AND.
     &    (13*INT(WAQPROCESS/13).EQ.WAQPROCESS) ) THEN
        CALL BIEF_ALLVEC(1, WINDSPD, 'WNDSPD', IELM2H, 1,1,MESH2D)
        CALL BIEF_ALLVEC(1, RHO4AED2, 'RHOAED', IELM3,  1,1,MESH3D)
        CALL BIEF_ALLVEC(1, TEMP4AED2, 'TEMPAE', IELM3,  1,1,MESH3D)
        CALL BIEF_ALLVEC(1, SALI4AED2, 'SALIAE', IELM3,  1,1,MESH3D)
        CALL BIEF_ALLVEC(1, THICK4AED2, 'THICKA', IELM3,  1,1,MESH3D)
        CALL BIEF_ALLVEC(2, BENTH4AED2, 'BENTHA', IELM2H,  1,1,MESH2D)
      ELSE
        CALL BIEF_ALLVEC(1, WINDSPD, 'WNDSPD', 0,1,0,MESH2D)
        CALL BIEF_ALLVEC(1, RHO4AED2, 'RHOAED', 0,1,0,MESH3D)
        CALL BIEF_ALLVEC(1, TEMP4AED2, 'TEMPAE', 0,1,0,MESH3D)
        CALL BIEF_ALLVEC(1, SALI4AED2, 'SALIAE', 0,1,0,MESH3D)
        CALL BIEF_ALLVEC(1, THICK4AED2, 'THICKA', 0,1,0,MESH3D)
        CALL BIEF_ALLVEC(2, BENTH4AED2, 'BENTHA', 0,1,0,MESH2D)
      ENDIF
!
!     IF (ATMOS) THEN
!       CALL BIEF_ALLVEC(1, PATMOS, 'PATMOS', IELM2H, 1,1,MESH2D)
!     ELSE
!       CALL BIEF_ALLVEC(1, PATMOS, 'PATMOS', 0,      1,0,MESH2D)
!     ENDIF
!
!-----------------------------------------------------------------------
!     VARIABLES USED IN MASS BALANCE
!     THEY WILL CORRESPOND TO THE NUMBERING OF ADVECTED VARIABLES
!
      CALL BIEF_ALLVEC(1, MASINI, 'MASINI', NVBIL,1, 0,MESH3D)
      CALL BIEF_ALLVEC(1, MASSE,  'MASSE ', NVBIL,1, 0,MESH3D)
      CALL BIEF_ALLVEC(1, MASSEN, 'MASSEN', NVBIL,1, 0,MESH3D)
      CALL BIEF_ALLVEC(1, FLUCUM, 'FLUCUM', NVBIL,1, 0,MESH3D)
      CALL BIEF_ALLVEC(1, FLUX,   'FLUX  ', NVBIL,1, 0,MESH3D)
      CALL BIEF_ALLVEC(1, FLUXB,  'FLUXB ', NVBIL,MAXFRO+NSCE+1,
     &                 0,MESH3D)
!
! BOTTOM AS GIVEN FROM THE GEOMETRY FILE
!
      CALL BIEF_ALLVEC(1, ZF, 'ZF    ', IELM2H, 1, 1,MESH2D)
!
! BOTTOM GEOMETRY PER 2D-ELEMENT FOR TIDAL FLATS TREATMENT
!
      IF(MSK) THEN
        CALL BIEF_ALLVEC(1, ZFE, 'ZFE   ', 10, 1, 1,MESH2D)
      ELSE
        CALL BIEF_ALLVEC(1, ZFE, 'ZFE   ',  0, 1, 0,MESH2D)
      ENDIF
!
! 3D ARRAY TO STORE DH AND HN
!
      CALL BIEF_ALLVEC(1, DHHN,  'DHHN  ', IELM3,  1, 1,MESH3D)
!
!-----------------------------------------------------------------------
! DROGUES (FLOATS ...EHM, TRACERS...)
!
      CALL BIEF_ALLVEC(1, XFLOT , 'XFLOT ',   NFLOT_MAX,1, 0,MESH3D)
      CALL BIEF_ALLVEC(1, YFLOT , 'YFLOT ',   NFLOT_MAX,1, 0,MESH3D)
      CALL BIEF_ALLVEC(1, ZFLOT , 'ZFLOT ',   NFLOT_MAX,1, 0,MESH3D)
      CALL BIEF_ALLVEC(1, SHPFLO, 'SHPFLO', 3*NFLOT_MAX,1, 0,MESH3D)
      CALL BIEF_ALLVEC(1, SHZFLO, 'SHZFLO',   NFLOT_MAX,1, 0,MESH3D)
!
      CALL BIEF_ALLVEC(2, TAGFLO, 'TAGFLO',   NFLOT_MAX,1, 0,MESH3D)
      CALL BIEF_ALLVEC(2, CLSFLO, 'CLSFLO',   NFLOT_MAX,1, 0,MESH3D)
      CALL BIEF_ALLVEC(2, ELTFLO, 'ELTFLO',   NFLOT_MAX,1, 0,MESH3D)
      CALL BIEF_ALLVEC(2, ETAFLO, 'ETAFLO',   NFLOT_MAX,1, 0,MESH3D)
!
!-----------------------------------------------------------------------
!
!     VALUES AT SOURCES OF ADVECTED VARIABLES U,V,W,AK AND EP
!     ALL ARE ALLOCATED, EVEN IF NOT USED
!
      CALL BIEF_ALLVEC(1,U_SCE ,'U_SCE ',NSCE,1,0,MESH3D)
      CALL BIEF_ALLVEC(1,V_SCE ,'V_SCE ',NSCE,1,0,MESH3D)
      CALL BIEF_ALLVEC(1,W_SCE ,'W_SCE ',NSCE,1,0,MESH3D)
      CALL BIEF_ALLVEC(1,AK_SCE,'AK_SCE',NSCE,1,0,MESH3D)
      CALL BIEF_ALLVEC(1,EP_SCE,'EP_SCE',NSCE,1,0,MESH3D)
      CALL BIEF_ALLVEC(1,NU_SCE,'NU_SCE',NSCE,1,0,MESH3D)
!
!     COPYING USCE, VSCE AND WSCE INTO U_SCE, V_SCE AND W_SCE
!     PROVISIONNALY CANCELLING AK_SCE AND EP_SCE
!
      IF(NSCE.GT.0) THEN
        DO I=1,NSCE
          U_SCE%R(I) =USCE(I)
          V_SCE%R(I) =VSCE(I)
          W_SCE%R(I) =WSCE(I)
          AK_SCE%R(I)=0.D0
          EP_SCE%R(I)=0.D0
          NU_SCE%R(I)=0.D0
        ENDDO
      ENDIF
!
!-----------------------------------------------------------------------
!
! VARIOUS TABLES, AS W1, ITRAV3 , PRIVE
! W1 ALLOCATED BY ALMESH
!
      CALL ALLBLO (PRIVE,'PRIVE ')
      CALL BIEF_ALLVEC_IN_BLOCK(PRIVE,MAX(4,NPRIV),
     &                          1,'PRIV  ',IELM3,1,2,MESH3D)
!     ALIASES
      PRIVE1=>PRIVE%ADR(1)%P
      PRIVE2=>PRIVE%ADR(2)%P
      PRIVE3=>PRIVE%ADR(3)%P
      PRIVE4=>PRIVE%ADR(4)%P
!
      CALL ALLBLO (PRIVE2D,'PRIVE2')
      CALL BIEF_ALLVEC_IN_BLOCK(PRIVE2D,MAX(4,NPRIV2D),
     &                          1,'PRI2  ',IELM2H,1,2,MESH2D)
!     ALIASES
      PRIVE2D1=>PRIVE2D%ADR(1)%P
      PRIVE2D2=>PRIVE2D%ADR(2)%P
      PRIVE2D3=>PRIVE2D%ADR(3)%P
      PRIVE2D4=>PRIVE2D%ADR(4)%P
!
! INTEGER WORK FIELDS
!
      CALL ALLBLO(ITRAV3,'ITRAV3')
      SIZ=BIEF_NBMPTS(IELM3,MESH3D)
!                                         40 OR 50
      IF(YESWEAK) SIZ=MAX(SIZ,BIEF_NBMPTS(10*(IELM3/10),MESH3D)*NGAUSS)
      CALL BIEF_ALLVEC_IN_BLOCK(ITRAV3,4,2,'ITR3V ',SIZ,1,0,MESH3D)
!
! POINTERS TO 4 INTEGER WORK FIELDS
!
      IT1 => ITRAV3%ADR(1)%P
      IT2 => ITRAV3%ADR(2)%P
      IT3 => ITRAV3%ADR(3)%P
      IT4 => ITRAV3%ADR(4)%P
!
!     BLOCKS OF ADVECTED VARIABLES AND VARIOUS BIEF_OBJ STRUCTURES
!     BUILT FOR A COLLECTIVE ADVECTION
!
      CALL ALLBLO(BL_FC ,'BL_FC ')
      CALL ADDBLO(BL_FC,UC)
      CALL ADDBLO(BL_FC,VC)
      CALL ADDBLO(BL_FC,WC)
      CALL ADDBLO(BL_FC,AKC)
      CALL ADDBLO(BL_FC,EPC)
      CALL ADDBLO(BL_FC,NUC)
!
      CALL ALLBLO(BL_FN ,'BL_FN ')
!     ADVECTION OF VELOCITIES IS DONE FOR THE NEXT TIME-STEP
      CALL ADDBLO(BL_FN,U)
      CALL ADDBLO(BL_FN,V)
      CALL ADDBLO(BL_FN,W)
      CALL ADDBLO(BL_FN,AKN)
      CALL ADDBLO(BL_FN,EPN)
      CALL ADDBLO(BL_FN,NUN)
!
      CALL ALLBLO(BL_S0F,'BL_S0F')
      CALL ADDBLO(BL_S0F,S0U)
      CALL ADDBLO(BL_S0F,S0V)
      CALL ADDBLO(BL_S0F,S0W)
      CALL ADDBLO(BL_S0F,S0AK)
      CALL ADDBLO(BL_S0F,S0EP)
      CALL ADDBLO(BL_S0F,S0NU)
!
      CALL ALLBLO(BL_FSC,'BL_FSC')
      CALL ADDBLO(BL_FSC,U_SCE)
      CALL ADDBLO(BL_FSC,V_SCE)
      CALL ADDBLO(BL_FSC,W_SCE)
      CALL ADDBLO(BL_FSC,AK_SCE)
      CALL ADDBLO(BL_FSC,EP_SCE)
      CALL ADDBLO(BL_FSC,NU_SCE)
!
      CALL ALLBLO(BL_BOL,'BL_BOL')
      CALL ADDBLO(BL_BOL,LIUBOL)
      CALL ADDBLO(BL_BOL,LIVBOL)
      CALL ADDBLO(BL_BOL,LIWBOL)
      CALL ADDBLO(BL_BOL,LIKBOL)
      CALL ADDBLO(BL_BOL,LIEBOL)
      CALL ADDBLO(BL_BOL,LINUBOL)
!
      CALL ALLBLO(BL_BORL,'BL_BOR')
      CALL ADDBLO(BL_BORL,UBORL)
      CALL ADDBLO(BL_BORL,VBORL)
      CALL ADDBLO(BL_BORL,WBORL)
      CALL ADDBLO(BL_BORL,AKBORL)
      CALL ADDBLO(BL_BORL,EBORL)
      CALL ADDBLO(BL_BORL,NUBORL)
!
      IF(NTRAC.GT.0) THEN
        DO ITRAC=1,NTRAC
          CALL ADDBLO(BL_FC ,    TAC%ADR(ITRAC)%P)
          CALL ADDBLO(BL_FN ,    TRN%ADR(ITRAC)%P)
          CALL ADDBLO(BL_S0F,   S0TA%ADR(ITRAC)%P)
          CALL ADDBLO(BL_FSC, TA_SCE%ADR(ITRAC)%P)
          CALL ADDBLO(BL_BOL, LITABL%ADR(ITRAC)%P)
          CALL ADDBLO(BL_BORL,TABORL%ADR(ITRAC)%P)
        ENDDO
      ENDIF
!
!     BLOCKS OF ADVECTED VARIABLES WITH CHARACTERISTICS
!     MODULE STREAMLINE MUST BE CHANGED TO DEAL WITH A
!     LIST IN A BLOCK AS DONE ABOVE
!
      CALL ALLBLO(FC3D, 'FC3D  ')
      CALL ALLBLO(FN3D, 'FN3D  ')
!     ADVECTION OF VELOCITIES IS DONE FOR THE NEXT STEP
!     SO HERE U AND NOT UN
      IF(SCHCVI.EQ.ADV_CAR) THEN
        CALL ADDBLO(FN3D,U )
        CALL ADDBLO(FC3D,UC)
        CALL ADDBLO(FN3D,V )
        CALL ADDBLO(FC3D,VC)
        IF(NONHYD) THEN
          CALL ADDBLO(FN3D,W )
          CALL ADDBLO(FC3D,WC)
        ENDIF
      ENDIF
      IF(SCHCKE.EQ.ADV_CAR.AND.(ITURBH.EQ.3.OR.
     &                          ITURBH.EQ.7.OR.
     &                          ITURBV.EQ.3.OR.
     &                          ITURBV.EQ.7)) THEN
        CALL ADDBLO(FN3D,AKN)
        CALL ADDBLO(FC3D,AKC)
        CALL ADDBLO(FN3D,EPN)
        CALL ADDBLO(FC3D,EPC)
!     FOR SPALART
      ELSEIF(SCHCKE.EQ.ADV_CAR.AND.(ITURBV.EQ.5.OR.
     &                              ITURBH.EQ.5.OR.
     &                              ITURBV.EQ.9.OR.
     &                              ITURBH.EQ.9)) THEN
        CALL ADDBLO(FN3D,NUN)
        CALL ADDBLO(FC3D,NUC)
      ENDIF
      IF(NTRAC.GT.0) THEN
        DO ITRAC=1,NTRAC
          IF(SCHCTA(ITRAC).EQ.ADV_CAR) THEN
            CALL ADDBLO(FN3D,TRN%ADR(ITRAC)%P)
            CALL ADDBLO(FC3D,TAC%ADR(ITRAC)%P)
          ENDIF
        ENDDO
      ENDIF
!
!=======================================================================
!
!                   *********************************
!                   * STRUCTURES FOR THE RESOLUTION *
!                   *  OF LINEAR EQUATION SYSTEMS   *
!                   *          F I R S T            *
!                   *        M A T R I C E S        *
!                   *********************************
!
! BEWARE : 2D AND ESPECIALLY 3D MATRICES OCCUPY
! ======   A LARGE CHUNK OF MEMORY
!
!-----------------------------------------------------------------------
! 3D MATRICES
!
! S.U.P.G.
!
      TYPDIA = '0'
      TYPEXT = '0'
      IF(N_ADV(ADV_SUP).GT.0) THEN
        TYPDIA = 'Q'
        TYPEXT = 'Q'
      ENDIF
      CALL BIEF_ALLMAT(MSUPG,'SUPG  ',
     &                 IELM3,IELM3,CFG,TYPDIA,TYPEXT,MESH3D)
!
! M.U.R.D.
!
      TYPDIA = '0'
      TYPEXT = '0'
      IF(N_ADV(ADV_NSC).GT.0.OR.N_ADV(ADV_PSI).GT.0) THEN
        TYPDIA = 'Q'
        TYPEXT = 'Q'
      ENDIF
      CALL BIEF_ALLMAT(MMURD,'MURD  ',
     &                 IELM3,IELM3,CFGMURD,TYPDIA,TYPEXT,MESH3D)
!
! M.U.R.D. (EDGE-BASED FOR TIDAL FLATS)
!
      TYPDIA = '0'
      TYPEXT = '0'
      IF(N_ADV(ADV_NSC_TF).GT.0) THEN
        TYPDIA = 'Q'
        TYPEXT = 'Q'
      ENDIF
      CALL BIEF_ALLMAT(MURD_TF,'MURDTF',IELM3,IELM3,CFGMURD_TF,
     &                 TYPDIA,TYPEXT,MESH3D)
!
! DIFFUSION
!
      TYPDIA = 'Q'
      TYPEXT = 'S'
      CALL BIEF_ALLMAT(MDIFF,'DIFF  ',
     &                 IELM3,IELM3,CFG,TYPDIA,TYPEXT,MESH3D)
!
! THE 3D WORK MATRICES (ALWAYS ALLOCATED AS NON SYMMETRICAL)
!                       SEE USE OF MTRA2%X IN WAVE_EQUATION
!
      TYPDIA = 'Q'
      TYPEXT = 'Q'
      CALL BIEF_ALLMAT (MTRA2, 'MTRA2 ',
     &                  IELM3, IELM3, CFG   , TYPDIA, TYPEXT,MESH3D)
      CALL BIEF_ALLMAT (MTRA1, 'MTRA1 ',
     &                  IELM3, IELM3, CFG   , TYPDIA, TYPEXT,MESH3D)
!
!-----------------------------------------------------------------------
! 3 2D MATRICES (IELM2H) - (EACH OF THEM ALLOCATED IN A
! SEPARATE BLOCK), ALL IN BLOCK MAT2D
! E.G. WORK MATRIX 3 IS: MAT2D%ADR(3)%P
! THEY ALL GET NAMED MAT2D...............
!
      CALL ALLBLO (MAT2D, 'MAT2D ')
      CALL ALLBLO_IN_BLOCK(MAT2D,3,'MAT2D ')
      DO ITAB = 1,3
        CALL BIEF_DEALLOBJ(MAT2D%ADR(ITAB)%P)
        DEALLOCATE(MAT2D%ADR(ITAB)%P)
        CALL FIRST_ALL_BIEFOBJ(MAT2D%ADR(ITAB)%P)
        CALL BIEF_ALLMAT(MAT2D%ADR(ITAB)%P, 'MAT2D ',
     &                   IELMU, IELMU, CFG2D, 'Q', 'Q',MESH2D)
        MAT2D%ADR(ITAB)%P%FATHER='MAT2D '
      END DO
!
! ANOTHER WORK MATRIX IS BUILT USING ALMESH FOR THE 2D MESH: MTRA2
!
! BOUNDARY MATRIX FOR 2D
!
      CALL BIEF_ALLMAT(MBOR2D, 'MBOR2D',
     &                 IELM1, IELM1, CFGBOR2D, 'Q','Q',MESH2D)
!
! 2D WORK MATRIX FOR IELMU.
!
      CALL BIEF_ALLMAT(MATR2H,'MATR2H',IELMU ,IELMU ,CFG,'Q','Q',MESH2D)
!
!=======================================================================
!
!                   *********************************
!                   * STRUCTURES FOR THE RESOLUTION *
!                   *  OF LINEAR EQUATION SYSTEMS   *
!                   *  S E C O N D   M E M B E R S  *
!                   *         V E C T O R S         *
!                   *********************************
!
!-----------------------------------------------------------------------
! FOR 3D PART
! COMPUTES THE NUMBER OF 3D WORK FIELDS AS A FUNCTION OF
! SOLVER AND PRECONDITIONING TYPE AND NUMBER OF VARIABLES
! CVDF3D NEEDS AT LEAST 10.
      NTR = 10
!
      IF(SLVDVI%SLV.EQ.7) NTR = MAX(NTR,2+2*SLVDVI%KRYLOV)
      IF(NTRAC.GT.0) THEN
        DO ITRAC=1,NTRAC
          IF(SLVDTA(ITRAC)%SLV.EQ.7) THEN
            NTR = MAX(NTR,2+2*SLVDTA(ITRAC)%KRYLOV)
          ENDIF
        ENDDO
      ENDIF
      IF (SLVDKE%SLV.EQ.7) NTR = MAX(NTR,2+2*SLVDKE%KRYLOV)
      IF (S3D_SLVDSE%SLV.EQ.7) NTR = MAX(NTR,2+2*S3D_SLVDSE%KRYLOV)
      IF (SLVPOI%SLV.EQ.7) NTR = MAX(NTR,2+2*SLVPOI%KRYLOV)
! NO MORE SLVPRJ
!     IF (SLVPRJ%SLV.EQ.7) NTR = MAX(NTR,2+2*SLVPRJ%KRYLOV)
!
      I = NTR
!
      IF (3*(SLVDVI%PRECON/3).EQ.SLVDVI%PRECON .OR.
     &    3*(SLVDKE%PRECON/3).EQ.SLVDKE%PRECON .OR.
     &    3*(S3D_SLVDSE%PRECON/3).EQ.S3D_SLVDSE%PRECON .OR.
     &    3*(SLVPOI%PRECON/3).EQ.SLVPOI%PRECON) NTR = I+2
!
      IF(NTRAC.GT.0) THEN
        DO ITRAC=1,NTRAC
          IF(3*(SLVDTA(ITRAC)%PRECON/3).EQ.SLVDTA(1)%PRECON) NTR = I+2
        ENDDO
      ENDIF
!
      IF (ITURBV.EQ.3.OR.ITURBH.EQ.3) NTR = MAX(NTR,12)
      IF (ITURBV.EQ.6) NTR = MAX(NTR,12)
      IF (ITURBV.EQ.7.OR.ITURBH.EQ.7) NTR = MAX(NTR,18)
!     TRAV3 WILL BE USED IN BIEF_VALIDA WITH THIS SIZE
!     SEE ALIRE3D IN TELEMAC3D.F AND VARSO3 IN POINT_TELEMAC3D.F
!     ON 04/07/2012 ADR_TRAC=29
      NTR = MAX(NTR,ADR_TRAC+NTRAC-1)
!
      CALL ALLBLO(TRAV3, 'TRAV3 ')
      CALL BIEF_ALLVEC_IN_BLOCK(TRAV3,NTR,1,'TRAV  ',IELM3,1,2,MESH3D)
!
!     ANOTHER SUCH BLOCK FOR THE LIPS SCHEME
!
      CALL ALLBLO(TB2, 'TB2   ')
      IF(YESLIPS) THEN
!       9 IS THE VALUE CORRESPONDING TO SOLVER 7=GMRES
        CALL BIEF_ALLVEC_IN_BLOCK(TB2,9,1,'TB2   ',IELM3,1,2,MESH3D)
      ELSE
        CALL BIEF_ALLVEC_IN_BLOCK(TB2,9,1,'TB2   ',    0,1,0,MESH3D)
      ENDIF
!
! POINTERS TO 3D WORK VECTORS; FIRST 10 EXIST FOR SURE
!
      T3_01 => TRAV3%ADR(01)%P
      T3_02 => TRAV3%ADR(02)%P
      T3_03 => TRAV3%ADR(03)%P
      T3_04 => TRAV3%ADR(04)%P
      T3_05 => TRAV3%ADR(05)%P
      T3_06 => TRAV3%ADR(06)%P
      T3_07 => TRAV3%ADR(07)%P
      T3_08 => TRAV3%ADR(08)%P
      T3_09 => TRAV3%ADR(09)%P
      T3_10 => TRAV3%ADR(10)%P
      T3_11 => TRAV3%ADR(11)%P
      T3_12 => TRAV3%ADR(12)%P
      T3_13 => TRAV3%ADR(13)%P
      T3_14 => TRAV3%ADR(14)%P
      T3_15 => TRAV3%ADR(15)%P
      T3_16 => TRAV3%ADR(16)%P
      T3_17 => TRAV3%ADR(17)%P
      T3_18 => TRAV3%ADR(18)%P
!
! SECOND MEMBER 3D
!
      CALL BIEF_ALLVEC(1, SEM3D, 'SEM3D ', IELM3, 1, 2,MESH3D)
!
! RIGHT HAND SIDE OF CONTINUITY EQUATIONS IF SOURCES
!
      CALL ALLBLO(SOURCES, 'SOURCE')
      I=NSCE
      IF(NCSIZE.GT.1) I=2*NSCE
      IF(NSCE.GT.0) THEN
        IF(OPTSOU.EQ.1) THEN
          CALL BIEF_ALLVEC_IN_BLOCK(SOURCES,I,1,'SCE   ',IELM3,
     &                              1,1,MESH3D)
        ELSE IF(OPTSOU.EQ.2) THEN
          I=1
          IF(NCSIZE.GT.1) I=2
          CALL BIEF_ALLVEC_IN_BLOCK(SOURCES,I,1,'SCE   ',IELM3,
     &                              1,1,MESH3D)
        ENDIF
      ELSE
        CALL BIEF_ALLVEC_IN_BLOCK(SOURCES,I,1,'SCE   ',0    ,1,0,MESH3D)
      ENDIF
!
!-----------------------------------------------------------------------
! FOR 2D PART
!
! COMPUTES THE NUMBER OF 2D WORK FIELDS AS A FUNCTION OF
! SOLVER AND PRECONDITIONING TYPE AND NUMBER OF VARIABLES
! FIRST 23 ALLOCATED FOR SURE...
!
      NTR = 23
      IF (SLVPRO%SLV.EQ.7) NTR = MAX(NTR,6+6*SLVPRO%KRYLOV)
! NO MORE SLVW
!     IF (SLVW%SLV.EQ.7)   NTR = MAX(NTR,2+2*SLVW%KRYLOV)
!     IF (3*(SLVPRO%PRECON/3) .EQ. SLVPRO%PRECON .OR.
!    &    3*(SLVW%PRECON/3)   .EQ. SLVW%PRECON ) NTR = NTR + 6
      IF (3*(SLVPRO%PRECON/3) .EQ. SLVPRO%PRECON) NTR = NTR + 6
!
!     SEE VARSOR BELOW
      NTR=MAX(NTR,ADR_TRAV2+2*NTRAC)
!
      CALL ALLBLO(TRAV2, 'TRAV2 ')
      CALL BIEF_ALLVEC_IN_BLOCK(TRAV2,NTR,1,'TR2D  ',IELMU,1,2,MESH2D)
!
! POINTERS TO FIRST 10 2D WORK VECTORS (21 EXIST FOR SURE)
!
      T2_01 => TRAV2%ADR( 1)%P
      T2_02 => TRAV2%ADR( 2)%P
      T2_03 => TRAV2%ADR( 3)%P
      T2_04 => TRAV2%ADR( 4)%P
      T2_05 => TRAV2%ADR( 5)%P
      T2_06 => TRAV2%ADR( 6)%P
      T2_07 => TRAV2%ADR( 7)%P
      T2_08 => TRAV2%ADR( 8)%P
      T2_09 => TRAV2%ADR( 9)%P
      T2_10 => TRAV2%ADR(10)%P
      T2_11 => TRAV2%ADR(11)%P
      T2_12 => TRAV2%ADR(12)%P
      T2_13 => TRAV2%ADR(13)%P
      T2_14 => TRAV2%ADR(14)%P
      T2_15 => TRAV2%ADR(15)%P
      T2_16 => TRAV2%ADR(16)%P
      T2_17 => TRAV2%ADR(17)%P
      T2_18 => TRAV2%ADR(18)%P
      T2_19 => TRAV2%ADR(19)%P
      T2_20 => TRAV2%ADR(20)%P
      T2_21 => TRAV2%ADR(21)%P
      T2_22 => TRAV2%ADR(22)%P
      T2_23 => TRAV2%ADR(23)%P
!
!     SECOND MEMBERS BLOCK - 3 NEEDED
!
      CALL ALLBLO(SEM2D,'SEM2D ')
      CALL BIEF_ALLVEC_IN_BLOCK(SEM2D,3,1,'SEM2D ',IELMU,1,2,MESH2D)
!
!     WORK FIELDS WITH A DIMENSION OF THE MAX. 2D ELEMENT NUMBER
!     IELM = 10
!
      CALL BIEF_ALLVEC(1,   TE1, 'TE1   ', 10, 1, 1,MESH2D)
      CALL BIEF_ALLVEC(1,   TE2, 'TE2   ', 10, 1, 1,MESH2D)
      CALL BIEF_ALLVEC(1,   TE3, 'TE3   ', 10, 1, 1,MESH2D)
!
!     PIECE-WISE LINEAR FREE SURFACE
!
      CALL BIEF_ALLVEC(1,ZFLATS, 'ZFLATS', 15, 1, 1,MESH2D)
      CALL BIEF_ALLVEC(1,ZCONV , 'ZCONV ', 15, 1, 1,MESH2D)
!
!     TWO COMPONENTS OF ZCONV HORIZONTAL GRADIENT
!
      CALL BIEF_ALLVEC(1,GRAZCO, 'GRAZCO', 10, 2, 1,MESH2D)
!
! DELWAQ FLOWS BETWEEN POINTS
!
      CALL BIEF_ALLVEC(1,FLODEL,'FLODEL',
     &                 NSEG*NPLAN+NETAGE*NPOIN2, 1, 0,MESH3D)
!     FULL SIZE OF FLOPAR PROBABLY NOT USEFUL IF NOT PARALLEL MODE
      CALL BIEF_ALLVEC(1,FLOPAR,'FLOPAR',
     &                 NSEG*NPLAN+NETAGE*NPOIN2, 1, 0,MESH3D)
! LIMITATION OF 2D SEGMENT FLUXES
      CALL BIEF_ALLVEC(1,FLULIM,'FLULIM',NSEG,1,0,MESH3D)
!
!-----------------------------------------------------------------------
! ALLOCATES VOID STRUCTURE
!
      CALL BIEF_ALLVEC(1, SVIDE, 'SVIDE ', 0, 1, 1,MESH3D)
!
!=======================================================================
! SEDIMENT
!  IF CONSOLIDATION IS MODELLED USING THE MULTI-LAYER MODEL,
!  THE MAXIMUM NUMBER OF PLANES DISCRETISING THE BED: S3D_NPFMAX
!  EQUALS (S3D_NCOUCH+1) :
!
! ALSO ALLOCATE 1DV BLOCK (NPLANx11) FOR SET_DIF WORK ARRAYS
!     allocate trav1 for all cases (it might be used by gaia)
      CALL ALLBLO (TRAV1,'TRAV1 ')
      CALL BIEF_ALLVEC_IN_BLOCK(TRAV1,11,1,'TRAV1 ',NPLAN,1,0,MESH3D)
      IF(S3D_SEDI) THEN
        CALL BIEF_ALLVEC(1, S3D_WCHU,      'S3D_WCHU', IELM3, 1,1,
     &                  MESH3D)
      ELSE
        CALL BIEF_ALLVEC(1, S3D_WCHU,      'S3D_WCHU', 0    , 1,0,
     &                   MESH3D)
      ENDIF
!
! use ncouch + 1 directly
      IF(S3D_TASSE.AND. S3D_SEDI) S3D_NPFMAX= S3D_NCOUCH+ 1
!
!   CV   IF((S3D_GIBSON.OR.S3D_TASSE).AND.S3D_SEDI) THEN
!      IF(S3D_NCOUCH.GT.1) THEN
!        CALL BIEF_ALLVEC(1,S3D_EPAI,'EPAI  ',S3D_NCOUCH*NPOIN2,1,0,MESH3D)
!      ELSE
!        CALL BIEF_ALLVEC(1,S3D_EPAI,'EPAI  ',0,                1,0,MESH3D)
!      ENDIF
!
      IF(S3D_TASSE.AND.S3D_SEDI) THEN
        CALL BIEF_ALLVEC(1, S3D_IVIDE, 'IVIDE ', S3D_NPFMAX*NPOIN2,
     &                   1,0,MESH3D)
      ELSE
        CALL BIEF_ALLVEC(1, S3D_IVIDE, 'IVIDE ', 0,1,0,MESH3D)
      ENDIF
!
      IF(S3D_TASSE.AND.S3D_SEDI) THEN
        CALL BIEF_ALLVEC(1, S3D_TEMP, 'TEMP  ', S3D_NCOUCH*NPOIN2,
     &                   1,0,MESH3D)
      ELSE
        CALL BIEF_ALLVEC(1, S3D_TEMP, 'TEMP  ', 0,1,0,MESH3D)
      ENDIF
!
      IF(S3D_SEDI) THEN
        CALL BIEF_ALLVEC(1, S3D_DMOY,  'DMOY  ', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, S3D_CREF,  'CREF  ', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, ZREF,  'ZREF  ', IELMU, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, S3D_HDEP,  'HDEP  ', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, S3D_FLUER, 'FLUER ', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, S3D_PDEPO, 'PDEPO ', IELM2H, 1, 1,MESH2D)
! CV ...
        CALL BIEF_ALLVEC(1, S3D_FLUDP, 'FLUDP ', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, S3D_FLUDPT,'FLUDPT', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, S3D_ZF_S,  'ZF_S  ', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, S3D_ESOMT, 'ESOMT ', IELM2H, 1, 1,MESH2D)
!
!
! Pour modele multi multicouche
! ?
!      IF(S3D_NCOUCH. GT.1) THEN
!         CALL BIEF_ALLVEC(1, S3D_CONC, 'CONC  ', S3D_NCOUCH, 1, 0,MESH2D)
!         CALL BIEF_ALLVEC(1, S3D_TOCE, 'TOCE  ', S3D_NCOUCH, 1, 0,MESH2D)
!      ELSE
!        CALL BIEF_ALLVEC(1, S3D_CONC, 'CONC  ',      0, 1, 0,MESH2D)
!        CALL BIEF_ALLVEC(1, S3D_TOCE, 'TOCE  ',      0, 1, 0,MESH2D)
!      ENDIF
! 7.0 Big change
!
        ALLOCATE(S3D_CONC(NPOIN2,S3D_NCOUCH))
        ALLOCATE(S3D_EPAI(NPOIN2,S3D_NCOUCH))  ! MUD BED LAYER THICKNESS
        ALLOCATE(S3D_TOCE(NPOIN2,S3D_NCOUCH))  ! CONCENTRATION OF MUD BED LAYER
!
        CALL ALLBLO(S3D_LAYTOCE, 'LAYTOCE') ! LAYER BED SHEAR STRESS
        CALL BIEF_ALLVEC_IN_BLOCK(S3D_LAYTOCE,S3D_NCOUCH,1,'LAYTOCE',
     &                            0,1,0,MESH2D)
        DO K=1,S3D_NCOUCH
          S3D_LAYTOCE%ADR(K)%P%R=>S3D_TOCE(1:NPOIN2,K)
          S3D_LAYTOCE%ADR(K)%P%MAXDIM1=NPOIN2
          S3D_LAYTOCE%ADR(K)%P%DIM1=NPOIN2
        ENDDO
!
        CALL ALLBLO(S3D_LAYTHI, 'LAYTHI') ! LAYER BED THICKNESS
        CALL BIEF_ALLVEC_IN_BLOCK(S3D_LAYTHI,S3D_NCOUCH,1,'LAYTHI',
     &                            0,1,0,MESH2D)
        DO K=1,S3D_NCOUCH
          S3D_LAYTHI%ADR(K)%P%R=>S3D_EPAI(1:NPOIN2,K)
          S3D_LAYTHI%ADR(K)%P%MAXDIM1=NPOIN2
          S3D_LAYTHI%ADR(K)%P%DIM1=NPOIN2
        ENDDO
!...CV
        CALL BIEF_ALLVEC(1, ZR,    'ZR    ', IELM2H, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(2, NPF,   'NPF   ', IELM2H, 1, 1,MESH2D)
      ELSE
        CALL BIEF_ALLVEC(1, S3D_DMOY,  'DMOY  ',      0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, S3D_CREF,  'CREF  ',      0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, ZREF,  'ZREF  ',      0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, S3D_HDEP,  'HDEP  ',      0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, S3D_FLUER, 'FLUER ',      0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, S3D_PDEPO, 'PDEPO ',      0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, ZR,    'ZR    ',      0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(2, NPF,   'NPF   ',      0, 1, 0,MESH2D)
      ENDIF
!
!     NEW VARIABLES FOR MIXED SEDIMENT
!
      IF(S3D_MIXTE) THEN
        CALL BIEF_ALLVEC(1,S3D_EPAICO,'EPAICO',IELM2H,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_EPAINCO,'EPANCO',IELM2H,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_PVSCO,'PVSCO ',IELM2H,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_PVSNCO,'PVSNCO',IELM2H,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_FLUERC,'FLUERC',IELM2H,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_FLUERNC,'FLUENC',IELM2H,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_FLUDPTC,'FLUDTC',IELM2H,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_FLUDPTNC,'FLUTNC',IELM2H,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_FLUDPC,'FLUDPC',IELM2H,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_FLUDPNC,'FLUPNC',IELM2H,1,1,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_WCS ,'WCS   ',IELM3 ,1,1,MESH3D)
      ELSE
        CALL BIEF_ALLVEC(1,S3D_EPAICO,'EPAICO',0     ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_EPAINCO,'EPANCO',0     ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_PVSCO,'PVSCO ',0     ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_PVSNCO,'PVSNCO',0     ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_FLUERC,'FLUERC',0     ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_FLUERNC,'FLUENC',0     ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_FLUDPTC,'FLUDTC',0     ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_FLUDPTNC,'FLUTNC',0     ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_FLUDPC,'FLUDPC',0     ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_FLUDPNC,'FLUPNC',0     ,1,0,MESH2D)
        CALL BIEF_ALLVEC(1,S3D_WCS ,'WCS   ',0     ,1,0,MESH3D)
      ENDIF
!

      IF(.NOT.INCLUS(COUPLING,'GAIA  ')) THEN
        CALL ALLBLO(FLUDP, 'FLUDP ')
        CALL ALLBLO(FLUDPT,'FLUDPT')
        CALL ALLBLO(FLUER, 'FLUER ')
!
        CALL BIEF_ALLVEC_IN_BLOCK(FLUDP,1,1,'FLUDP ',0,1,2,MESH2D)
        CALL BIEF_ALLVEC_IN_BLOCK(FLUDPT,1,1,'FLUDPT',0,1,2,MESH2D)
        CALL BIEF_ALLVEC_IN_BLOCK(FLUER,1,1,'FLUER ',0,1,2,MESH2D)
!
        ALLOCATE(NUM_ISUSP_ICLA(1))
      ENDIF
!-----------------------------------------------------------------------
!
!  ARRAYS USED FOR TUBES/BRIDGES
!
      IF(NBUSE.GT.0) THEN
        CALL BIEF_ALLVEC(1,ALTBUS ,'ALTBUS ',NBUSE,2,0,MESH3D)
        CALL BIEF_ALLVEC(1,CSBUS  ,'CSBUS  ',NBUSE,2,0,MESH3D)
        CALL BIEF_ALLVEC(1,CEBUS  ,'CEBUS  ',NBUSE,2,0,MESH3D)
        CALL BIEF_ALLVEC(1,ANGBUS ,'ANGBUS ',NBUSE,2,0,MESH3D)
        CALL BIEF_ALLVEC(1,LBUS   ,'LBUS   ',NBUSE,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,DBUS   ,'DBUS   ',NBUSE,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,LRGBUS ,'LRGBUS ',NBUSE,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,HAUBUS ,'HAUBUS ',NBUSE,2,0,MESH3D)
        CALL BIEF_ALLVEC(1,SECBUS ,'SECBUS ',NBUSE,1,0,MESH3D)
        CALL BIEF_ALLVEC(2,CLPBUS ,'CLPBUS ',NBUSE,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,CV     ,'CV     ',NBUSE,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,C56    ,'C56    ',NBUSE,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,CV5    ,'CV5    ',NBUSE,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,C5     ,'C5     ',NBUSE,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,CTRASH ,'CTRASH ',NBUSE,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,FRICBUS,'FRICBUS',NBUSE,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,LONGBUS,'LONGBUS',NBUSE,1,0,MESH3D)
        CALL BIEF_ALLVEC(2,CIRC   ,'CIRC   ',NBUSE,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,DELBUS ,'DELBUS ',NBUSE,2,0,MESH3D)
        CALL BIEF_ALLVEC(2,AABUS  ,'AABUS  ',NBUSE,1,0,MESH3D)
        DO I=1, NBUSE
          DBUS%R(I)=0.D0
          SECBUS%R(I)=1.D0
        ENDDO
        CALL ALLBLO(TBUS ,'TBUS  ')
        IF(NTRAC.GT.0) THEN
          CALL BIEF_ALLVEC_IN_BLOCK(TBUS,NTRAC,1,'TBUS  ',
     &                              NBUSE,2,0,MESH3D)
        ELSE
          CALL BIEF_ALLVEC_IN_BLOCK(TBUS,1    ,1,'TBUS  ',
     &                              NBUSE,2,0,MESH3D)
        ENDIF
      ELSE
        CALL BIEF_ALLVEC(1,ALTBUS ,'ALTBUS ',0,2,0,MESH3D)
        CALL BIEF_ALLVEC(1,CSBUS  ,'CSBUS  ',0,2,0,MESH3D)
        CALL BIEF_ALLVEC(1,CEBUS  ,'CEBUS  ',0,2,0,MESH3D)
        CALL BIEF_ALLVEC(1,ANGBUS ,'ANGBUS ',0,2,0,MESH3D)
        CALL BIEF_ALLVEC(1,LBUS   ,'LBUS   ',0,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,DBUS   ,'DBUS   ',0,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,LRGBUS ,'LRGBUS ',0,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,HAUBUS ,'HAUBUS ',0,2,0,MESH3D)
        CALL BIEF_ALLVEC(1,SECBUS ,'SECBUS ',0,1,0,MESH3D)
        CALL BIEF_ALLVEC(2,CLPBUS ,'CLPBUS ',0,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,CV     ,'CV     ',0,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,C56    ,'C56    ',0,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,CV5    ,'CV5    ',0,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,C5     ,'C5     ',0,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,CTRASH ,'CTRASH ',0,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,FRICBUS,'FRICBUS',0,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,LONGBUS,'LONGBUS',0,1,0,MESH3D)
        CALL BIEF_ALLVEC(2,CIRC   ,'CIRC   ',0,1,0,MESH3D)
        CALL BIEF_ALLVEC(1,DELBUS ,'DELBUS ',0,2,0,MESH3D)
        CALL BIEF_ALLVEC(2,AABUS  ,'AABUS  ',0,1,0,MESH3D)
        CALL ALLBLO(TBUS ,'TBUS  ')
        IF(NTRAC.GT.0) THEN
          CALL BIEF_ALLVEC_IN_BLOCK(TBUS,NTRAC,1,'TBUS  ',
     &                              0,2,0,MESH3D)
        ELSE
          CALL BIEF_ALLVEC_IN_BLOCK(TBUS,1    ,1,'TBUS  ',
     &                              0,2,0,MESH3D)
        ENDIF
      ENDIF
!
!-----------------------------------------------------------------------
! VARSOR BLOCK FOR 2D OUTPUT COMPATIBILITY
!
      CALL ALLBLO(VARSOR ,'VARSOR')
!
      CALL ADDBLO(VARSOR,U2D)             ! U  01 VELOCITY ALONG X
      CALL ADDBLO(VARSOR,V2D)             ! V  02 VELOCITY ALONG Y
      CALL ADDBLO(VARSOR,T2_10)           ! C  03 WAVE CELERITY
      CALL ADDBLO(VARSOR,H)               ! H  04 DEPTH
      CALL ADDBLO(VARSOR,T2_01)           ! S  05 FREE SURFACE
      CALL ADDBLO(VARSOR,ZF)              ! B  06 BOTTOM
      CALL ADDBLO(VARSOR,T2_02)           ! F  07 FROUDE NUMBER
      CALL ADDBLO(VARSOR,T2_03)           ! Q  08 Q SCALAR FLOW RATE
      CALL ADDBLO(VARSOR,SVIDE)           ! T  09 NOT IMPLEMENTED
      CALL ADDBLO(VARSOR,SVIDE)           ! D  10 NOT IMPLEMENTED
      CALL ADDBLO(VARSOR,SVIDE)           ! E  11 NOT IMPLEMENTED
      CALL ADDBLO(VARSOR,SVIDE)           ! K  12 NOT IMPLEMENTED
      CALL ADDBLO(VARSOR,T2_04)           ! I  13 HU
      CALL ADDBLO(VARSOR,T2_05)           ! J  14 HV
      CALL ADDBLO(VARSOR,T2_06)           ! M  15 SQRT(U**2+V**2)
      CALL ADDBLO(VARSOR,WINDX)           ! X  16 WIND COMPONENT X DIRECT
      CALL ADDBLO(VARSOR,WINDY)           ! Y  17 WIND COMPONENT Y DIRECT
      CALL ADDBLO(VARSOR,PATMOS)          ! P  18 ATMOSPHERIC PRESSURE
      CALL ADDBLO(VARSOR,RUGOF)           ! W  19 FRICTION COEFFICIENT
      CALL ADDBLO(VARSOR,SVIDE)         !!! A  20
      CALL ADDBLO(VARSOR,SVIDE)         !!! G  21
      CALL ADDBLO(VARSOR,SVIDE)         !!! L  22
      CALL ADDBLO(VARSOR,ZR)              ! RB 23 RIGID BED
      CALL ADDBLO(VARSOR,S3D_HDEP)        ! HD 24 BED THICKNESS
      CALL ADDBLO(VARSOR,S3D_FLUER)       ! EF 25 EROSION FLUX
      CALL ADDBLO(VARSOR,S3D_FLUDP)       ! DF 26 DEPOSITION FLUX
      CALL ADDBLO(VARSOR,PRIVE2D%ADR(1)%P)!    27 MNEMO PRIVE1
      CALL ADDBLO(VARSOR,PRIVE2D%ADR(2)%P)!    28 MNEMO PRIVE2
      CALL ADDBLO(VARSOR,PRIVE2D%ADR(3)%P)!    29 MNEMO PRIVE3
      CALL ADDBLO(VARSOR,PRIVE2D%ADR(4)%P)!    30 MNEMO PRIVE4
      CALL ADDBLO(VARSOR,T2_07)           ! US 31 FRICTION VELOCITY
      CALL ADDBLO(VARSOR,T2_11)           ! QS 32 SOLID DISCHARGE
      CALL ADDBLO(VARSOR,T2_12)           ! QS 33 SOLID DISCHARGE ALONG X
      CALL ADDBLO(VARSOR,T2_13)           ! QS 34 SOLID DISCHARGE ALONG Y
      CALL ADDBLO(VARSOR,MAXZ)            ! MAXZ 35 HIGH WATER MARK
      CALL ADDBLO(VARSOR,TMAXZ)           ! TMAXZ 36 HIGH WATER TIME
      CALL ADDBLO(VARSOR,S3D_ESOMT)       ! S3D_ESOMT37 BED EVOLUTION DUE TO DUSPENSION
      CALL ADDBLO(VARSOR,TAIR)            ! TAIR 38 AIR TEMPERATURE
      CALL ADDBLO(VARSOR,T2_14)           ! USURF 39 VELOCITY ALONG X AT THE FREE SURFACE
      CALL ADDBLO(VARSOR,T2_15)           ! VSURF 40 VELOCITY ALONG Y AT THE FREE SURFACE
      CALL ADDBLO(VARSOR,T2_16)           ! WSURF 41 VELOCITY ALONG Z AT THE FREE SURFACE
      CALL ADDBLO(VARSOR,T2_17)           ! MSURF 42 VELOCITY MAGNITUDE AT THE FREE SURFACE

      IF(NVAR_HYD.NE.VARSOR%N) THEN
        WRITE(LU,*) 'MESSAGE TO DEVELOPPERS:'
        WRITE(LU,*) 'NVAR_HYD DIFFERENT THAN VARSOR SIZE ',VARSOR%N
        WRITE(LU,*) 'IN POINT_TELEMAC3D'
        CALL PLANTE(1)
        STOP
      ENDIF
!
!     VARIABLES ADR_TRAC_2D TO ADR_TRAC_2D+NTRAC-1
!
      IF(NTRAC.GT.0) THEN
        DO I=1,NTRAC
!         SIZE OF TRAV2 MUST BE GREATER THAN ADR_TRAV2+2*NTRAC
          CALL ADDBLO(VARSOR,TRAV2%ADR(ADR_TRAV2+I)%P)
        ENDDO
        DO I=1,NTRAC
          CALL ADDBLO(VARSOR,TRAV2%ADR(ADR_TRAV2+NTRAC+I)%P)
        ENDDO
      ENDIF
!
!     S3D_LAYTHI: FROM ADR_TRAC_2D+NTRAC TO ADR_TRAC_2D+2*NTRAC+S3D_NCOUCH
!
      IF(S3D_NCOUCH.GT.0.AND.S3D_SEDI) THEN
        DO I=1,S3D_NCOUCH
          CALL ADDBLO(VARSOR,S3D_LAYTHI%ADR(I)%P)
        ENDDO
      ENDIF
!
      CALL ADDBLO(VARSOR,S3D_PVSCO)       ! ADR_TRAC_2D+2*NTRAC+S3D_NCOUCH
      CALL ADDBLO(VARSOR,S3D_PVSNCO)      ! ADR_TRAC_2D+1+2*NTRAC+S3D_NCOUCH
!
!
! QUASI - OTHER VARIABLES, AN EMPTY BLOCK
!
      CALL ALLBLO(VARCL,'VARCL ')
!
!-----------------------------------------------------------------------
! VARSOR BLOCK FOR 3D OUTPUT
!
      CALL ALLBLO(VARSO3 ,'VARSO3')
! 1
      CALL ADDBLO(VARSO3,Z3)
! 2
      CALL ADDBLO(VARSO3,U)
! 3
      CALL ADDBLO(VARSO3,V)
! 4
      CALL ADDBLO(VARSO3,W)
! 5
      CALL ADDBLO(VARSO3,VISCVI%ADR(1)%P)
! 6
      CALL ADDBLO(VARSO3,VISCVI%ADR(2)%P)
! 7
      CALL ADDBLO(VARSO3,VISCVI%ADR(3)%P)
! 8
      CALL ADDBLO(VARSO3,AK)
! 9
      CALL ADDBLO(VARSO3,EP)
! 10
      CALL ADDBLO(VARSO3,RI)
! 11
      CALL ADDBLO(VARSO3,DELTAR)
! 12 : DYNAMIC PRESSURE
      CALL ADDBLO(VARSO3,DP)
! 13 : HYDROSTATIC PRESSURE
      CALL ADDBLO(VARSO3,PH)
! 14 : ADVECTION FIELD U
      CALL ADDBLO(VARSO3,UCONV)
! 15 : ADVECTION FIELD V
      CALL ADDBLO(VARSO3,VCONV)
! 16 : ADVECTION FIELD V
      CALL ADDBLO(VARSO3,WCONV)
! 17 : NOT USED !!!!!!!!!!!!!
      CALL ADDBLO(VARSO3,VOLUN)
! 18 : DM1
      CALL ADDBLO(VARSO3,DM1)
! 19 : DH AND HN
      CALL ADDBLO(VARSO3,DHHN)
! 20 : UCONVC
      CALL ADDBLO(VARSO3,UCONVC)
! 21 : VCONVC
      CALL ADDBLO(VARSO3,VCONVC)
! 22 : UD
      CALL ADDBLO(VARSO3,UD)
! 23 : VD
      CALL ADDBLO(VARSO3,VD)
! 24 : WD
      CALL ADDBLO(VARSO3,WD)
! 25 : PRIVE 1
      CALL ADDBLO(VARSO3,PRIVE%ADR(1)%P)
! 26 : PRIVE 2
      CALL ADDBLO(VARSO3,PRIVE%ADR(2)%P)
! 27 : PRIVE 3
      CALL ADDBLO(VARSO3,PRIVE%ADR(3)%P)
! 28 : PRIVE 4
      CALL ADDBLO(VARSO3,PRIVE%ADR(4)%P)
! 29 : US
      CALL ADDBLO(VARSO3,USTOKES)
! 30 : VS
      CALL ADDBLO(VARSO3,VSTOKES)
! 31 : WS
      CALL ADDBLO(VARSO3,WSTOKES)
!

!     THE FOLLOWING ADDRESS FOR TRACERS IS ADR_TRAC = 32
!     THIS NUMBER IS HARDCODED IN DECLARATIONS_TELEMAC3D
!
      IF(NVAR_T3D.NE.VARSO3%N) THEN
        WRITE(LU,*) 'MESSAGE TO DEVELOPPERS:'
        WRITE(LU,*) 'NVAR_T3D DIFFERENT THAN VARSO3 SIZE ',VARSO3%N
        WRITE(LU,*) 'IN POINT_TELEMAC3D'
        CALL PLANTE(1)
        STOP
      ENDIF
!
! VARIABLES NUMBER "ADR_TRAC" TO "ADR_TRAC" + NTRAC - 1
!
      IF(NTRAC.GT.0) THEN
        DO I=1,NTRAC
          CALL ADDBLO(VARSO3,TA%ADR(I)%P)
        ENDDO
      ENDIF
!
! VARIABLES NUMBER "ADR_TRAC" + NTRAC TO "ADR_TRAC" + 4*NTRAC - 1
!
      IF(NTRAC.GT.0) THEN
        DO I=1,NTRAC
          CALL ADDBLO(VARSO3,VISCTA%ADR(I)%P%ADR(1)%P)
          CALL ADDBLO(VARSO3,VISCTA%ADR(I)%P%ADR(2)%P)
          CALL ADDBLO(VARSO3,VISCTA%ADR(I)%P%ADR(3)%P)
        ENDDO
      ENDIF
!
      IF(INCLUS(COUPLING,'TOMAWACT3D')) THEN
        CALL BIEF_ALLVEC(1, WIP,     'WIP   ', IELMU, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, WIPDX,   'WIPDX ', IELMU, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, WIPDY,   'WIPDY ', IELMU, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, USTOKES, 'USTOKE', IELM3, 1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, VSTOKES, 'VSTOKE', IELM3, 1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, WSTOKES, 'WSTOKE', IELM3, 1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, WST1,    'WST1  ', IELMU, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, WST2,    'WST2  ', IELM3, 1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, US2D,    'US2D  ', IELMU, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, VS2D,    'VS2D  ', IELMU, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, DUS2D,   'DUS2D ', IELMH, 1, 2,MESH2D)
        CALL BIEF_ALLVEC(1, DVS2D,   'DVS2D ', IELMH, 1, 2,MESH2D)
        CALL BIEF_ALLVEC(1, DUS2DX,  'DUS2DX', IELMH, 1, 2,MESH2D)
        CALL BIEF_ALLVEC(1, DVS2DY,  'DVS2DY', IELMH, 1, 2,MESH2D)
        CALL BIEF_ALLVEC(1, USTX,    'USTX  ', IELM3, 1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, VSTY,    'VSTY  ', IELM3, 1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, FDX,     'FDX   ', IELMU, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, FDY,     'FDY   ', IELMU, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, FBX,     'FBX   ', IELMU, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, FBY,     'FBY   ', IELMU, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, CFWC,    'CFWC  ', IELMU, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, FDK,     'FDK   ', IELM3, 1, 1,MESH3D)
        CALL BIEF_ALLVEC(1, FWX,     'FWX   ', IELMU, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, FWY,     'FWY   ', IELMU, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, HBORCLI, 'HBORCL', IELM1, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, UBORCLI, 'UBORCL', IELM1, 1, 1,MESH2D)
        CALL BIEF_ALLVEC(1, VBORCLI, 'VBORCL', IELM1, 1, 1,MESH2D)
      ELSE
        CALL BIEF_ALLVEC(1, WIP,     'WIP   ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, WIPDX,   'WIPDX ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, WIPDY,   'WIPDY ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, USTOKES, 'USTOKE', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, VSTOKES, 'VSTOKE', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, WSTOKES, 'WSTOKE', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, WST1,    'WST1  ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, WST2,    'WST2  ', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, US2D,    'US2D  ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, VS2D,    'VS2D  ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, DUS2D,   'DUS2D ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, DVS2D,   'DVS2D ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, DUS2DX,  'DUS2DX', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, DVS2DY,  'DVS2DY', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, USTX,    'USTX  ', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, VSTY,    'VSTY  ', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, FDX,     'FDX   ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, FDY,     'FDY   ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, FBX,     'FBX   ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, FBY,     'FBY   ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, CFWC,    'CFWC  ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, FDK,     'FDK   ', 0, 1, 0,MESH3D)
        CALL BIEF_ALLVEC(1, FWX,     'FWX   ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, FWY,     'FWY   ', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, HBORCLI, 'HBORCL', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, UBORCLI, 'UBORCL', 0, 1, 0,MESH2D)
        CALL BIEF_ALLVEC(1, VBORCLI, 'VBORCL', 0, 1, 0,MESH2D)
      ENDIF
!
! NEW TELEMAC TO TOMAWAC COUPLING
!                                                       WAC2
      NVARTOM2TEL = 0
      NVARTEL2TOM = 0
      IF(INCLUS(COUPLING,'TOMAWAC2').OR.
     &    INCLUS(COUPLING,'TOMAWACT3D2')) THEN
        ! SENDING VARIABLES TO TOMAWAC
        CALL ALLBLO(TEL2TOM ,'TEL2TO')
        CALL ADDBLO(TEL2TOM,U2D)
        CALL ADDBLO(TEL2TOM,V2D)
        CALL ADDBLO(TEL2TOM,H)
        NVARTEL2TOM = 3
        ! RECEIVING VARIABLES FROM TOMAWAC
        CALL ALLBLO(TOM2TEL ,'TOM2TE')
        NVARTOM2TEL = 0
        IF (INCLUS(COUPLING,'SISYPHE').OR.INCLUS(COUPLING,'GAIA')) THEN
          CALL ADDBLO(TOM2TEL,COSDIR)
          CALL ADDBLO(TOM2TEL,SINDIR)
          CALL ADDBLO(TOM2TEL,HM0)
          CALL ADDBLO(TOM2TEL,TPR5)
          CALL ADDBLO(TOM2TEL,ORBVEL)
          NVARTOM2TEL = NVARTOM2TEL + 5
        ENDIF
        IF(COUROU) THEN
          CALL ADDBLO(TOM2TEL,FXH)
          CALL ADDBLO(TOM2TEL,FYH)
          NVARTOM2TEL = NVARTOM2TEL + 2
        ENDIF
        ! WIND CHECK IS THIS IS POSSIBLE
        IF (VENT) THEN
          CALL ADDBLO(TOM2TEL,WINDX)
          CALL ADDBLO(TOM2TEL,WINDY)
          NVARTOM2TEL = NVARTOM2TEL + 2
        ENDIF
      ENDIF
      !SPECIAL TREATMENT OF 3D COUPlING VARIABLES
      IF(INCLUS(COUPLING,'TOMAWACT3D2')) THEN
        NVARTOM2TEL = NVARTOM2TEL + 11
        CALL ADDBLO(TOM2TEL,WIPDX)
        CALL ADDBLO(TOM2TEL,WIPDY)
        CALL ADDBLO(TOM2TEL,WIP)
        CALL ADDBLO(TOM2TEL,WST1)
        CALL ADDBLO(TOM2TEL,FDX)
        CALL ADDBLO(TOM2TEL,FDY)
        CALL ADDBLO(TOM2TEL,FBX)
        CALL ADDBLO(TOM2TEL,FBY)
        CALL ADDBLO(TOM2TEL,CFWC)
        CALL ADDBLO(TOM2TEL,FWX)
        CALL ADDBLO(TOM2TEL,FWY)
        !ADD EACH HORIZONTAL LAYER AS A SEPARATE VARIABLE
        !(ACTUALLY A BLOCK IN A BIEF OBJECT).
        !note maxblo = 256
        ! this means that nplan max = 81
        CALL ALLBLO(ZPERPLAN, 'ZPERPL')
        CALL ALLBLO_IN_BLOCK(ZPERPLAN,NPLAN,'ZPERPL')
        CALL ALLBLO(USTOPLAN, 'USTOPL')
        CALL ALLBLO_IN_BLOCK(USTOPLAN,NPLAN,'USTOPL')
        CALL ALLBLO(VSTOPLAN, 'VSTOPL')
        CALL ALLBLO_IN_BLOCK(VSTOPLAN,NPLAN,'VSTOPL')
        CALL ALLBLO(FDKPPL, 'FDKPPL')
        CALL ALLBLO_IN_BLOCK(FDKPPL,NPLAN,'FDKPPL')
        !Z COORDINATES FROM TELEMAC TO TOMAWAC
        DO IPLAN = 1,NPLAN
          NVARTEL2TOM = NVARTEL2TOM + 1
          CALL ADDBLO(TEL2TOM,ZPERPLAN%ADR(IPLAN)%P)
          TEL2TOM%ADR(NVARTEL2TOM)%P%R =>
     &          MESH3D%Z%R(1+(IPLAN-1)*NPOIN2:IPLAN*NPOIN2)
        ENDDO
        !RECEIVING 3D DATA BACK; STOKES DRIFT AND MIXING
        DO IPLAN = 1,NPLAN
          NVARTOM2TEL = NVARTOM2TEL + 1
          CALL ADDBLO(TOM2TEL,USTOPLAN%ADR(IPLAN)%P)
          TOM2TEL%ADR(NVARTOM2TEL)%P%R =>
     &          USTOKES%R(1+(IPLAN-1)*NPOIN2:IPLAN*NPOIN2)
        ENDDO
        DO IPLAN = 1,NPLAN
          NVARTOM2TEL = NVARTOM2TEL + 1
          CALL ADDBLO(TOM2TEL,VSTOPLAN%ADR(IPLAN)%P)
          TOM2TEL%ADR(NVARTOM2TEL)%P%R =>
     &         VSTOKES%R(1+(IPLAN-1)*NPOIN2:IPLAN*NPOIN2)
        ENDDO
        DO IPLAN = 1,NPLAN
          NVARTOM2TEL = NVARTOM2TEL + 1
          CALL ADDBLO(TOM2TEL,FDKPPL%ADR(IPLAN)%P)
          TOM2TEL%ADR(NVARTOM2TEL)%P%R =>
     &         FDK%R(1+(IPLAN-1)*NPOIN2:IPLAN*NPOIN2)
        ENDDO
      ENDIF
!
!-----------------------------------------------------------------------
!
!     METEO MODULE
!
      CALL POINT_METEO(T3D_FILES,T3ATMA,T3ATMB,MESH2D,IELM2H,VENT,ATMOS,
     &  INCLUS(COUPLING,'WAQTEL'),INCLUS(COUPLING,'KHIONE'),FREE_ATMO)
!
!-----------------------------------------------------------------------
!
      IF(LISTIN) THEN
        WRITE(LU,42)
      ENDIF
 42   FORMAT(1X,/,' END OF MEMORY ALLOCATION  ',/)
!
!-----------------------------------------------------------------------
!
      RETURN
      END
