!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!>@brief Getter/setter of telemac3d variables
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      MODULE API_HANDLE_VAR_T3D

        USE API_HANDLE_ERROR
        USE API_INSTANCE_T3D
        IMPLICIT NONE
        !> Size of the string containing the name of a variable
        INTEGER, PARAMETER :: T3D_VAR_LEN=40
        !> Size of the string containing the type of a variable
        INTEGER, PARAMETER :: T3D_TYPE_LEN=12
        !> Size of the string containing the information about a variable
        INTEGER, PARAMETER :: T3D_INFO_LEN=200
        !> The maximum number of variable
        INTEGER, PARAMETER :: NB_VAR_T3D=111
        !> List of variable names
        CHARACTER(LEN=T3D_VAR_LEN),ALLOCATABLE :: VNAME_T3D(:)
        !> List of variable info
        CHARACTER(LEN=T3D_INFO_LEN),ALLOCATABLE :: VINFO_T3D(:)
!
      CONTAINS
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Get a double array
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE GET_DOUBLE_ARRAY_T3D_D
     &     (INST, VARNAME, VALEUR, DIM1, IERR, BLOCK_INDEX)
!
        TYPE(INSTANCE_T3D),         INTENT(IN) :: INST
        CHARACTER(LEN=T3D_VAR_LEN), INTENT(IN) :: VARNAME
        INTEGER,                    INTENT(IN) :: DIM1
        DOUBLE PRECISION,           INTENT(OUT):: VALEUR(DIM1)
        INTEGER,                    INTENT(OUT):: IERR
        INTEGER, OPTIONAL,          INTENT(IN) :: BLOCK_INDEX
!
        IERR = 0
!
        IF(TRIM(VARNAME).EQ.'MODEL.HBOR') THEN
          VALEUR(1:INST%HBOR%DIM1) = INST%HBOR%R(1:INST%HBOR%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBOR2D') THEN
          VALEUR(1:INST%UBOR2D%DIM1) = INST%UBOR2D%R(1:INST%UBOR2D%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBOR2D') THEN
          VALEUR(1:INST%VBOR2D%DIM1) = INST%VBOR2D%R(1:INST%VBOR2D%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORF') THEN
          VALEUR(1:INST%UBORF%DIM1) = INST%UBORF%R(1:INST%UBORF%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORF') THEN
          VALEUR(1:INST%VBORF%DIM1) = INST%VBORF%R(1:INST%VBORF%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORF') THEN
          VALEUR(1:INST%WBORF%DIM1) = INST%WBORF%R(1:INST%WBORF%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORL') THEN
          VALEUR(1:INST%UBORL%DIM1) = INST%UBORL%R(1:INST%UBORL%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORL') THEN
          VALEUR(1:INST%VBORL%DIM1) = INST%VBORL%R(1:INST%VBORL%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORL') THEN
          VALEUR(1:INST%WBORL%DIM1) = INST%WBORL%R(1:INST%WBORL%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORS') THEN
          VALEUR(1:INST%UBORS%DIM1) = INST%UBORS%R(1:INST%UBORS%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORS') THEN
          VALEUR(1:INST%VBORS%DIM1) = INST%VBORS%R(1:INST%VBORS%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORS') THEN
          VALEUR(1:INST%WBORS%DIM1) = INST%WBORS%R(1:INST%WBORS%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XNEBOR') THEN
          VALEUR(1:INST%MESH2D%XNEBOR%DIM1) =
     &    INST%MESH2D%XNEBOR%R(1:INST%MESH2D%XNEBOR%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.YNEBOR') THEN
          VALEUR(1:INST%MESH2D%YNEBOR%DIM1) =
     &    INST%MESH2D%YNEBOR%R(1:INST%MESH2D%YNEBOR%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WATERDEPTH') THEN
          VALEUR(1:INST%H%DIM1) = INST%H%R(1:INST%H%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.INCWATERDEPTH') THEN
          VALEUR(1:INST%DH%DIM1) = INST%DH%R(1:INST%DH%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TA') THEN
          IF(PRESENT(BLOCK_INDEX))THEN
          VALEUR(1:INST%TA%ADR(BLOCK_INDEX)%P%DIM1) =
     &  INST%TA%ADR(BLOCK_INDEX)%P%R(1:INST%TA%ADR(BLOCK_INDEX)%P%DIM1)
          ELSE
            IERR = INDEX_BLOCK_MISSING
            ERR_MESS = 'THE BLOCK NUMBER IS MISSING FOR'//TRIM(VARNAME)
          END IF
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYU') THEN
          VALEUR(1:INST%U%DIM1) = INST%U%R(1:INST%U%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYV') THEN
          VALEUR(1:INST%V%DIM1) = INST%V%R(1:INST%V%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYW') THEN
          VALEUR(1:INST%W%DIM1) = INST%W%R(1:INST%W%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.AK') THEN
          VALEUR(1:INST%AK%DIM1) = INST%AK%R(1:INST%AK%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.AKN') THEN
          VALEUR(1:INST%AKN%DIM1) = INST%AKN%R(1:INST%AKN%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EP') THEN
          VALEUR(1:INST%EP%DIM1) = INST%EP%R(1:INST%EP%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EPN') THEN
          VALEUR(1:INST%EPN%DIM1) = INST%EPN%R(1:INST%EPN%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RUGOF') THEN
          VALEUR(1:INST%RUGOF%DIM1) = INST%RUGOF%R(1:INST%RUGOF%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WINDX') THEN
          VALEUR(1:INST%WINDX%DIM1) = INST%WINDX%R(1:INST%WINDX%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WINDY') THEN
          VALEUR(1:INST%WINDY%DIM1) = INST%WINDY%R(1:INST%WINDY%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'WAQTEL.TAIR') THEN
          VALEUR(1:INST%TAIR%DIM1) = INST%TAIR%R(1:INST%TAIR%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.X') THEN
          VALEUR(1:INST%MESH3D%X%DIM1) =
     &    INST%MESH3D%X%R(1:INST%MESH3D%X%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.Y') THEN
          VALEUR(1:INST%MESH3D%Y%DIM1) =
     &    INST%MESH3D%Y%R(1:INST%MESH3D%Y%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLUX_BOUNDARIES') THEN
          VALEUR(1:SIZE(INST%FLUX_BOUNDARIES)) =
     &    INST%FLUX_BOUNDARIES(1:SIZE(INST%FLUX_BOUNDARIES))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.COTIMP') THEN
          VALEUR(1:SIZE(INST%COTIMP)) = INST%COTIMP(1:SIZE(INST%COTIMP))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VITIMP') THEN
          VALEUR(1:SIZE(INST%VITIMP)) = INST%VITIMP(1:SIZE(INST%VITIMP))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DEBIMP') THEN
          VALEUR(1:SIZE(INST%DEBIMP)) = INST%DEBIMP(1:SIZE(INST%DEBIMP))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.QSCE') THEN
          VALEUR(1:SIZE(INST%QSCE)) = INST%QSCE(1:SIZE(INST%QSCE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.USCE') THEN
          VALEUR(1:SIZE(INST%USCE)) = INST%USCE(1:SIZE(INST%USCE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VSCE') THEN
          VALEUR(1:SIZE(INST%VSCE)) = INST%VSCE(1:SIZE(INST%VSCE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WSCE') THEN
          VALEUR(1:SIZE(INST%WSCE)) = INST%WSCE(1:SIZE(INST%WSCE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XSCE') THEN
          VALEUR(1:SIZE(INST%XSCE)) = INST%XSCE(1:SIZE(INST%XSCE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.YSCE') THEN
          VALEUR(1:SIZE(INST%YSCE)) = INST%YSCE(1:SIZE(INST%YSCE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.ZSCE') THEN
          VALEUR(1:SIZE(INST%ZSCE)) = INST%ZSCE(1:SIZE(INST%ZSCE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BETAC') THEN
          VALEUR(1:SIZE(INST%BETAC)) = INST%BETAC(1:SIZE(INST%BETAC))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.T0AC') THEN
          VALEUR(1:SIZE(INST%T0AC)) = INST%T0AC(1:SIZE(INST%T0AC))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TRAC0') THEN
          VALEUR(1:SIZE(INST%TRAC0)) = INST%TRAC0(1:SIZE(INST%TRAC0))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TRACER') THEN
          VALEUR(1:SIZE(INST%TRACER)) = INST%TRACER(1:SIZE(INST%TRACER))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EVOLUTION') THEN
          VALEUR(1:SIZE(INST%E%R)) =
     &     INST%E%R(1:SIZE(INST%E%R))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BOTTOMELEVATION') THEN
          VALEUR(1:SIZE(INST%ZF%R)) =
     &     INST%ZF%R(1:SIZE(INST%ZF%R))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLOWRATEQ') THEN
          VALEUR(1:SIZE(INST%Q%R)) =
     &     INST%Q%R(1:SIZE(INST%Q%R))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DCLA') THEN
          VALEUR(1:SIZE(INST%DCLA)) =
     &     INST%DCLA(1:SIZE(INST%DCLA))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.SHIELDS') THEN
          VALEUR(1:SIZE(INST%AC)) =
     &     INST%AC(1:SIZE(INST%AC))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XWC') THEN
          VALEUR(1:SIZE(INST%XWC)) =
     &     INST%XWC(1:SIZE(INST%XWC))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.QBOR') THEN
          IF(PRESENT(BLOCK_INDEX))THEN
            VALEUR(1:SIZE(INST%QBOR%ADR(BLOCK_INDEX)%P%R)) =
     &       INST%QBOR%ADR(BLOCK_INDEX)%P%R
     &       (1:SIZE(INST%QBOR%ADR(BLOCK_INDEX)%P%R))
          ELSE
            IERR = INDEX_BLOCK_MISSING
            ERR_MESS = 'THE BLOCK INDEX IS MISSING FOR'//TRIM(VARNAME)
          ENDIF
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EBOR') THEN
          IF(PRESENT(BLOCK_INDEX))THEN
            VALEUR(1:SIZE(INST%EBOR%ADR(BLOCK_INDEX)%P%R)) =
     &       INST%EBOR%ADR(BLOCK_INDEX)%P%R
     &       (1:SIZE(INST%EBOR%ADR(BLOCK_INDEX)%P%R))
          ELSE
            IERR = INDEX_BLOCK_MISSING
            ERR_MESS = 'THE BLOCK INDEX IS MISSING FOR'//TRIM(VARNAME)
          ENDIF
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLBOR') THEN
          VALEUR(1:SIZE(INST%FLBOR%R)) =
     &     INST%FLBOR%R(1:SIZE(INST%FLBOR%R))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TOB') THEN
          VALEUR(1:SIZE(INST%TOB%R)) =
     &     INST%TOB%R(1:SIZE(INST%TOB%R))
        ! <get_double_array>
        ELSE
          IERR = UNKNOWN_VAR_ERROR
          ERR_MESS = 'UNKNOWN VARIABLE NAME : '//TRIM(VARNAME)
        ENDIF
!
      END SUBROUTINE GET_DOUBLE_ARRAY_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Defines the value of a double array
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE SET_DOUBLE_ARRAY_T3D_D
     &     (INST, VARNAME, VALEUR, DIM1, IERR, BLOCK_INDEX)
!
        TYPE(INSTANCE_T3D),    INTENT(INOUT) :: INST
        CHARACTER(LEN=T3D_VAR_LEN), INTENT(IN)  :: VARNAME
        INTEGER,               INTENT(IN) :: DIM1
        DOUBLE PRECISION,      INTENT(IN) :: VALEUR(DIM1)
        INTEGER,               INTENT(OUT) :: IERR
        INTEGER, OPTIONAL,     INTENT(IN) :: BLOCK_INDEX
!
        IERR = 0
        IF(TRIM(VARNAME).EQ.'MODEL.HBOR') THEN
          INST%HBOR%R(1:INST%HBOR%DIM1) = VALEUR(1:INST%HBOR%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBOR2D') THEN
          INST%UBOR2D%R(1:INST%UBOR2D%DIM1) = VALEUR(1:INST%UBOR2D%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBOR2D') THEN
          INST%VBOR2D%R(1:INST%VBOR2D%DIM1) = VALEUR(1:INST%VBOR2D%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORF') THEN
          INST%UBORF%R(1:INST%UBORF%DIM1) = VALEUR(1:INST%UBORF%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORF') THEN
          INST%VBORF%R(1:INST%VBORF%DIM1) = VALEUR(1:INST%VBORF%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORF') THEN
          INST%WBORF%R(1:INST%WBORF%DIM1) = VALEUR(1:INST%WBORF%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORL') THEN
          INST%UBORL%R(1:INST%UBORL%DIM1) = VALEUR(1:INST%UBORL%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORL') THEN
          INST%VBORL%R(1:INST%VBORL%DIM1) = VALEUR(1:INST%VBORL%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORL') THEN
          INST%WBORL%R(1:INST%WBORL%DIM1) = VALEUR(1:INST%WBORL%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORS') THEN
          INST%UBORS%R(1:INST%UBORS%DIM1) = VALEUR(1:INST%UBORS%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORS') THEN
          INST%VBORS%R(1:INST%VBORS%DIM1) = VALEUR(1:INST%VBORS%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORS') THEN
          INST%WBORS%R(1:INST%WBORS%DIM1) = VALEUR(1:INST%WBORS%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WATERDEPTH') THEN
          INST%H%R(1:INST%H%DIM1) = VALEUR(1:INST%H%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.INCWATERDEPTH') THEN
          INST%DH%R(1:INST%DH%DIM1) = VALEUR(1:INST%DH%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TA') THEN
          IF(PRESENT(BLOCK_INDEX))THEN
        INST%TA%ADR(BLOCK_INDEX)%P%R(1:INST%TA%ADR(BLOCK_INDEX)%P%DIM1)
     &            = VALEUR(1:INST%TA%ADR(BLOCK_INDEX)%P%DIM1)
          ELSE
            IERR = INDEX_BLOCK_MISSING
            ERR_MESS = 'THE BLOCK NUMBER IS MISSING FOR'//TRIM(VARNAME)
          END IF
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYU') THEN
          INST%U%R(1:INST%U%DIM1) = VALEUR(1:INST%U%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYV') THEN
          INST%V%R(1:INST%V%DIM1) = VALEUR(1:INST%V%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYW') THEN
          INST%W%R(1:INST%W%DIM1) = VALEUR(1:INST%W%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.AK') THEN
          INST%AK%R(1:INST%AK%DIM1) = VALEUR(1:INST%AK%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.AKN') THEN
          INST%AKN%R(1:INST%AKN%DIM1) = VALEUR(1:INST%AKN%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EP') THEN
          INST%EP%R(1:INST%EP%DIM1) = VALEUR(1:INST%EP%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EPN') THEN
          INST%EPN%R(1:INST%EPN%DIM1) = VALEUR(1:INST%EPN%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RUGOF') THEN
          INST%RUGOF%R(1:INST%RUGOF%DIM1) = VALEUR(1:INST%RUGOF%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WINDX') THEN
          INST%WINDX%R(1:INST%WINDX%DIM1) = VALEUR(1:INST%WINDX%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WINDY') THEN
          INST%WINDY%R(1:INST%WINDY%DIM1) = VALEUR(1:INST%WINDY%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'WAQTEL.TAIR') THEN
          INST%TAIR%R(1:INST%TAIR%DIM1) = VALEUR(1:INST%TAIR%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.X') THEN
          INST%MESH3D%X%R(1:INST%MESH3D%X%DIM1) =
     &    VALEUR(1:INST%MESH3D%X%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.Y') THEN
          INST%MESH3D%Y%R(1:INST%MESH3D%Y%DIM1) =
     &    VALEUR(1:INST%MESH3D%Y%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLUX_BOUNDARIES') THEN
          INST%FLUX_BOUNDARIES(1:SIZE(INST%FLUX_BOUNDARIES)) =
     &    VALEUR(1:SIZE(INST%FLUX_BOUNDARIES))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.COTIMP') THEN
          INST%COTIMP(1:SIZE(INST%COTIMP)) = VALEUR(1:SIZE(INST%COTIMP))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DEBIMP') THEN
          INST%DEBIMP(1:SIZE(INST%DEBIMP)) = VALEUR(1:SIZE(INST%DEBIMP))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.QSCE') THEN
          INST%QSCE(1:SIZE(INST%QSCE)) = VALEUR(1:SIZE(INST%QSCE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.USCE') THEN
          INST%USCE(1:SIZE(INST%USCE)) = VALEUR(1:SIZE(INST%USCE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VSCE') THEN
          INST%VSCE(1:SIZE(INST%VSCE)) = VALEUR(1:SIZE(INST%VSCE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WSCE') THEN
          INST%WSCE(1:SIZE(INST%WSCE)) = VALEUR(1:SIZE(INST%WSCE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XSCE') THEN
          INST%XSCE(1:SIZE(INST%XSCE)) = VALEUR(1:SIZE(INST%XSCE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.YSCE') THEN
          INST%YSCE(1:SIZE(INST%YSCE)) = VALEUR(1:SIZE(INST%YSCE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.ZSCE') THEN
          INST%ZSCE(1:SIZE(INST%ZSCE)) = VALEUR(1:SIZE(INST%ZSCE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BETAC') THEN
          INST%BETAC(1:SIZE(INST%BETAC)) = VALEUR(1:SIZE(INST%BETAC))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.T0AC') THEN
          INST%T0AC(1:SIZE(INST%T0AC)) = VALEUR(1:SIZE(INST%T0AC))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TRAC0') THEN
          INST%TRAC0(1:SIZE(INST%TRAC0)) = VALEUR(1:SIZE(INST%TRAC0))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TRACER') THEN
          INST%TRACER(1:SIZE(INST%TRACER)) =VALEUR(1:SIZE(INST%TRACER))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VITIMP') THEN
          INST%VITIMP(1:SIZE(INST%VITIMP)) = VALEUR(1:SIZE(INST%VITIMP))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EVOLUTION') THEN
          INST%E%R(1:SIZE(INST%E%R)) =
     &     VALEUR(1:SIZE(INST%E%R))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BOTTOMELEVATION') THEN
          INST%ZF%R(1:SIZE(INST%ZF%R)) =
     &     VALEUR(1:SIZE(INST%ZF%R))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLOWRATEQ') THEN
          INST%Q%R(1:SIZE(INST%Q%R)) =
     &     VALEUR(1:SIZE(INST%Q%R))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DCLA') THEN
          INST%DCLA(1:SIZE(INST%DCLA)) =
     &     VALEUR(1:SIZE(INST%DCLA))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.SHIELDS') THEN
          INST%AC(1:SIZE(INST%AC)) =
     &     VALEUR(1:SIZE(INST%AC))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XWC') THEN
          INST%XWC(1:SIZE(INST%XWC)) =
     &     VALEUR(1:SIZE(INST%XWC))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.QBOR') THEN
          IF(PRESENT(BLOCK_INDEX))THEN
            INST%QBOR%ADR(BLOCK_INDEX)%P%R
     &       (1:SIZE(INST%QBOR%ADR(BLOCK_INDEX)%P%R))=
     &       VALEUR(1:SIZE(INST%QBOR%ADR(BLOCK_INDEX)%P%R))
          ELSE
            IERR = INDEX_BLOCK_MISSING
            ERR_MESS = 'THE BLOCK INDEX IS MISSING FOR'//TRIM(VARNAME)
          ENDIF
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EBOR') THEN
          IF(PRESENT(BLOCK_INDEX))THEN
            INST%EBOR%ADR(BLOCK_INDEX)%P%R
     &       (1:SIZE(INST%EBOR%ADR(BLOCK_INDEX)%P%R))=
     &       VALEUR(1:SIZE(INST%EBOR%ADR(BLOCK_INDEX)%P%R))
          ELSE
            IERR = INDEX_BLOCK_MISSING
            ERR_MESS = 'THE BLOCK INDEX IS MISSING FOR'//TRIM(VARNAME)
          ENDIF
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLBOR') THEN
          INST%FLBOR%R(1:SIZE(INST%FLBOR%R)) =
     &     VALEUR(1:SIZE(INST%FLBOR%R))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TOB') THEN
          INST%TOB%R(1:SIZE(INST%TOB%R)) =
     &     VALEUR(1:SIZE(INST%TOB%R))
        ! <set_double_array>
        ELSE
          IERR = UNKNOWN_VAR_ERROR
          ERR_MESS = 'UNKNOWN VARIABLE NAME : '//TRIM(VARNAME)
        ENDIF
!
      END SUBROUTINE SET_DOUBLE_ARRAY_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Get an integer array
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE GET_INTEGER_ARRAY_T3D_D
     &     (INST, VARNAME, VALEUR, DIM1, IERR)
!
        TYPE(INSTANCE_T3D),    INTENT(IN) :: INST
        CHARACTER(LEN=T3D_VAR_LEN), INTENT(IN)  :: VARNAME
        INTEGER,               INTENT(IN) :: DIM1
        INTEGER,               INTENT(OUT) :: VALEUR(DIM1)
        INTEGER,               INTENT(OUT) :: IERR
!
        IERR = 0
        IF(TRIM(VARNAME).EQ.'MODEL.LIHBOR') THEN
          VALEUR(1:INST%LIHBOR%DIM1) = INST%LIHBOR%I(1:INST%LIHBOR%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOF') THEN
          VALEUR(1:INST%LIUBOF%DIM1) = INST%LIUBOF%I(1:INST%LIUBOF%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOF') THEN
          VALEUR(1:INST%LIVBOF%DIM1) = INST%LIVBOF%I(1:INST%LIVBOF%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOF') THEN
          VALEUR(1:INST%LIWBOF%DIM1) = INST%LIWBOF%I(1:INST%LIWBOF%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOL') THEN
          VALEUR(1:INST%LIUBOL%DIM1) = INST%LIUBOL%I(1:INST%LIUBOL%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOL') THEN
          VALEUR(1:INST%LIVBOL%DIM1) = INST%LIVBOL%I(1:INST%LIVBOL%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOL') THEN
          VALEUR(1:INST%LIWBOL%DIM1) = INST%LIWBOL%I(1:INST%LIWBOL%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOS') THEN
          VALEUR(1:INST%LIUBOS%DIM1) = INST%LIUBOS%I(1:INST%LIUBOS%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOS') THEN
          VALEUR(1:INST%LIVBOS%DIM1) = INST%LIVBOS%I(1:INST%LIVBOS%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOS') THEN
          VALEUR(1:INST%LIWBOS%DIM1) = INST%LIWBOS%I(1:INST%LIWBOS%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.KP1BOR') THEN
          VALEUR(1:INST%MESH2D%KP1BOR%DIM1) =
     &    INST%MESH2D%KP1BOR%I(1:INST%MESH2D%KP1BOR%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NUMLIQ') THEN
          VALEUR(1:INST%NUMLIQ%DIM1) = INST%NUMLIQ%I(1:INST%NUMLIQ%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NBOR') THEN
          VALEUR(1:INST%MESH3D%NBOR%DIM1) =
     &    INST%MESH3D%NBOR%I(1:INST%MESH3D%NBOR%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.IKLE') THEN
          VALEUR(1:SIZE(INST%MESH3D%IKLE%I)) =
     &    INST%MESH3D%IKLE%I(1:SIZE(INST%MESH3D%IKLE%I))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NACHB') THEN
          VALEUR(1:SIZE(INST%MESH3D%NACHB%I)) =
     &         INST%MESH3D%NACHB%I(1:SIZE(INST%MESH3D%NACHB%I))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.KNOLG') THEN
          VALEUR(1:INST%MESH3D%KNOLG%DIM1) =
     &         INST%MESH3D%KNOLG%I(1:INST%MESH3D%KNOLG%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BND_TIDE') THEN
          VALEUR(1:SIZE(INST%BND_TIDE)) =
     &     INST%BND_TIDE(1:SIZE(INST%BND_TIDE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.CLU') THEN
          VALEUR(1:SIZE(INST%CLU%I)) =
     &     INST%CLU%I(1:SIZE(INST%CLU%I))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.CLV') THEN
          VALEUR(1:SIZE(INST%CLV%I)) =
     &     INST%CLV%I(1:SIZE(INST%CLV%I))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIQBOR') THEN
          VALEUR(1:SIZE(INST%LIQBOR%I)) =
     &     INST%LIQBOR%I(1:SIZE(INST%LIQBOR%I))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIEBOR') THEN
          VALEUR(1:SIZE(INST%LIEBOR%I)) =
     &     INST%LIEBOR%I(1:SIZE(INST%LIEBOR%I))
        ! <get_integer_array>
        ELSE
          IERR = UNKNOWN_VAR_ERROR
          ERR_MESS = 'UNKNOWN VARIABLE NAME : '//TRIM(VARNAME)
        ENDIF
!
      END SUBROUTINE GET_INTEGER_ARRAY_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Defines the value of an integer array
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE SET_INTEGER_ARRAY_T3D_D
     &     (INST, VARNAME, VALEUR, DIM1, IERR)
!
        TYPE(INSTANCE_T3D),    INTENT(INOUT) :: INST
        CHARACTER(LEN=T3D_VAR_LEN), INTENT(IN)  :: VARNAME
        INTEGER,               INTENT(IN) :: DIM1
        INTEGER,               INTENT(IN) :: VALEUR(DIM1)
        INTEGER,               INTENT(OUT) :: IERR
!
        IERR = 0
        IF(TRIM(VARNAME).EQ.'MODEL.LIHBOR') THEN
          INST%LIHBOR%I(1:INST%LIHBOR%DIM1) = VALEUR(1:INST%LIHBOR%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOF') THEN
          INST%LIUBOF%I(1:INST%LIUBOF%DIM1) = VALEUR(1:INST%LIUBOF%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOF') THEN
          INST%LIVBOF%I(1:INST%LIVBOF%DIM1) = VALEUR(1:INST%LIVBOF%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOF') THEN
          INST%LIWBOF%I(1:INST%LIWBOF%DIM1) = VALEUR(1:INST%LIWBOF%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOL') THEN
          INST%LIUBOL%I(1:INST%LIUBOL%DIM1) = VALEUR(1:INST%LIUBOL%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOL') THEN
          INST%LIVBOL%I(1:INST%LIVBOL%DIM1) = VALEUR(1:INST%LIVBOL%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOL') THEN
          INST%LIWBOL%I(1:INST%LIWBOL%DIM1) = VALEUR(1:INST%LIWBOL%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOS') THEN
          INST%LIUBOS%I(1:INST%LIUBOS%DIM1) = VALEUR(1:INST%LIUBOS%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOS') THEN
          INST%LIVBOS%I(1:INST%LIVBOS%DIM1) = VALEUR(1:INST%LIVBOS%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOS') THEN
          INST%LIWBOS%I(1:INST%LIWBOS%DIM1) = VALEUR(1:INST%LIWBOS%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.IKLE') THEN
          INST%MESH3D%IKLE%I(1:SIZE(INST%MESH3D%IKLE%I)) =
     &    VALEUR(1:SIZE(INST%MESH3D%IKLE%I))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NACHB') THEN
          INST%MESH3D%NACHB%I(1:SIZE(INST%MESH3D%NACHB%I)) =
     &    VALEUR(1:SIZE(INST%MESH3D%NACHB%I))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.KNOLG') THEN
          INST%MESH3D%KNOLG%I(1:INST%MESH3D%KNOLG%DIM1) =
     &    VALEUR(1:INST%MESH3D%KNOLG%DIM1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BND_TIDE') THEN
          INST%BND_TIDE(1:SIZE(INST%BND_TIDE)) =
     &    VALEUR(1:SIZE(INST%BND_TIDE))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.CLU') THEN
          INST%CLU%I(1:SIZE(INST%CLU%I)) =
     &     VALEUR(1:SIZE(INST%CLU%I))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.CLV') THEN
          INST%CLV%I(1:SIZE(INST%CLV%I)) =
     &     VALEUR(1:SIZE(INST%CLV%I))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIQBOR') THEN
          INST%LIQBOR%I(1:SIZE(INST%LIQBOR%I)) =
     &     VALEUR(1:SIZE(INST%LIQBOR%I))
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIEBOR') THEN
          INST%LIEBOR%I(1:SIZE(INST%LIEBOR%I)) =
     &     VALEUR(1:SIZE(INST%LIEBOR%I))
        ! <set_integer_array>
        ELSE
          IERR = UNKNOWN_VAR_ERROR
          ERR_MESS = 'UNKNOWN VARIABLE NAME : '//TRIM(VARNAME)
        ENDIF
!
      END SUBROUTINE SET_INTEGER_ARRAY_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Get a double variable from telemac3d
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@param[in,out] INST The instance
      !>@param[in] VARNAME Name of the variable to read
      !>@param[out] VALEUR Contains the read value
      !>@param[in] INDEX1 Index on the first dimension
      !>@param[in] INDEX2 Index on the second dimension
      !>@param[in] INDEX3 Index on the third dimension
      !>@param[out] IERR 0 if subroutine successfull,
      !!                        error id otherwise
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE GET_DOUBLE_T3D_D
     &     (INST, VARNAME, VALEUR, INDEX1, INDEX2, INDEX3, IERR)
!
        TYPE(INSTANCE_T3D),         INTENT(IN) :: INST
        CHARACTER(LEN=T3D_VAR_LEN), INTENT(IN) :: VARNAME
        DOUBLE PRECISION,           INTENT(OUT):: VALEUR
        INTEGER,                    INTENT(IN) :: INDEX1
        INTEGER,                    INTENT(IN) :: INDEX2
        INTEGER,                    INTENT(IN) :: INDEX3
        INTEGER,                    INTENT(OUT):: IERR
!
        IERR = 0
        VALEUR = 0.0
!
        IF(TRIM(VARNAME).EQ.'MODEL.HBOR') THEN
          VALEUR = INST%HBOR%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBOR2D') THEN
          VALEUR = INST%UBOR2D%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBOR2D') THEN
          VALEUR = INST%VBOR2D%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORF') THEN
          VALEUR = INST%UBORF%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORF') THEN
          VALEUR = INST%VBORF%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORF') THEN
          VALEUR = INST%WBORF%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORL') THEN
          VALEUR = INST%UBORL%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORL') THEN
          VALEUR = INST%VBORL%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORL') THEN
          VALEUR = INST%WBORL%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORS') THEN
          VALEUR = INST%UBORS%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORS') THEN
          VALEUR = INST%VBORS%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORS') THEN
          VALEUR = INST%WBORS%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XNEBOR') THEN
          VALEUR = INST%MESH2D%XNEBOR%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.YNEBOR') THEN
          VALEUR = INST%MESH2D%YNEBOR%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WATERDEPTH') THEN
          VALEUR = INST%H%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.INCWATERDEPTH') THEN
          VALEUR = INST%DH%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TA') THEN
          VALEUR = INST%TA%ADR(INDEX1)%P%R(INDEX2)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYU') THEN
          VALEUR = INST%U%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYV') THEN
          VALEUR = INST%V%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYW') THEN
          VALEUR = INST%W%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.AK') THEN
          VALEUR = INST%AK%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.AKN') THEN
          VALEUR = INST%AKN%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EP') THEN
          VALEUR = INST%EP%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EPN') THEN
          VALEUR = INST%EPN%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RUGOF') THEN
          VALEUR = INST%RUGOF%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WINDX') THEN
          VALEUR = INST%WINDX%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WINDY') THEN
          VALEUR = INST%WINDY%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'WAQTEL.TAIR') THEN
          VALEUR = INST%TAIR%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.X') THEN
          VALEUR = INST%MESH3D%X%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.Y') THEN
          VALEUR = INST%MESH3D%Y%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLUX_BOUNDARIES') THEN
          VALEUR = INST%FLUX_BOUNDARIES(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.COTIMP') THEN
          VALEUR = INST%COTIMP(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VITIMP') THEN
          VALEUR = INST%VITIMP(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.AT') THEN
          VALEUR = INST%AT
        ELSE IF(TRIM(VARNAME).EQ.'WAQTEL.C_ATMOS') THEN
          VALEUR = INST%C_ATMOS
        ELSE IF(TRIM(VARNAME).EQ.'WAQTEL.CP_EAU') THEN
          VALEUR = INST%CP_EAU
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DUREE') THEN
          VALEUR = INST%DUREE
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RHO0') THEN
          VALEUR = INST%RHO0
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DEBIMP') THEN
          VALEUR = INST%DEBIMP(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.QSCE') THEN
          VALEUR = INST%QSCE(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.USCE') THEN
          VALEUR = INST%USCE(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VSCE') THEN
          VALEUR = INST%VSCE(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WSCE') THEN
          VALEUR = INST%WSCE(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XSCE') THEN
          VALEUR = INST%XSCE(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.YSCE') THEN
          VALEUR = INST%YSCE(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.ZSCE') THEN
          VALEUR = INST%ZSCE(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BETAC') THEN
          VALEUR = INST%BETAC(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TRAC0') THEN
          VALEUR = INST%TRAC0(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.T0AC') THEN
          VALEUR = INST%T0AC(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TRACER') THEN
          VALEUR = INST%TRACER(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TASCE') THEN
          VALEUR = INST%TASCE(INDEX1,INDEX2)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TIDALRANGE') THEN
          VALEUR = INST%CTIDE
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TIDALVELOCITY') THEN
          VALEUR = INST%CTIDEV
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.SEALEVEL') THEN
          VALEUR = INST%MSL
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.PRANDTL') THEN
          VALEUR = INST%PRANDTL
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EVOLUTION') THEN
          VALEUR = INST%E%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BOTTOMELEVATION') THEN
          VALEUR = INST%ZF%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLOWRATEQ') THEN
          VALEUR = INST%Q%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DCLA') THEN
          VALEUR = INST%DCLA(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.SHIELDS') THEN
          VALEUR = INST%AC(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XWC') THEN
          VALEUR = INST%XWC(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.QBOR') THEN
          VALEUR = INST%QBOR%ADR(INDEX1)%P%R(INDEX2)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EBOR') THEN
          VALEUR = INST%EBOR%ADR(INDEX1)%P%R(INDEX2)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLBOR') THEN
          VALEUR = INST%FLBOR%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TOB') THEN
          VALEUR = INST%TOB%R(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.PARTHENIADES') THEN
          VALEUR = INST%PARTHENIADES(INDEX1,INDEX2)
        ! <get_double>
        ELSE
          IERR = UNKNOWN_VAR_ERROR
          ERR_MESS = 'UNKNOWN VARIABLE NAME : '//TRIM(VARNAME)
        ENDIF
!
      END SUBROUTINE GET_DOUBLE_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Defines the value of a double variable of telemac3d
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@param[in,out] INST The instance
      !>@param[in] VARNAME Name of the variable to write
      !>@param[in] VALEUR The value to write in the variable
      !>@param[in] INDEX1 Index on the first dimension
      !>@param[in] INDEX2 Index on the second dimension
      !>@param[in] INDEX3 Index on the third dimension
      !>@param[out] IERR 0 if subroutine successfull,
      !!                        error id otherwise
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE SET_DOUBLE_T3D_D
     &     (INST, VARNAME, VALEUR, INDEX1, INDEX2, INDEX3, IERR)
!
        TYPE(INSTANCE_T3D),    INTENT(INOUT) :: INST
        CHARACTER(LEN=T3D_VAR_LEN), INTENT(IN)  :: VARNAME
        DOUBLE PRECISION,      INTENT(IN) :: VALEUR
        INTEGER,               INTENT(IN) :: INDEX1
        INTEGER,               INTENT(IN) :: INDEX2
        INTEGER,               INTENT(IN) :: INDEX3
        INTEGER,               INTENT(OUT) :: IERR
!
        IERR = 0
        IF(TRIM(VARNAME).EQ.'MODEL.HBOR') THEN
          INST%HBOR%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBOR2D') THEN
          INST%UBOR2D%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBOR2D') THEN
          INST%VBOR2D%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORF') THEN
          INST%UBORF%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORF') THEN
          INST%VBORF%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORF') THEN
          INST%WBORF%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORL') THEN
          INST%UBORL%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORL') THEN
          INST%VBORL%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORL') THEN
          INST%WBORL%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORS') THEN
          INST%UBORS%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORS') THEN
          INST%VBORS%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORS') THEN
          INST%WBORS%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WATERDEPTH') THEN
          INST%H%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.INCWATERDEPTH') THEN
          INST%DH%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TA') THEN
          INST%TA%ADR(INDEX1)%P%R(INDEX2) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYU') THEN
          INST%U%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYV') THEN
          INST%V%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYW') THEN
          INST%W%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.AK') THEN
          INST%AK%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.AKN') THEN
          INST%AKN%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EP') THEN
          INST%EP%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EPN') THEN
          INST%EPN%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RUGOF') THEN
          INST%RUGOF%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WINDX') THEN
          INST%WINDX%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WINDY') THEN
          INST%WINDY%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'WAQTEL.TAIR') THEN
          INST%TAIR%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.X') THEN
          INST%MESH3D%X%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.Y') THEN
          INST%MESH3D%Y%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLUX_BOUNDARIES') THEN
          INST%FLUX_BOUNDARIES(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.COTIMP') THEN
          INST%COTIMP(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DEBIMP') THEN
          INST%DEBIMP(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.QSCE') THEN
          INST%QSCE(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.USCE') THEN
          INST%USCE(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VSCE') THEN
          INST%VSCE(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WSCE') THEN
          INST%WSCE(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XSCE') THEN
          INST%XSCE(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.YSCE') THEN
          INST%YSCE(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.ZSCE') THEN
          INST%ZSCE(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BETAC') THEN
          INST%BETAC(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TRAC0') THEN
          INST%TRAC0(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.T0AC') THEN
          INST%T0AC(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TRACER') THEN
          INST%TRACER(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TASCE') THEN
          INST%TASCE(INDEX1,INDEX2) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VITIMP') THEN
          INST%VITIMP(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.AT') THEN
          INST%AT = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RHO0') THEN
          INST%RHO0 = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'WAQTEL.C_ATMOS') THEN
          INST%C_ATMOS = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'WAQTEL.CP_EAU') THEN
          INST%CP_EAU = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DUREE') THEN
          INST%DUREE = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TIDALRANGE') THEN
          INST%CTIDE = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TIDALVELOCITY') THEN
          INST%CTIDEV = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.SEALEVEL') THEN
          INST%MSL = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.PRANDTL') THEN
          INST%PRANDTL = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EVOLUTION') THEN
          INST%E%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BOTTOMELEVATION') THEN
          INST%ZF%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLOWRATEQ') THEN
          INST%Q%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DCLA') THEN
          INST%DCLA(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.SHIELDS') THEN
          INST%AC(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XWC') THEN
          INST%XWC(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.QBOR') THEN
          INST%QBOR%ADR(INDEX1)%P%R(INDEX2) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EBOR') THEN
          INST%EBOR%ADR(INDEX1)%P%R(INDEX2) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLBOR') THEN
          INST%FLBOR%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TOB') THEN
          INST%TOB%R(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.PARTHENIADES') THEN
          INST%PARTHENIADES(INDEX1,INDEX2) = VALEUR
        ! <set_double>
        ELSE
          IERR = UNKNOWN_VAR_ERROR
          ERR_MESS = 'UNKNOWN VARIABLE NAME : '//TRIM(VARNAME)
        ENDIF
!
      END SUBROUTINE SET_DOUBLE_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Get an integer variable from telemac3d
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@param[in,out] INST The instance
      !>@param[in] VARNAME Name of the variable to read
      !>@param[out] VALEUR Containis the read value
      !>@param[in] INDEX1 Index on the first dimension
      !>@param[in] INDEX2 Index on the second dimension
      !>@param[in] INDEX3 Index on the third dimension
      !>@param[out] IERR 0 if subroutine successfull,
      !!                        error id otherwise
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE GET_INTEGER_T3D_D
     &     (INST, VARNAME, VALEUR, INDEX1, INDEX2, INDEX3, IERR)
!
        TYPE(INSTANCE_T3D),    INTENT(IN) :: INST
        CHARACTER(LEN=T3D_VAR_LEN), INTENT(IN)  :: VARNAME
        INTEGER,               INTENT(OUT) :: VALEUR
        INTEGER,               INTENT(IN) :: INDEX1
        INTEGER,               INTENT(IN) :: INDEX2
        INTEGER,               INTENT(IN) :: INDEX3
        INTEGER,               INTENT(OUT) :: IERR
!
        IERR = 0
        VALEUR = -1
        IF(TRIM(VARNAME).EQ.'MODEL.LIHBOR') THEN
          VALEUR = INST%LIHBOR%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOF') THEN
          VALEUR = INST%LIUBOF%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOF') THEN
          VALEUR = INST%LIVBOF%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOF') THEN
          VALEUR = INST%LIWBOF%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOL') THEN
          VALEUR = INST%LIUBOL%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOL') THEN
          VALEUR = INST%LIVBOL%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOL') THEN
          VALEUR = INST%LIWBOL%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOS') THEN
          VALEUR = INST%LIUBOS%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOS') THEN
          VALEUR = INST%LIVBOS%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOS') THEN
          VALEUR = INST%LIWBOS%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.KP1BOR') THEN
          VALEUR = INST%MESH2D%KP1BOR%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NUMLIQ') THEN
          VALEUR = INST%NUMLIQ%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NBOR') THEN
          VALEUR = INST%MESH3D%NBOR%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NPOIN') THEN
          VALEUR = INST%MESH3D%NPOIN
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NPOIN2') THEN
          VALEUR = INST%MESH2D%NPOIN
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NPLAN') THEN
          VALEUR = INST%NPLAN
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NTRAC') THEN
          VALEUR = INST%NTRAC
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.MAXTRA') THEN
          VALEUR = INST%MAXTRA
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.MAXSCE') THEN
          VALEUR = INST%MAXSCE
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NELEM') THEN
          VALEUR = INST%MESH3D%NELEM
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NPTFR') THEN
          VALEUR = INST%MESH3D%NPTFR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NPTFR2') THEN
          VALEUR = INST%MESH2D%NPTFR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BND_COLOR') THEN
          VALEUR = INST%BOUNDARY_COLOUR%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.GRAPH_PERIOD') THEN
          VALEUR = INST%GRAPRD
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LISTIN_PERIOD') THEN
          VALEUR = INST%LISPRD
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NTIMESTEPS') THEN
          VALEUR = INST%NIT
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LT') THEN
          VALEUR = INST%LT
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NELMAX') THEN
          VALEUR = INST%MESH3D%NELMAX
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.IKLE') THEN
          VALEUR = INST%MESH3D%IKLE%I((INDEX2-1)*INST%MESH3D%IKLE%DIM1
     &                               + INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NACHB') THEN
          VALEUR = INST%MESH3D%NACHB%I((INDEX2-1)*INST%NBMAXNSHARE
     &          + INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.KNOLG') THEN
          VALEUR = INST%MESH3D%KNOLG%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BND_TIDE') THEN
          VALEUR = INST%BND_TIDE(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.CLU') THEN
          VALEUR = INST%CLU%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.CLV') THEN
          VALEUR = INST%CLV%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIQBOR') THEN
          VALEUR = INST%LIQBOR%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIEBOR') THEN
          VALEUR = INST%LIEBOR%I(INDEX1)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NSICLA') THEN
          VALEUR = INST%NSICLA
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NOMBLAY') THEN
          VALEUR = INST%NOMBLAY
        ! <get_integer>
        ELSE
          IERR = UNKNOWN_VAR_ERROR
          ERR_MESS = 'UNKNOWN VARIABLE NAME : '//TRIM(VARNAME)
        ENDIF
!
      END SUBROUTINE GET_INTEGER_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Defines the value of an integer variable of telemac3d
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@param[in,out] INST The instance
      !>@param[in] VARNAME Name of the variable to write
      !>@param[in] VALEUR The value to write in the variable
      !>@param[in] INDEX1 Index on the first dimension
      !>@param[in] INDEX2 Index on the second dimension
      !>@param[in] INDEX3 Index on the third dimension
      !>@param[out] IERR 0 if subroutine successfull,
      !!                        error id otherwise
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE SET_INTEGER_T3D_D
     &     (INST, VARNAME, VALEUR, INDEX1, INDEX2, INDEX3, IERR)
!
        TYPE(INSTANCE_T3D),    INTENT(INOUT) :: INST
        CHARACTER(LEN=T3D_VAR_LEN), INTENT(IN)  :: VARNAME
        INTEGER,               INTENT(IN) :: VALEUR
        INTEGER,               INTENT(IN) :: INDEX1
        INTEGER,               INTENT(IN) :: INDEX2
        INTEGER,               INTENT(IN) :: INDEX3
        INTEGER,               INTENT(OUT) :: IERR
!
        IERR = 0
        IF(TRIM(VARNAME).EQ.'MODEL.LIHBOR') THEN
          INST%LIHBOR%I(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOF') THEN
          INST%LIUBOF%I(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOF') THEN
          INST%LIVBOF%I(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOF') THEN
          INST%LIWBOF%I(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOL') THEN
          INST%LIUBOL%I(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOL') THEN
          INST%LIVBOL%I(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOL') THEN
          INST%LIWBOL%I(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOS') THEN
          INST%LIUBOS%I(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOS') THEN
          INST%LIVBOS%I(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOS') THEN
          INST%LIWBOS%I(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.GRAPH_PERIOD') THEN
          INST%GRAPRD = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LISTIN_PERIOD') THEN
          INST%LISPRD = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NTIMESTEPS') THEN
          INST%NIT = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LT') THEN
          INST%LT = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BND_TIDE') THEN
          INST%BND_TIDE(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.CLU') THEN
          INST%CLU%I(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.CLV') THEN
          INST%CLV%I(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIQBOR') THEN
          INST%LIQBOR%I(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIEBOR') THEN
          INST%LIEBOR%I(INDEX1) = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NSICLA') THEN
          INST%NSICLA = VALEUR
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NOMBLAY') THEN
          INST%NOMBLAY = VALEUR
        ! <set_integer>
        ELSE
          IERR = UNKNOWN_VAR_ERROR
          ERR_MESS = 'UNKNOWN VARIABLE NAME : '//TRIM(VARNAME)
        ENDIF
!
      END SUBROUTINE SET_INTEGER_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Get a string variable from telemac3d
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@param[in,out] INST The instance
      !>@param[in] VARNAME Name of the variable to read
      !>@param[out] VALEUR Containis the read value
      !>@param[in] VALUELEN Length of the string
      !>@param[in] INDEX1 Index on the first dimension
      !>@param[in] INDEX2 Index on the second dimension
      !>@param[out] IERR 0 if subroutine successfull,
      !!                        error id otherwise
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE GET_STRING_T3D_D
     &     (INST, VARNAME, VALEUR, VALUELEN, INDEX1, INDEX2, IERR)
!
        TYPE(INSTANCE_T3D),    INTENT(IN) :: INST
        CHARACTER(LEN=T3D_VAR_LEN), INTENT(IN)  :: VARNAME
        INTEGER,               INTENT(IN) :: VALUELEN
        INTEGER,               INTENT(IN) :: INDEX1
        INTEGER,               INTENT(IN) :: INDEX2
        CHARACTER,             INTENT(OUT) :: VALEUR(VALUELEN)
        INTEGER,               INTENT(OUT) :: IERR
!
        INTEGER I,J
!
        IERR = 0
        VALEUR = ""
        IF(TRIM(VARNAME).EQ.'MODEL.RESULTFILE') THEN
          I = INST%T3DRES
          DO J = 1,VALUELEN
            VALEUR(J:J) = INST%T3D_FILES(I)%NAME(J:J)
          ENDDO
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RESULT2D') THEN
          I = INST%T3DHYD
          DO J = 1,VALUELEN
            VALEUR(J:J) = INST%T3D_FILES(I)%NAME(J:J)
          ENDDO
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BCFILE') THEN
          I = INST%T3DCLI
          DO J = 1,VALUELEN
            VALEUR(J:J) = INST%T3D_FILES(I)%NAME(J:J)
          ENDDO
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.GEOMETRYFILE') THEN
          I = INST%T3DGEO
          DO J = 1,VALUELEN
            VALEUR(J:J) = INST%T3D_FILES(I)%NAME(J:J)
          ENDDO
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EQUATION') THEN
          DO J = 1,VALUELEN
            VALEUR(J:J) = INST%EQUA(J:J)
          ENDDO
        ! <get_string>
        ELSE
          IERR = UNKNOWN_VAR_ERROR
          ERR_MESS = 'UNKNOWN VARIABLE NAME : '//TRIM(VARNAME)
        ENDIF
!
      END SUBROUTINE GET_STRING_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Defines the value of a string variable of telemac3d
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@param[in,out] INST The instance
      !>@param[in] VARNAME Name of the variable to write
      !>@param[in] VALEUR The value to write in the variable
      !>@param[in] VALUELEN Length of the string
      !>@param[in] INDEX1 Index on the first dimension
      !>@param[in] INDEX2 Index on the second dimension
      !>@param[out] IERR 0 if subroutine successfull,
      !!                        error id otherwise
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE SET_STRING_T3D_D
     &     (INST, VARNAME, VALEUR, VALUELEN, INDEX1, INDEX2, IERR)
!
        TYPE(INSTANCE_T3D),    INTENT(INOUT) :: INST
        CHARACTER(LEN=T3D_VAR_LEN), INTENT(IN)  :: VARNAME
        INTEGER,               INTENT(IN) :: VALUELEN
        INTEGER,               INTENT(IN) :: INDEX1
        INTEGER,               INTENT(IN) :: INDEX2
        CHARACTER,             INTENT(IN) :: VALEUR(VALUELEN)
        INTEGER,               INTENT(OUT) :: IERR
!
        INTEGER I,J
!
        IERR = 0
        IF(TRIM(VARNAME).EQ.'MODEL.RESULTFILE') THEN
          I = INST%T3DRES
          DO J=1,VALUELEN
            INST%T3D_FILES(I)%NAME(J:J) = VALEUR(J)
          ENDDO
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RESULT2D') THEN
          I = INST%T3DHYD
          DO J=1,VALUELEN
            INST%T3D_FILES(I)%NAME(J:J) = VALEUR(J)
          ENDDO
        ! <set_string>
        ELSE
          IERR = UNKNOWN_VAR_ERROR
          ERR_MESS = 'UNKNOWN VARIABLE NAME : '//TRIM(VARNAME)
        ENDIF
!
      END SUBROUTINE SET_STRING_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Get a boolean variable from telemac3d
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@param[in,out] INST The instance
      !>@param[in] VARNAME Name of the variable to read
      !>@param[out] VALEUR Containis the read value
      !>@param[in] INDEX1 Index on the first dimension
      !>@param[in] INDEX2 Index on the second dimension
      !>@param[in] INDEX3 Index on the third dimension
      !>@param[out] IERR 0 if subroutine successfull,
      !!                        error id otherwise
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE GET_BOOLEAN_T3D_D
     &     (INST, VARNAME, VALEUR, INDEX1, INDEX2, INDEX3, IERR)
!
        TYPE(INSTANCE_T3D),    INTENT(IN) :: INST
        CHARACTER(LEN=T3D_VAR_LEN), INTENT(IN)  :: VARNAME
        INTEGER,               INTENT(OUT) :: VALEUR
        INTEGER,               INTENT(IN) :: INDEX1
        INTEGER,               INTENT(IN) :: INDEX2
        INTEGER,               INTENT(IN) :: INDEX3
        INTEGER,               INTENT(OUT) :: IERR
!
        IERR = 0
        VALEUR = 0
        IF(TRIM(VARNAME).EQ.'MODEL.DEBUG') THEN
          VALEUR = INST%DEBUG
        ! <get_boolean>
        ELSE
          IERR = UNKNOWN_VAR_ERROR
          ERR_MESS = 'UNKNOWN VARIABLE NAME : '//TRIM(VARNAME)
        ENDIF
!
      END SUBROUTINE GET_BOOLEAN_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Defines the value of a boolean variable of telemac3d
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@param[in,out] INST The instance
      !>@param[in] VARNAME Name of the variable to write
      !>@param[in] VALEUR The value to write in the variable
      !>@param[in] INDEX1 Index on the first dimension
      !>@param[in] INDEX2 Index on the second dimension
      !>@param[in] INDEX3 Index on the third dimension
      !>@param[out] IERR 0 if subroutine successfull,
      !!                        error id otherwise
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE SET_BOOLEAN_T3D_D
     &     (INST, VARNAME, VALEUR, INDEX1, INDEX2, INDEX3, IERR)
!
        TYPE(INSTANCE_T3D),    INTENT(INOUT) :: INST
        CHARACTER(LEN=T3D_VAR_LEN), INTENT(IN)  :: VARNAME
        INTEGER,               INTENT(IN) :: VALEUR
        INTEGER,               INTENT(IN) :: INDEX1
        INTEGER,               INTENT(IN) :: INDEX2
        INTEGER,               INTENT(IN) :: INDEX3
        INTEGER,               INTENT(OUT) :: IERR
!
        IERR = 0
        IF(TRIM(VARNAME).EQ.'MODEL.DEBUG') THEN
          INST%DEBUG = VALEUR
        ! <set_boolean>
        ELSE
          IERR = UNKNOWN_VAR_ERROR
          ERR_MESS = 'UNKNOWN VARIABLE NAME : '//TRIM(VARNAME)
        ENDIF
!
      END SUBROUTINE SET_BOOLEAN_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Get size informations on a variable of telemac3d
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@param[in] INST Instance
      !>@param[in] VARNAME Name of the variable
      !>@param[out] DIM1 Size of the first dimension
      !>@param[out] DIM2 Size of the second dimension
      !>@param[out] DIM3 Size of the third dimension
      !>@param[out] IERR 0 if subroutine successfull,
      !!                        error id otherwise
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE GET_VAR_SIZE_T3D_D
     &         (INST, VARNAME, DIM1, DIM2, DIM3, IERR)
!
        TYPE(INSTANCE_T3D),    INTENT(IN) :: INST
        CHARACTER(LEN=T3D_VAR_LEN), INTENT(IN)  :: VARNAME
        INTEGER,               INTENT(OUT) :: DIM1
        INTEGER,               INTENT(OUT) :: DIM2
        INTEGER,               INTENT(OUT) :: DIM3
        INTEGER,               INTENT(OUT) :: IERR
!
        INTEGER :: TWODIM(2)
        IERR = 0
        DIM1 = 0
        DIM2 = 0
        DIM3 = 0
!
        IF(TRIM(VARNAME).EQ.'MODEL.HBOR') THEN
          DIM1 = INST%HBOR%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBOR2D') THEN
          DIM1 = INST%UBOR2D%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBOR2D') THEN
          DIM1 = INST%VBOR2D%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORF') THEN
          DIM1 = INST%UBORF%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORF') THEN
          DIM1 = INST%VBORF%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORF') THEN
          DIM1 = INST%WBORF%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORL') THEN
          DIM1 = INST%UBORL%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORL') THEN
          DIM1 = INST%VBORL%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORL') THEN
          DIM1 = INST%WBORL%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORS') THEN
          DIM1 = INST%UBORS%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORS') THEN
          DIM1 = INST%VBORS%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORS') THEN
          DIM1 = INST%WBORS%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XNEBOR') THEN
          DIM1 = INST%MESH2D%XNEBOR%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.YNEBOR') THEN
          DIM1 = INST%MESH2D%YNEBOR%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WATERDEPTH') THEN
          DIM1 = INST%H%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.INCWATERDEPTH') THEN
          DIM1 = INST%DH%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TA') THEN
          DIM1 = INST%TA%N
          DIM2 = INST%TA%ADR(1)%P%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYU') THEN
          DIM1 = INST%U%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYV') THEN
          DIM1 = INST%V%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYW') THEN
          DIM1 = INST%W%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.AK') THEN
          DIM1 = INST%AK%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.AKN') THEN
          DIM1 = INST%AKN%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EP') THEN
          DIM1 = INST%EP%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EPN') THEN
          DIM1 = INST%EPN%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RUGOF') THEN
          DIM1 = INST%RUGOF%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WINDX') THEN
          DIM1 = INST%WINDX%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WINDY') THEN
          DIM1 = INST%WINDY%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'WAQTEL.TAIR') THEN
          DIM1 = INST%TAIR%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.X') THEN
          DIM1 = INST%MESH3D%X%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.Y') THEN
          DIM1 = INST%MESH3D%Y%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NBOR') THEN
          DIM1 = INST%MESH3D%NBOR%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NUMLIQ') THEN
          DIM1 = INST%NUMLIQ%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIHBOR') THEN
          DIM1 = INST%LIHBOR%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOF') THEN
          DIM1 = INST%LIUBOF%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOF') THEN
          DIM1 = INST%LIVBOF%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOF') THEN
          DIM1 = INST%LIWBOF%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOL') THEN
          DIM1 = INST%LIUBOL%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOL') THEN
          DIM1 = INST%LIVBOL%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOL') THEN
          DIM1 = INST%LIWBOL%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOS') THEN
          DIM1 = INST%LIUBOS%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOS') THEN
          DIM1 = INST%LIVBOS%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOS') THEN
          DIM1 = INST%LIWBOS%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.KP1BOR') THEN
          DIM1 = INST%MESH2D%KP1BOR%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.COTIMP') THEN
          DIM1 = SIZE(INST%COTIMP)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DEBIMP') THEN
          DIM1 = SIZE(INST%DEBIMP)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.QSCE') THEN
          DIM1 = SIZE(INST%QSCE)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.USCE') THEN
          DIM1 = SIZE(INST%USCE)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VSCE') THEN
          DIM1 = SIZE(INST%VSCE)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WSCE') THEN
          DIM1 = SIZE(INST%WSCE)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XSCE') THEN
          DIM1 = SIZE(INST%XSCE)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.YSCE') THEN
          DIM1 = SIZE(INST%YSCE)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.ZSCE') THEN
          DIM1 = SIZE(INST%ZSCE)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BETAC') THEN
          DIM1 = SIZE(INST%BETAC)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TRAC0') THEN
          DIM1 = SIZE(INST%TRAC0)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.T0AC') THEN
          DIM1 = SIZE(INST%T0AC)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TRACER') THEN
          DIM1 = SIZE(INST%TRACER)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TASCE') THEN
          DIM1 = INST%MAXSCE
          DIM2 = INST%MAXTRA
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VITIMP') THEN
          DIM1 = SIZE(INST%VITIMP)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLUX_BOUNDARIES') THEN
          DIM1 = SIZE(INST%FLUX_BOUNDARIES)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RESULTFILE') THEN
          DIM1 = 250
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RESULT2D') THEN
          DIM1 = 250
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EQUATION') THEN
          DIM1 = 20
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BCFILE') THEN
          DIM1 = 250
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.GEOMETRYFILE') THEN
          DIM1 = 250
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BND_TIDE')THEN
          DIM1 = SIZE(INST%BND_TIDE)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.IKLE')THEN
          DIM1 = INST%MESH3D%IKLE%DIM2
          DIM2 = INST%MESH3D%IKLE%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NACHB')THEN
          DIM1 = INST%NPTIR
          DIM2 = INST%NBMAXNSHARE
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.KNOLG') THEN
          DIM1 = INST%MESH3D%KNOLG%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EVOLUTION') THEN
          DIM1 = INST%E%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BOTTOMELEVATION') THEN
          DIM1 = INST%ZF%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLOWRATEQ') THEN
          DIM1 = INST%Q%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DCLA') THEN
          DIM1 = SIZE(INST%DCLA)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.SHIELDS') THEN
          DIM1 = SIZE(INST%AC)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XWC') THEN
          DIM1 = SIZE(INST%XWC)
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.QBOR') THEN
          DIM1 = INST%QBOR%N
          DIM2 = INST%QBOR%ADR(1)%P%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EBOR') THEN
          DIM1 = INST%EBOR%N
          DIM2 = INST%EBOR%ADR(1)%P%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLBOR') THEN
          DIM1 = INST%FLBOR%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TOB') THEN
          DIM1 = INST%TOB%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.CLU') THEN
          DIM1 = INST%CLU%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.CLV') THEN
          DIM1 = INST%CLV%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIQBOR') THEN
          DIM1 = INST%LIQBOR%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIEBOR') THEN
          DIM1 = INST%LIEBOR%DIM1
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.PARTHENIADES') THEN
          TWODIM = SHAPE(INST%PARTHENIADES)
          DIM1 = TWODIM(1)
          DIM2 = TWODIM(2)
        ! <get_var_size>
        ENDIF
!
      END SUBROUTINE GET_VAR_SIZE_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Get the information on the type of variable
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@param[in] VARNAME Name of the varaible
      !>@param[out] VARTYPE Type of the varaible (INTEGER, DOUBLE,
      !                     BOOLEAN, STRING)
      !>@param[out] READONLY True if the varaible cannot be modified
      !>@param[out] NDIM Name of the varaible
      !>@param[out] IENT 1 if the numbering is on point
      !>@param[out] JENT 1 if the numbering is on point
      !>@param[out] KENT 1 if the numbering is on point
      !>@param[out] GETPOS Postion after which the get is posible
      !!                        on the variable
      !>@param[out] SETPOS Postion after which the set is posible
      !!                        on the variable
      !>@param[out] IERR 0 if subroutine successfull,
      !!                        error id otherwise
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE GET_VAR_TYPE_T3D_D
     &        (VARNAME, VARTYPE, READONLY, NDIM,IENT,JENT,KENT,
     &         GETPOS,SETPOS,IERR)
!
        CHARACTER(LEN=T3D_VAR_LEN),  INTENT(IN)  :: VARNAME
        CHARACTER(LEN=T3D_TYPE_LEN), INTENT(OUT) :: VARTYPE
        LOGICAL,                     INTENT(OUT) :: READONLY
        INTEGER,                     INTENT(OUT) :: NDIM
        INTEGER,                     INTENT(OUT) :: IERR
        INTEGER,                     INTENT(OUT) :: IENT
        INTEGER,                     INTENT(OUT) :: JENT
        INTEGER,                     INTENT(OUT) :: KENT
        INTEGER,                     INTENT(OUT) :: GETPOS
        INTEGER,                     INTENT(OUT) :: SETPOS
!
        IERR = 0
        VARTYPE = ''
        READONLY = .TRUE.
        NDIM = 0
        IENT = 0
        JENT = 0
        KENT = 0
        GETPOS = NO_POSITION
        SETPOS = NO_POSITION
!
        IF(TRIM(VARNAME).EQ.'MODEL.AT') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RHO0') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'WAQTEL.C_ATMOS') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'WAQTEL.CP_EAU') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DUREE') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BCFILE') THEN
          VARTYPE = 'STRING'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_READ_CASE_POS
          SETPOS = RUN_READ_CASE_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.GRAPH_PERIOD') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_READ_CASE_POS
          SETPOS = RUN_READ_CASE_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LISTIN_PERIOD') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_READ_CASE_POS
          SETPOS = RUN_READ_CASE_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DEBUG') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_SET_CONFIG_POS
          SETPOS = RUN_SET_CONFIG_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BND_TIDE') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BETAC') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TRAC0') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.T0AC') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TRACER') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TASCE') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 2
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.HBOR') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NBOR') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBOR2D') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBOR2D') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORF') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORF') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORF') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORL') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORL') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORL') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.UBORS') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VBORS') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WBORS') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIHBOR') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NUMLIQ') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOF') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOF') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOF') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOL') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOL') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOL') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIUBOS') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIVBOS') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIWBOS') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.KP1BOR') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.IKLE') THEN
          VARTYPE = 'INTEGER'
          READONLY = .TRUE.
          NDIM = 2
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NACHB') THEN
          VARTYPE = 'INTEGER'
          READONLY = .TRUE.
          NDIM = 2
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.KNOLG') THEN
          VARTYPE = 'INTEGER'
          READONLY = .TRUE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TA') THEN
          VARTYPE = 'DOUBLE_BLOCK'
          READONLY = .FALSE.
          NDIM = 2
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XNEBOR') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.YNEBOR') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WATERDEPTH') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.INCWATERDEPTH') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYU') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYV') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VELOCITYW') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.AK') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.AKN') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EP') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EPN') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RUGOF') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WINDX') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WINDY') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'WAQTEL.TAIR') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.X') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.Y') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLUX_BOUNDARIES') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          IENT = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.COTIMP') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DEBIMP') THEN
          VARTYPE =  'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.QSCE') THEN
          VARTYPE =  'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.USCE') THEN
          VARTYPE =  'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VSCE') THEN
          VARTYPE =  'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.WSCE') THEN
          VARTYPE =  'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XSCE') THEN
          VARTYPE =  'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.YSCE') THEN
          VARTYPE =  'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.ZSCE') THEN
          VARTYPE =  'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TASCE') THEN
          VARTYPE =  'DOUBLE'
          READONLY = .FALSE.
          NDIM = 2
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.VITIMP') THEN
          VARTYPE =  'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_TIMESTEP_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RESULTFILE') THEN
          VARTYPE = 'STRING'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.RESULT2D') THEN
          VARTYPE = 'STRING'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.GEOMETRYFILE') THEN
          VARTYPE = 'STRING'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NPOIN') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NPOIN2') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NPLAN') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NTRAC') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.MAXTRA') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.MAXSCE') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NELEM') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NELMAX') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NPTFR') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NPTFR2') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BND_COLOR') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TIDALRANGE') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TIDALVELOCITY') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.SEALEVEL') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.PRANDTL') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_ALLOCATION_POS
          SETPOS = RUN_ALLOCATION_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NTIMESTEPS') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_READ_CASE_POS
          SETPOS = RUN_READ_CASE_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LT') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = RUN_READ_CASE_POS
          SETPOS = RUN_READ_CASE_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EQUATION') THEN
          VARTYPE = 'STRING'
          READONLY = .TRUE.
          NDIM = 1
          GETPOS = RUN_READ_CASE_POS
          SETPOS = RUN_READ_CASE_POS
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EVOLUTION') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.BOTTOMELEVATION') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLOWRATEQ') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.DCLA') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.SHIELDS') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.XWC') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.QBOR') THEN
          VARTYPE = ''
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.EBOR') THEN
          VARTYPE = ''
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.FLBOR') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.TOB') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.CLU') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.CLV') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIQBOR') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.LIEBOR') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NSICLA') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.NOMBLAY') THEN
          VARTYPE = 'INTEGER'
          READONLY = .FALSE.
          NDIM = 0
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.CONCENTRATION') THEN
          VARTYPE = ''
          READONLY = .FALSE.
          NDIM = 1
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ELSE IF(TRIM(VARNAME).EQ.'MODEL.PARTHENIADES') THEN
          VARTYPE = 'DOUBLE'
          READONLY = .FALSE.
          NDIM = 2
          GETPOS = NO_POSITION
          SETPOS = NO_POSITION
        ! <get_var_type>
        ELSE
          IERR = UNKNOWN_VAR_ERROR
          ERR_MESS = 'UNKNOWN VARIABLE NAME : '//TRIM(VARNAME)
        ENDIF
!
      END SUBROUTINE GET_VAR_TYPE_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Get the description of the ith variable
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@param[in] I Number of the variable
      !>@param[in] VAR_LEN Size of varname
      !>@param[in] INFO_LEN Size of varinfo
      !>@param[out] VARNAME Name of the variable
      !>@param[out] VARINFO Description of the variable
      !>@param[out] IERR 0 if subroutine successfull,
      !!                        error id otherwise
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE GET_VAR_INFO_T3D_D(I, VAR_LEN, INFO_LEN,
     &                              VARNAME, VARINFO, IERR)
!
        INTEGER, INTENT(IN) :: I
        INTEGER, INTENT(IN) :: VAR_LEN
        INTEGER, INTENT(IN) :: INFO_LEN
        CHARACTER, INTENT(OUT) :: VARNAME(VAR_LEN)
        CHARACTER, INTENT(OUT) :: VARINFO(INFO_LEN)
        INTEGER, INTENT(OUT) :: IERR
!
        INTEGER :: J
!
        IERR = 0

        DO J=1,T3D_VAR_LEN
          VARNAME(J:J) = VNAME_T3D(I)(J:J)
        ENDDO
        DO J=1,T3D_INFO_LEN
          VARINFO(J:J) = VINFO_T3D(I)(J:J)
        ENDDO

        RETURN
      END SUBROUTINE GET_VAR_INFO_T3D_D
!
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@brief Buils the description of each variable
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      !>@param[out] IERR 0 if subroutine successfull,
      !!                        error id otherwise
      !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      SUBROUTINE SET_VAR_LIST_T3D_D(IERR)
!
        INTEGER, INTENT(OUT) :: IERR
!
        INTEGER :: I
!
        I=0
        IERR = 0
        IF(.NOT.ALLOCATED(VNAME_T3D)) THEN
          ALLOCATE(VNAME_T3D(NB_VAR_T3D),STAT=IERR)
          IF(IERR.NE.0) RETURN
          ALLOCATE(VINFO_T3D(NB_VAR_T3D),STAT=IERR)
          IF(IERR.NE.0) RETURN
!
          I = I + 1
          VNAME_T3D(I) = 'MODEL.AT'
          VINFO_T3D(I) = 'CURRENT TIME'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.RHO0'
          VINFO_T3D(I) = 'REFERENCE WATER DENSITY'
          I = I + 1
          VNAME_T3D(I) = 'WAQTEL.C_ATMOS'
          VINFO_T3D(I) = 'ATMOSPHERE-WATER EXCHANGE MODEL COEFFICIENT'
          I = I + 1
          VNAME_T3D(I) = 'WAQTEL.CP_EAU'
          VINFO_T3D(I) = 'WATER SPECIFIC HEAT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.DUREE'
          VINFO_T3D(I) = 'DURATION'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.BCFILE'
          VINFO_T3D(I) = 'BOUNDARY CONDITION FILE NAME'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.BND_TIDE'
          VINFO_T3D(I) = 'OPTION FOR TIDAL BOUNDARY CONDITIONS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.COTIMP'
          VINFO_T3D(I) = 'PRESCRIBED ELEVATION ON BOUNDARY'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.VITIMP'
          VINFO_T3D(I) = 'PRESCRIBED VELOCITY ON BOUNDARY'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.DEBIMP'
          VINFO_T3D(I) = 'PRESCRIBED DISCHARGE ON BOUNDARY'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.QSCE'
          VINFO_T3D(I) = 'SOURCE DISCHARGE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.USCE'
          VINFO_T3D(I) = 'SOURCE VELOCITY ALONG X AXIS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.VSCE'
          VINFO_T3D(I) = 'SOURCE VELOCITY ALONG Y AXIS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.WSCE'
          VINFO_T3D(I) = 'SOURCE VELOCITY ALONG Z AXIS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.XSCE'
          VINFO_T3D(I) = 'COORDINATE X OF SOURCE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.YSCE'
          VINFO_T3D(I) = 'COORDINATE Y OF SOURCE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.ZSCE'
          VINFO_T3D(I) = 'SOURCE ELEVATION'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.BETAC'
          VINFO_T3D(I) = 'BETA EXPANSION COEFFICIENT FOR TRACERS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.TRAC0'
          VINFO_T3D(I) = 'INITIAL VALUES OF TRACERS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.T0AC'
          VINFO_T3D(I) = 'REFERENCE CONCENTRATION OF TRACERS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.TRACER'
          VINFO_T3D(I) = 'VALUES OF TRACERS AT LIQUID BOUNDARIES'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.TASCE'
          VINFO_T3D(I) = 'TRACER SOURCE VALUE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.DEBUG'
          VINFO_T3D(I) = 'ACTIVATING DEBUG MODE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.FLUX_BOUNDARIES'
          VINFO_T3D(I) = 'FLUX AT BOUNDARIES'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.GEOMETRYFILE'
          VINFO_T3D(I) = 'NAME OF THE GEOMERY FILE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.GRAPH_PERIOD'
          VINFO_T3D(I) = 'GRAPHICAL OUTPUT PERIOD'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.HBOR'
          VINFO_T3D(I) = 'BOUNDARY VALUE ON H FOR EACH BOUNDARY POINT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.IKLE'
          VINFO_T3D(I) = 'CONNECTIVITY TABLE BETWEEN ELEMENT AND NODES'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.NACHB'
          VINFO_T3D(I) = 'NUMBERS OF PROC CONTAINING A GIVEN POINT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.KNOLG'
          VINFO_T3D(I) =
     &         'GIVES THE INITIAL GLOBAL NUMBER OF A LOCAL POINT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.INCWATERDEPTH'
          VINFO_T3D(I) = 'INCREASE IN THE DEPTH OF THE WATER'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.LIHBOR'
          VINFO_T3D(I) = 'BOUNDARY TYPE ON H FOR EACH BOUNDARY POINT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.LISTIN_PERIOD'
          VINFO_T3D(I) = 'LISTING OUTPUT PERIOD'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.LIUBOF'
          VINFO_T3D(I) = 'TYPE OF BOUNDARY CONDITIONS FOR U ON THE BOT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.LIVBOF'
          VINFO_T3D(I) = 'TYPE OF BOUNDARY CONDITIONS FOR V ON THE BOT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.LIWBOF'
          VINFO_T3D(I) = 'TYPE OF BOUNDARY CONDITIONS FOR W ON THE BOT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.LIUBOL'
          VINFO_T3D(I) = 'TYPE OF BOUNDARY COND FOR U ON THE LAT BOUND'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.LIVBOL'
          VINFO_T3D(I) = 'TYPE OF BOUNDARY COND FOR V ON THE LAT BOUND'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.LIWBOL'
          VINFO_T3D(I) = 'TYPE OF BOUNDARY COND FOR W ON THE LAT BOUND'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.LIUBOS'
          VINFO_T3D(I) = 'TYPE OF BOUNDARY CONDITIONS FOR U AT THE FS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.LIVBOS'
          VINFO_T3D(I) = 'TYPE OF BOUNDARY CONDITIONS FOR V AT THE FS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.LIWBOS'
          VINFO_T3D(I) = 'TYPE OF BOUNDARY CONDITIONS FOR W AT THE FS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.KP1BOR'
          VINFO_T3D(I) =
     &           'POINTS FOLLOWING AND PRECEDING A BOUNDARY POINT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.LT'
          VINFO_T3D(I) = 'CURRENT TIME STEP'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.TA'
          VINFO_T3D(I) = 'TRACER VALUE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.NBOR'
          VINFO_T3D(I) = 'GLOBAL NUMBER OF BOUNDARY POINTS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.NELEM'
          VINFO_T3D(I) = 'NUMBER OF ELEMENT IN THE MESH'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.NELMAX'
          VINFO_T3D(I) = 'MAXIMUM NUMBER OF ELEMENTS ENVISAGED'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.NPOIN'
          VINFO_T3D(I) = 'NUMBER OF POINT IN THE MESH'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.NPOIN2'
          VINFO_T3D(I) = 'NUMBER OF POINT IN THE 2D MESH'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.NPLAN'
          VINFO_T3D(I) = 'NUMBER OF PLANE IN THE 3D MESH'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.NTRAC'
          VINFO_T3D(I) = 'NUMBER OF TRACERS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.MAXTRA'
          VINFO_T3D(I) = 'MAXIMUM NUMBER OF TRACERS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.MAXSCE'
          VINFO_T3D(I) = 'MAXIMUM NUMBER OF SOURCES'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.NPTFR'
          VINFO_T3D(I) = 'NUMBER OF BOUNDARY POINTS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.NPTFR2'
          VINFO_T3D(I) = 'NUMBER OF BOUNDARY POINTS IN MESH2D'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.BND_COLOR'
          VINFO_T3D(I) = 'BOUNDARY_COLOUR INFORMATION'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.NTIMESTEPS'
          VINFO_T3D(I) = 'NUMBER OF TIME STEPS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.NUMLIQ'
          VINFO_T3D(I) = 'LIQUID BOUNDARY NUMBERS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.RESULTFILE'
          VINFO_T3D(I) = 'NAME OF THE RESULT FILE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.RESULT2D'
          VINFO_T3D(I) = 'NAME OF THE 2D RESULT FILE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.SEALEVEL'
          VINFO_T3D(I) = 'COEFFICIENT TO CALIBRATE SEA LEVEL'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.PRANDTL'
          VINFO_T3D(I) = 'PRANDTL NUMBER'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.TIDALRANGE'
          VINFO_T3D(I) = 'COEFFICIENT TO CALIBRATE TIDAL RANGE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.TIDALVELOCITY'
          VINFO_T3D(I) = 'COEFFICIENT TO CALIBRATE TIDAL VELOCITY'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.UBOR2D'
          VINFO_T3D(I) = 'BOUNDARY VALUE ON U FOR EACH BOUNDARY POINT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.VBOR2D'
          VINFO_T3D(I) = 'BOUNDARY VALUE ON V FOR EACH BOUNDARY POINT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.UBORF'
          VINFO_T3D(I) = 'PRESCRIBED VELOCITY U ON THE BOTTOM'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.VBORF'
          VINFO_T3D(I) = 'PRESCRIBED VELOCITY V ON THE BOTTOM'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.WBORF'
          VINFO_T3D(I) = 'PRESCRIBED VELOCITY W ON THE BOTTOM'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.UBORL'
          VINFO_T3D(I) = 'PRESCRIBED VELOCITY U ON THE LATERAL BOUNDARY'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.VBORL'
          VINFO_T3D(I) = 'PRESCRIBED VELOCITY V ON THE LATERAL BOUNDARY'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.WBORL'
          VINFO_T3D(I) = 'PRESCRIBED VELOCITY W ON THE LATERAL BOUNDARY'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.UBORS'
          VINFO_T3D(I) = 'PRESCRIBED VELOCITY U AT THE FREE SURFACE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.VBORS'
          VINFO_T3D(I) = 'PRESCRIBED VELOCITY V AT THE FREE SURFACE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.WBORS'
          VINFO_T3D(I) = 'PRESCRIBED VELOCITY W AT THE FREE SURFACE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.VELOCITYU'
          VINFO_T3D(I) = 'VELOCITY ON U'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.VELOCITYV'
          VINFO_T3D(I) = 'VELOCITY ON V'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.VELOCITYW'
          VINFO_T3D(I) = 'VELOCITY ON W'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.AK'
          VINFO_T3D(I) = 'TURBULENT KINETIC ENERGY K'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.AKN'
          VINFO_T3D(I) = 'TURBULENT KINETIC ENERGY K AT TN'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.EP'
          VINFO_T3D(I) = 'TURBULENT DISSIPATION EPS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.EPN'
          VINFO_T3D(I) = 'TURBULENT DISSIPATION EPS AT TN'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.RUGOF'
          VINFO_T3D(I) = 'FRICTION COEFFICIENT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.WINDX'
          VINFO_T3D(I) = 'VELOCITY X OF THE WIND'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.WINDY'
          VINFO_T3D(I) = 'VELOCITY Y OF THE WIND'
          I = I + 1
          VNAME_T3D(I) = 'WAQTEL.TAIR'
          VINFO_T3D(I) = 'AIR TEMPERATURE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.WATERDEPTH'
          VINFO_T3D(I) = 'WATER DEPTH'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.X'
          VINFO_T3D(I) = 'X COORDINATES FOR EACH POINT OF THE MESH'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.XNEBOR'
          VINFO_T3D(I) = 'NORMAL X TO 1D BOUNDARY POINTS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.Y'
          VINFO_T3D(I) = 'Y COORDINATES FOR EACH POINT OF THE MESH'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.YNEBOR'
          VINFO_T3D(I) = 'NORMAL Y TO 1D BOUNDARY POINTS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.EQUATION'
          VINFO_T3D(I) = 'NAME OF THE EQUATION USED'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.BOTTOMELEVATION'
          VINFO_T3D(I) = 'BOTTOM ELEVATION'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.FLOWRATEQ'
          VINFO_T3D(I) = 'FLOW RATE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.QBOR'
          VINFO_T3D(I) = 'BOUNDARY VALUE ON Q FOR EACH BOUNDARY POINT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.EBOR'
          VINFO_T3D(I) = 'BOUNDARY VALUE ON E FOR EACH BOUNDARY POINT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.FLBOR'
          VINFO_T3D(I) = 'BOUNDARY VALUE ON ZF FOR EACH BOUNDARY POINT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.TOB'
          VINFO_T3D(I) = 'SHEAR STRESS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.CLU'
          VINFO_T3D(I) = 'BOUNDARY TYPE ON U FOR EACH BOUNDARY POINT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.CLV'
          VINFO_T3D(I) = 'BOUNDARY TYPE ON V FOR EACH BOUNDARY POINT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.LIQBOR'
          VINFO_T3D(I) = 'BOUNDARY TYPE ON Q FOR EACH BOUNDARY POINT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.LIEBOR'
          VINFO_T3D(I) = 'BOUNDARY TYPE ON E FOR EACH BOUNDARY POINT'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.NSICLA'
          VINFO_T3D(I) = 'NUMBER OF SIZE-CLASSES OF BED MATERIAL'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.NOMBLAY'
          VINFO_T3D(I) = 'NUMBER OF LAYER IN THE BED'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.CONCENTRATION'
          VINFO_T3D(I) = 'CONCENTRATION AT TIME N'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.EVOLUTION'
          VINFO_T3D(I) = 'BED EVOLUTION'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.PARTHENIADES'
          VINFO_T3D(I) = 'PARTHENIADES EROSION COEFICIANT FOR EACH '//
     &                   'BED LAYER FOR EADCH CLASS'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.DCLA'
          VINFO_T3D(I) = 'MEDIAN GRAIN SIZE'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.SHIELDS'
          VINFO_T3D(I) = 'CRITICAL SHIELDS PARAMETER'
          I = I + 1
          VNAME_T3D(I) = 'MODEL.XWC'
          VINFO_T3D(I) = 'SETTLING VELOCITY'
          ! <set_var_list>
          IF(I.NE.NB_VAR_T3D) THEN
            IERR = INCREASE_NB_VAR_T3D_ERROR
            RETURN
          ENDIF
        ENDIF
!
      END SUBROUTINE SET_VAR_LIST_T3D_D
!
      END MODULE API_HANDLE_VAR_T3D
