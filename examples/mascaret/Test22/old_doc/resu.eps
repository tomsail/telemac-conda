%!PS-Adobe-2.0
%%Title: resu.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Mon Aug 31 16:44:24 2009
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 770
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -53 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Helvetica) findfont 160 scalefont setfont
1.000 UL
LTb
912 480 M
63 0 V
5953 0 R
-63 0 V
stroke
816 480 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 7000)]
] -53.3 MRshow
grestore
1.000 UL
LTb
912 1354 M
63 0 V
5953 0 R
-63 0 V
stroke
816 1354 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 7500)]
] -53.3 MRshow
grestore
1.000 UL
LTb
912 2227 M
63 0 V
5953 0 R
-63 0 V
stroke
816 2227 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 8000)]
] -53.3 MRshow
grestore
1.000 UL
LTb
912 3101 M
63 0 V
5953 0 R
-63 0 V
stroke
816 3101 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 8500)]
] -53.3 MRshow
grestore
1.000 UL
LTb
912 3974 M
63 0 V
5953 0 R
-63 0 V
stroke
816 3974 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 9000)]
] -53.3 MRshow
grestore
1.000 UL
LTb
912 4848 M
63 0 V
5953 0 R
-63 0 V
stroke
816 4848 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 9500)]
] -53.3 MRshow
grestore
1.000 UL
LTb
912 480 M
0 63 V
0 4305 R
0 -63 V
stroke
912 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (-2000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
1664 480 M
0 63 V
0 4305 R
0 -63 V
stroke
1664 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 0)]
] -53.3 MCshow
grestore
1.000 UL
LTb
2416 480 M
0 63 V
0 4305 R
0 -63 V
stroke
2416 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 2000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
3168 480 M
0 63 V
0 4305 R
0 -63 V
stroke
3168 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 4000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
3920 480 M
0 63 V
0 4305 R
0 -63 V
stroke
3920 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 6000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
4672 480 M
0 63 V
0 4305 R
0 -63 V
stroke
4672 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 8000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
5424 480 M
0 63 V
0 4305 R
0 -63 V
stroke
5424 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 10000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
6176 480 M
0 63 V
0 4305 R
0 -63 V
stroke
6176 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 12000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
6928 480 M
0 63 V
0 4305 R
0 -63 V
stroke
6928 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 14000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
912 480 M
6016 0 V
0 4368 V
-6016 0 V
912 480 L
LTb
160 2664 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 160.0 0.0 true true 0 (q \(m)]
[(Helvetica) 128.0 80.0 true true 0 (3)]
[(Helvetica) 160.0 0.0 true true 0 (/s\))]
] -69.3 MCshow
grestore
grestore
LTb
3920 80 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (x \(m\))]
] -53.3 MCshow
grestore
1.000 UP
1.000 UP
1.000 UL
LTa
LTb
6193 4705 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (debit mineur)]
] -53.3 MRshow
grestore
LTa
6289 4705 M
447 0 V
1542 4149 M
1664 1433 L
94 616 V
94 625 V
94 63 V
94 127 V
94 -72 V
94 11 V
94 18 V
94 7 V
94 -848 V
2604 604 L
94 180 V
94 168 V
94 409 V
94 240 V
75 154 V
75 147 V
76 -345 V
75 -498 V
75 587 V
75 2230 V
75 -469 V
76 -507 V
94 -183 V
94 192 V
94 -34 V
94 1018 V
75 -484 V
75 6 V
94 -432 V
94 -695 V
75 443 V
75 294 V
76 272 V
94 55 V
94 62 V
94 3 V
94 31 V
94 -16 V
94 128 V
75 7 V
75 34 V
75 44 V
94 35 V
94 299 V
94 -235 V
94 16 V
113 125 V
75 -127 V
75 -48 V
76 25 V
94 92 V
94 108 V
112 73 V
94 -131 V
94 320 V
1542 4149 Pls
1664 1433 Pls
1758 2049 Pls
1852 2674 Pls
1946 2737 Pls
2040 2864 Pls
2134 2792 Pls
2228 2803 Pls
2322 2821 Pls
2416 2828 Pls
2510 1980 Pls
2604 604 Pls
2698 784 Pls
2792 952 Pls
2886 1361 Pls
2980 1601 Pls
3055 1755 Pls
3130 1902 Pls
3206 1557 Pls
3281 1059 Pls
3356 1646 Pls
3431 3876 Pls
3506 3407 Pls
3582 2900 Pls
3676 2717 Pls
3770 2909 Pls
3864 2875 Pls
3958 3893 Pls
4033 3409 Pls
4108 3415 Pls
4202 2983 Pls
4296 2288 Pls
4371 2731 Pls
4446 3025 Pls
4522 3297 Pls
4616 3352 Pls
4710 3414 Pls
4804 3417 Pls
4898 3448 Pls
4992 3432 Pls
5086 3560 Pls
5161 3567 Pls
5236 3601 Pls
5311 3645 Pls
5405 3680 Pls
5499 3979 Pls
5593 3744 Pls
5687 3760 Pls
5800 3885 Pls
5875 3758 Pls
5950 3710 Pls
6026 3735 Pls
6120 3827 Pls
6214 3935 Pls
6326 4008 Pls
6420 3877 Pls
6514 4197 Pls
6512 4705 Pls
1.000 UL
LTb
LTb
6193 4545 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (debit total)]
] -53.3 MRshow
grestore
LTb
6289 4545 M
447 0 V
1542 4149 M
122 0 V
94 77 V
94 6 V
94 -32 V
94 -1 V
94 3 V
94 -2 V
94 8 V
94 0 V
94 -55 V
94 -14 V
94 57 V
94 -2 V
94 39 V
94 -1 V
75 -12 V
75 -1 V
76 -57 V
75 -7 V
75 155 V
75 -84 V
75 -23 V
76 0 V
94 -3 V
94 -4 V
94 16 V
94 -11 V
75 3 V
75 -2 V
94 -22 V
94 -27 V
75 77 V
75 -5 V
76 -9 V
94 -12 V
94 0 V
94 -1 V
94 -1 V
94 4 V
94 -2 V
75 -1 V
75 0 V
75 0 V
94 -1 V
94 -4 V
94 9 V
94 -8 V
113 6 V
75 0 V
75 -2 V
76 0 V
94 0 V
94 0 V
112 -3 V
94 5 V
94 0 V
1.000 UL
LTb
912 480 M
6016 0 V
0 4368 V
-6016 0 V
912 480 L
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
%%Pages: 1
