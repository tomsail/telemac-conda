%!PS-Adobe-2.0
%%Title: perm1.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Mon Aug 31 15:49:58 2009
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 770
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -53 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Helvetica) findfont 160 scalefont setfont
1.000 UL
LTb
720 480 M
63 0 V
6145 0 R
-63 0 V
stroke
624 480 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (-2)]
] -53.3 MRshow
grestore
1.000 UL
LTb
720 877 M
63 0 V
6145 0 R
-63 0 V
stroke
624 877 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 0)]
] -53.3 MRshow
grestore
1.000 UL
LTb
720 1274 M
63 0 V
6145 0 R
-63 0 V
stroke
624 1274 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 2)]
] -53.3 MRshow
grestore
1.000 UL
LTb
720 1671 M
63 0 V
6145 0 R
-63 0 V
stroke
624 1671 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 4)]
] -53.3 MRshow
grestore
1.000 UL
LTb
720 2068 M
63 0 V
6145 0 R
-63 0 V
stroke
624 2068 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 6)]
] -53.3 MRshow
grestore
1.000 UL
LTb
720 2465 M
63 0 V
6145 0 R
-63 0 V
stroke
624 2465 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 8)]
] -53.3 MRshow
grestore
1.000 UL
LTb
720 2863 M
63 0 V
6145 0 R
-63 0 V
stroke
624 2863 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 10)]
] -53.3 MRshow
grestore
1.000 UL
LTb
720 3260 M
63 0 V
6145 0 R
-63 0 V
stroke
624 3260 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 12)]
] -53.3 MRshow
grestore
1.000 UL
LTb
720 3657 M
63 0 V
6145 0 R
-63 0 V
stroke
624 3657 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 14)]
] -53.3 MRshow
grestore
1.000 UL
LTb
720 4054 M
63 0 V
6145 0 R
-63 0 V
stroke
624 4054 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 16)]
] -53.3 MRshow
grestore
1.000 UL
LTb
720 4451 M
63 0 V
6145 0 R
-63 0 V
stroke
624 4451 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 18)]
] -53.3 MRshow
grestore
1.000 UL
LTb
720 4848 M
63 0 V
6145 0 R
-63 0 V
stroke
624 4848 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 20)]
] -53.3 MRshow
grestore
1.000 UL
LTb
720 480 M
0 63 V
0 4305 R
0 -63 V
stroke
720 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (-2000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
1496 480 M
0 63 V
0 4305 R
0 -63 V
stroke
1496 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 0)]
] -53.3 MCshow
grestore
1.000 UL
LTb
2272 480 M
0 63 V
0 4305 R
0 -63 V
stroke
2272 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 2000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
3048 480 M
0 63 V
0 4305 R
0 -63 V
stroke
3048 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 4000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
3824 480 M
0 63 V
0 4305 R
0 -63 V
stroke
3824 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 6000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
4600 480 M
0 63 V
0 4305 R
0 -63 V
stroke
4600 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 8000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
5376 480 M
0 63 V
0 4305 R
0 -63 V
stroke
5376 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 10000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
6152 480 M
0 63 V
0 4305 R
0 -63 V
stroke
6152 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 12000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
6928 480 M
0 63 V
0 4305 R
0 -63 V
stroke
6928 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 ( 14000)]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
720 480 M
6208 0 V
0 4368 V
-6208 0 V
720 480 L
LTb
160 2664 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 160.0 0.0 true true 0 (z \(m\))]
] -53.3 MCshow
grestore
grestore
LTb
3824 80 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (x \(m\))]
] -53.3 MCshow
grestore
1.000 UP
1.000 UL
LTb
LTb
6193 4705 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (fond)]
] -53.3 MRshow
grestore
LTb
6289 4705 M
447 0 V
1370 2227 M
126 -69 V
97 31 V
97 32 V
97 -307 V
97 -306 V
97 224 V
97 224 V
97 14 V
97 14 V
97 -304 V
97 -303 V
97 147 V
97 147 V
97 157 V
97 158 V
78 7 V
77 7 V
78 -154 V
77 -154 V
78 -438 V
78 -439 V
77 -38 V
78 -38 V
97 481 V
97 480 V
97 -544 V
97 -544 V
77 433 V
78 433 V
97 -322 V
97 -321 V
78 98 V
77 99 V
78 99 V
97 -4 V
97 -4 V
97 118 V
97 118 V
97 -267 V
97 -267 V
77 247 V
78 246 V
78 247 V
97 -312 V
97 -313 V
97 182 V
97 181 V
116 256 V
78 -209 V
77 -210 V
78 -210 V
97 23 V
97 23 V
116 293 V
97 -249 V
97 -249 V
1.000 UP
1.000 UL
LTa
LTb
6193 4545 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (eau)]
] -53.3 MRshow
grestore
LTa
6289 4545 M
447 0 V
1370 4526 M
126 -13 V
97 -19 V
97 -25 V
97 -12 V
97 -12 V
97 -10 V
97 -10 V
97 -14 V
97 -15 V
97 -10 V
97 -12 V
97 -14 V
97 -15 V
97 -13 V
97 -13 V
78 -9 V
77 -8 V
78 -12 V
77 -14 V
78 5 V
78 -1 V
77 -14 V
78 -17 V
97 -6 V
97 -11 V
97 -6 V
97 -7 V
77 -8 V
78 -11 V
97 -5 V
97 -6 V
78 -5 V
77 -5 V
78 -5 V
97 -5 V
97 -4 V
97 -10 V
97 -10 V
97 -6 V
97 -5 V
77 -10 V
78 -11 V
78 -15 V
97 -5 V
97 -5 V
97 -7 V
97 -8 V
116 -19 V
78 -4 V
77 -5 V
78 -5 V
97 -8 V
97 -9 V
116 -17 V
97 -18 V
97 -22 V
1370 4526 Pls
1496 4513 Pls
1593 4494 Pls
1690 4469 Pls
1787 4457 Pls
1884 4445 Pls
1981 4435 Pls
2078 4425 Pls
2175 4411 Pls
2272 4396 Pls
2369 4386 Pls
2466 4374 Pls
2563 4360 Pls
2660 4345 Pls
2757 4332 Pls
2854 4319 Pls
2932 4310 Pls
3009 4302 Pls
3087 4290 Pls
3164 4276 Pls
3242 4281 Pls
3320 4280 Pls
3397 4266 Pls
3475 4249 Pls
3572 4243 Pls
3669 4232 Pls
3766 4226 Pls
3863 4219 Pls
3940 4211 Pls
4018 4200 Pls
4115 4195 Pls
4212 4189 Pls
4290 4184 Pls
4367 4179 Pls
4445 4174 Pls
4542 4169 Pls
4639 4165 Pls
4736 4155 Pls
4833 4145 Pls
4930 4139 Pls
5027 4134 Pls
5104 4124 Pls
5182 4113 Pls
5260 4098 Pls
5357 4093 Pls
5454 4088 Pls
5551 4081 Pls
5648 4073 Pls
5764 4054 Pls
5842 4050 Pls
5919 4045 Pls
5997 4040 Pls
6094 4032 Pls
6191 4023 Pls
6307 4006 Pls
6404 3988 Pls
6501 3966 Pls
6512 4545 Pls
1.000 UL
LTb
720 480 M
6208 0 V
0 4368 V
-6208 0 V
720 480 L
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
%%Pages: 1
