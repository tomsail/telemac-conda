###
### See http://wiki.opentelemac.org/doku.php?id=installation_notes_2_beta
### On how to install telemac
###
# _____                              _______________________________
# ____/ TELEMAC Project Definitions /______________________________/
#
[Configurations]
configs: S9.gfortran.dyn S9.gfortran S9.gfortran.debug S9.gfortran.verrou
         S9.nag S9.nag.debug
         S9.intel S9.intel.debug
         S10.gfortran.dyn S10.gfortran.debug
         S10.nag.dyn S10.nag.debug
         gaia.intel.dyn gaia.intel.debug gaia.gnu.dyn gaia.gnu.debug
         cronos.intel.dyn cronos.intel.debug cronos.gnu.dyn cronos.gnu.debug
         win win.debug win.dyn win.dyn.debug cygwin cygwin.debug
# _____          ____________________________________
# ____/ General /___________________________________/
# Global declaration used for all configurations
[general]
language: 2
modules:  system
version:  v8p4
#
sfx_zip:    gztar
sfx_lib:    .a
sfx_obj:    .o
sfx_mod:    .mod
sfx_exe:
#
#
val_root:   <root>/examples
#
val_rank:   all
#
mods_all:   -I <config>
ar: ar
lib_flags: cru
#
# MPI info
#
fc: mpif90
flags_mpi: -DHAVE_MPI
# Those are for nag.ad
incs_mpi: -kind=byte -I$MPIHOME/include
libs_mpi: -L$MPIHOME/lib -lmpichf90 -lmpich -lopa -lmpl -lrt -lpthread
cmd_doxygen:doxygen

#
# METIS info
#
libs_metis: -L$METISHOME/lib -lmetis

#
# MED info
#
incs_med: -I$MEDHOME/include
flags_med: -DHAVE_MED
libs_med: -lm -L$MEDHOME/lib -lmed -L$HDF5HOME/lib -lhdf5 -ldl -lstdc++ -lz

#
# MUMPS info
#
incs_mumps: -I$MUMPSHOME/include
flags_mumps: -DHAVE_MUMPS
libs_mumps: $MUMPSHOME/lib/libdmumps.a
            $MUMPSHOME/lib/libmumps_common.a
            $MUMPSHOME/lib/libpord.a
            $SCALAPACKHOME/lib/libscalapack.a
            -L/local/BLAS -lblas
libs_so_mumps: -L$MUMPSHOME/lib -ldmumps -lmumps_common -lpord
               -L$SCALAPACKHOME/lib -lscalapack
               -lblas

libs_so_mumps_mkl: -L$MUMPSHOME/lib -ldmumps -lmumps_common -lpord
                   -lmkl_scalapack_lp64 -lmkl_blacs_intelmpi_lp64
                   -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -lmkl_def
                   -lpthread -lm -ldl

#
# AED info
#
incs_aed: -I $AEDHOME/include
flags_aed: -DHAVE_AED2
libs_aed: -L$AEDHOME/lib -laed2

#
# GOTM info
#
incs_gotm: -I $GOTMHOME/include
flags_gotm: -DHAVE_GOTM
libs_gotm: -L$GOTMHOME/lib -lturbulence -lutil

#
# GFortran info
#
fflags_gfo: -cpp -fconvert=big-endian -frecord-marker=4 -DHAVE_I16
fflags_debug_gfo: -g -Wall -fcheck=all -fbacktrace -fbounds-check -finit-integer=-1 -finit-real=nan -ffpe-trap=invalid,zero,overflow

#
# Intel info
#
fflags_intel_new: -cpp -convert big_endian
fflags_intel: [fflags_intel_new] -DNO_INQUIRE_SIZE
fflags_debug_intel: -debug all -check all -traceback
# TODO: -ftrapuv

#
# Nag info
#
fflags_nag: -fpp -w=obs -Oassumed -convert=BIG_ENDIAN -DNAGFOR
fflags_nag_ad: -fpp -w=obs -Oassumed -DNAGFOR
fflags_debug_nag: -g -gline -C=all

#
# Cluster info
#
# Dirty hack as there is a bug within configparser in py3 that removes lines starting with #
sbatch_tag:#SBATCH
hpc_stdin_edf: #!/bin/bash
  [sbatch_tag] --job-name=<jobname>
  [sbatch_tag] --output=<jobname>-<time>.out
  [sbatch_tag] --time=<walltime>
  [sbatch_tag] --ntasks=<ncsize>
  [sbatch_tag] --partition=<queue>
  [sbatch_tag] --exclusive
  [sbatch_tag] --nodes=<ncnode>
  [sbatch_tag] --ntasks-per-node=<nctile>
  source <root>/configs/pysource.<configName>.sh
  <py_runcode>
hpc_runcode_edf: bash <root>/scripts/submit_slurm.sh <id_log> '<project>'
par_cmd_exec_edf: srun -n 1 -N 1 <config>/partel < <partel.par> >> <partel.log>

#
# Gcov info
#
flags_gcov: -fprofile-arcs -ftest-coverage -fPIC

#
# Generic info
#

mpi_cmdexec: mpirun -np <ncsize> <exename>

cmd_obj:    [fc] -c [obj_flags] <mods> <incs> <f95name>
cmd_lib:    [ar] [lib_flags] <libname> <objs>
cmd_exe:    [fc] [exe_flags] -o <exename> <objs> <libs>

incs_all: [incs_med] [incs_mumps] [incs_aed] [incs_gotm]
libs_all: [libs_mumps] [libs_med] [libs_metis] [libs_aed] [libs_gotm]
# Link with shared libraries
libs_so: [libs_so_mumps] [libs_med] [libs_metis] [libs_aed] [libs_gotm]
#
cmd_obj_c: gcc -c [cflags] <srcName> -o <objName>
cflags:
#
# _____           __________________________________
# ____/ Scibian9 /_________________________________/
#
# GFortran
#
[S9.gfortran]
brief: Scibian 9 dynamic build using GFortran 6.3.0 and Open MPI.
options: api
#
f2py_name: f2py3
pyd_fcompiler: gnu95
sfx_lib:    .so
#
obj_flags: -O2 -fPIC [fflags_gfo] [flags_mpi] [flags_mumps] [flags_med] [flags_aed] [flags_gotm]
lib_flags: -fPIC -shared [fflags_gfo]
#
exe_flags: -fPIC [fflags_gfo]
#
cmd_lib:    [fc] [lib_flags] -o <libname> <objs>
libs_all: [libs_so]
cflags: -fPIC
#
[S9.gfortran.debug]
brief: Scibian 9 dynamic build using GFortran 6.3.0 and Open MPI, in debug mode.
options: api
#
f2py_name: f2py3
pyd_fcompiler: gnu95
sfx_lib:    .so
#
obj_flags: -c -O0 -fPIC [fflags_gfo] [fflags_debug_gfo] [flags_mpi] [flags_mumps] [flags_med] [flags_aed] [flags_gotm]
lib_flags: -fPIC -shared [fflags_gfo] [fflags_debug_gfo]
#
exe_flags: -fPIC [fflags_gfo]
libs_all: [libs_so]
#
cflags: -fPIC
#
cmd_lib: [fc] [lib_flags] -o <libname> <objs>
#
[S9.gfortran.verrou]
brief: Scibian 9 dynamic build using GFortran 6.3.0 and Open MPI, providing VERROU support.
options: api
#
mpi_cmdexec: mpiexec -np <ncsize> valgrind --tool=verrou --demangle=no --rounding-mode=random --exclude=<root>/lib.ex <exename>
#
f2py_name: f2py3
pyd_fcompiler: gnu95
sfx_lib:    .so
#
obj_flags: -O2 -fPIC -g [fflags_gfo] [flags_mpi] [flags_mumps] [flags_med] [flags_aed]
lib_flags: -fPIC -shared -g [fflags_gfo]
#
exe_flags: -fPIC [fflags_gfo]
#
cmd_lib:    [fc] [lib_flags] -o <libname> <objs>
libs_all: [libs_so]
cflags: -fPIC
#
# Intel
#
[S9.intel]
brief: Scibian 9 dynamic build using Intel Fortran Compiler 10.1 and MPICH.
#
modules: system -mascaret
options: api
#
f2py_name: f2py3
pyd_fcompiler: intelem
sfx_lib:    .so
#
obj_flags: -O2 -fPIC [fflags_intel] [flags_mpi] [flags_mumps] [flags_med]
lib_flags: -fPIC -shared [fflags_intel]
exe_flags: -fPIC -convert big_endian
#
cmd_lib:  [fc] [lib_flags] -o <libname> <objs>
incs_all: [incs_med] [incs_mumps]
libs_all: [libs_so_mumps] [libs_med] [libs_metis]
cflags: -fPIC
#
[S9.intel.debug]
brief: Scibian 9 dynamic build using Intel Fortran Compiler 10.1 and MPICH, in debug mode.
#
modules: system -mascaret
options: api
#
f2py_name: f2py3
pyd_fcompiler: intelem
sfx_lib:    .so
#
obj_flags: -O0 -fPIC [fflags_intel] [fflags_debug_intel] [flags_mpi] [flags_mumps] [flags_med]
lib_flags: -fPIC -shared [fflags_intel] [fflags_debug_intel]
exe_flags: -fPIC -convert big_endian
#
cmd_lib:  [fc] [lib_flags] -o <libname> <objs>
incs_all: [incs_med] [incs_mumps]
libs_all: [libs_so_mumps] [libs_med] [libs_metis]
cflags: -fPIC
#
# Nag
#
[S9.nag]
brief: Scibian 9 dynamic build using NAG Fortran Compiler 6.2 and MPICH.
modules: system
options: api hermes_only
#
f2py_name: f2py3
pyd_fcompiler: nagfor
sfx_lib:    .so
f2py_opt: -kind=byte -PIC
#
obj_flags: -O2 -PIC [fflags_nag] [flags_mpi] [flags_mumps] [flags_med] [flags_gotm]
lib_flags: -PIC -Wl,-shared [fflags_nag]
#
exe_flags: -PIC [fflags_nag]
#
cmd_lib:  [fc] [lib_flags] -o <libname> <objs>
incs_all: [incs_med] [incs_mumps] [incs_gotm]
libs_all: [libs_so_mumps] [libs_med] [libs_metis] [libs_gotm]
cflags: -fPIC
#
[S9.nag.debug]
brief: Scibian 9 dynamic build using NAG Fortran Compiler 6.2 and MPICH, in debug mode.
modules: system
options: api hermes_only
#
f2py_name: f2py3
pyd_fcompiler: nagfor
sfx_lib:    .so
f2py_opt: -kind=byte -PIC
#
obj_flags: -O0 -PIC [fflags_nag] [fflags_debug_nag] [flags_mpi] [flags_mumps] [flags_med] [flags_gotm]
lib_flags: -PIC -Wl,-shared [fflags_nag] [fflags_debug_nag]
#
exe_flags: -PIC [fflags_nag]
#
cmd_lib:  [fc] [lib_flags] -o <libname> <objs>
incs_all: [incs_med] [incs_mumps] [incs_gotm]
libs_all: [libs_so_mumps] [libs_med] [libs_metis] [libs_gotm]
cflags: -fPIC
#
# _____             __________________________________
# ____/ Scibian 10 /_________________________________/
#
# GFortran
#
[S10.gfortran.dyn]
brief: Scibian 10 dynamic build using GFortran 8.3.0 and Open MPI.
options: api
#
f2py_name: f2py3
pyd_fcompiler: gnu95
sfx_lib:    .so
#
obj_flags: -O2 -fPIC [fflags_gfo] [flags_mpi] [flags_mumps] [flags_med] [flags_aed] [flags_gotm]
lib_flags: -fPIC -shared [fflags_gfo]
#
exe_flags: -fPIC [fflags_gfo]
#
cmd_lib:    [fc] [lib_flags] -o <libname> <objs>
libs_all: [libs_so]
cflags: -fPIC
#
[S10.gfortran.debug]
brief: Scibian 10 dynamic build using GFortran 8.3.0 and Open MPI, in debug mode.
options: api
#
f2py_name: f2py3
pyd_fcompiler: gnu95
sfx_lib:    .so
#
obj_flags: -c -O0 -fPIC [fflags_gfo] [fflags_debug_gfo] [flags_mpi] [flags_mumps] [flags_med] [flags_aed] [flags_gotm]
lib_flags: -fPIC -shared [fflags_gfo] [fflags_debug_gfo]
#
exe_flags: -fPIC [fflags_gfo]
libs_all: [libs_so]
#
cflags: -fPIC
#
cmd_lib: [fc] [lib_flags] -o <libname> <objs>
#
# Nag
#
[S10.nag.dyn]
brief: Scibian 10 dynamic build using NAG Fortran Compiler 6.2 and Open MPI.
modules: system
options: api hermes_only
#
f2py_name: f2py3
pyd_fcompiler: nagfor
sfx_lib:    .so
f2py_opt: -kind=byte -PIC
#
obj_flags: -O2 -PIC [fflags_nag] [flags_mpi] [flags_mumps] [flags_med] [flags_gotm]
lib_flags: -PIC -Wl,-shared [fflags_nag]
#
exe_flags: -PIC [fflags_nag]
#
cmd_lib:  [fc] [lib_flags] -o <libname> <objs>
incs_all: [incs_med] [incs_mumps] [incs_gotm]
libs_all: [libs_so_mumps] [libs_med] [libs_metis] [libs_gotm]
cflags: -fPIC
#
[S10.nag.debug]
brief: Scibian 10 dynamic build using NAG Fortran Compiler 6.2 and Open MPI, in debug mode.
modules: system
options: api hermes_only
#
f2py_name: f2py3
pyd_fcompiler: nagfor
sfx_lib:    .so
f2py_opt: -kind=byte -PIC
#
obj_flags: -O0 -PIC [fflags_nag] [fflags_debug_nag] [flags_mpi] [flags_mumps] [flags_med] [flags_gotm]
lib_flags: -PIC -Wl,-shared [fflags_nag] [fflags_debug_nag]
#
exe_flags: -PIC [fflags_nag]
#
cmd_lib:  [fc] [lib_flags] -o <libname> <objs>
incs_all: [incs_med] [incs_mumps] [incs_gotm]
libs_all: [libs_so_mumps] [libs_med] [libs_metis] [libs_gotm]
cflags: -fPIC
#
# _____               ____________________________________
# ____/ Gaia cluster /___________________________________/
#
[gaia.intel.dyn]
brief: Debian 9 dynamic build using Intel Fortran Compiler 2019.4 and Intel MPI.
#
sfx_lib:    .so
options:    mpi hpc api
#
f2py_name: f2py3
pyd_fcompiler: intelem
#
par_cmdexec: [par_cmd_exec_edf]
#
hpc_stdin: [hpc_stdin_edf]
#
hpc_runcode: [hpc_runcode_edf]
#
obj_flags: -O2 -fPIC [fflags_intel] [flags_mpi] [flags_med] [flags_mumps] [flags_aed] [flags_gotm]
lib_flags: -fPIC -shared [fflags_intel]
#
exe_flags: -fPIC
cmd_lib:    [fc] [lib_flags] -o <libname> <objs>
#
libs_all: [libs_so]
cmd_obj_c: icc -c [cflags] <srcName> -o <objName>
cflags: -fPIC
#
[gaia.intel.debug]
brief: Debian 9 dynamic build using Intel Fortran Compiler 2019.4 and Intel MPI, in debug mode.
#
sfx_lib:    .so
options:    mpi hpc api
#
f2py_name: f2py3
pyd_fcompiler: intelem
#
par_cmdexec: [par_cmd_exec_edf]
#
hpc_stdin: [hpc_stdin_edf]
#
hpc_runcode: [hpc_runcode_edf]
#
obj_flags: -O0 -fPIC [fflags_intel] [fflags_debug_intel] [flags_mpi] [flags_med] [flags_mumps] [flags_aed] [flags_gotm]
lib_flags: -fPIC -shared [fflags_intel] -g
#
exe_flags: -fPIC [fflags_debug_intel]
cmd_lib:    [fc] [lib_flags] -o <libname> <objs>
#
libs_all: [libs_so]
cmd_obj_c: icc -c [cflags] <srcName> -o <objName>
cflags: -fPIC
#
[gaia.gnu.dyn]
brief: Debian 9 dynamic build using GFortran 6.3.0 and Open MPI.
#
f2py_name: f2py3
pyd_fcompiler: gnu95
#
sfx_lib:    .so
options:    mpi hpc api
#
par_cmdexec: [par_cmd_exec_edf]
#
hpc_stdin: [hpc_stdin_edf]
#
hpc_runcode: [hpc_runcode_edf]
#
obj_flags: -O2 -fPIC [fflags_gfo] [flags_mpi] [flags_med] [flags_mumps] [flags_aed] [flags_gotm]
lib_flags: -fPIC -shared [fflags_gfo]
#
exe_flags: -fPIC
cmd_lib:    [fc] [lib_flags] -o <libname> <objs>
#
libs_all: [libs_so]
cflags: -fPIC
#
[gaia.gnu.debug]
brief: Debian 9 dynamic build using GFortran 6.3.0 and Open MPI, in debug mode.
#
f2py_name: f2py3
pyd_fcompiler: gnu95
sfx_lib:    .so
options:    mpi hpc api
#
par_cmdexec: [par_cmd_exec_edf]
#
hpc_stdin: [hpc_stdin_edf]
#
hpc_runcode: [hpc_runcode_edf]
#
obj_flags: -fPIC [fflags_gfo] [fflags_debug_gfo] [flags_mpi] [flags_med] [flags_mumps] [flags_aed] [flags_gotm]
lib_flags: -fPIC -shared [fflags_gfo] -g
#
exe_flags: -fPIC [fflags_debug_gfo]
cmd_lib:    [fc] [lib_flags] -o <libname> <objs>
#
libs_all: [libs_so]
cflags: -fPIC
# _____                 ____________________________________
# ____/ Cronos cluster /___________________________________/
#
[cronos.intel.dyn]
brief: RHEL 8.4 dynamic build using Intel Fortran Compiler 2020.4 and Intel MPI.
#
sfx_lib:    .so
options:    mpi hpc api
#
f2py_name: f2py3
pyd_fcompiler: intelem
f2py_opt: -qopenmp
#
par_cmdexec: [par_cmd_exec_edf]
#
hpc_stdin: [hpc_stdin_edf]
#
hpc_runcode: [hpc_runcode_edf]
#
obj_flags: -O2 -fPIC [fflags_intel] [flags_mpi] [flags_med] [flags_mumps] [flags_aed] [flags_gotm]
lib_flags: -fPIC -shared -qopenmp [fflags_intel]
#
exe_flags: -fPIC -qopenmp
cmd_lib:    [fc] [lib_flags] -o <libname> <objs>
#
libs_all: [libs_so_mumps_mkl] [libs_med] [libs_metis] [libs_aed] [libs_gotm]
cmd_obj_c: icc -c [cflags] <srcName> -o <objName>
cflags: -fPIC
#
[cronos.intel.debug]
brief: RHEL 8.4 dynamic build using Intel Fortran Compiler 2020.4 and Intel MPI, in debug mode.
#
sfx_lib:    .so
options:    mpi hpc api
#
f2py_name: f2py3
pyd_fcompiler: intelem
#
par_cmdexec: [par_cmd_exec_edf]
#
hpc_stdin: [hpc_stdin_edf]
#
hpc_runcode: [hpc_runcode_edf]
#
obj_flags: -O0 -fPIC [fflags_intel] [fflags_debug_intel] [flags_mpi] [flags_med] [flags_mumps] [flags_aed] [flags_gotm]
lib_flags: -fPIC -shared -qopenmp [fflags_intel] -g
#
exe_flags: -fPIC [fflags_debug_intel] -qopenmp
cmd_lib:    [fc] [lib_flags] -o <libname> <objs>
#
libs_all: [libs_so_mumps_mkl] [libs_med] [libs_metis] [libs_aed] [libs_gotm]
cmd_obj_c: icc -c [cflags] <srcName> -o <objName>
cflags: -fPIC
#
[cronos.gnu.dyn]
brief: RHEL 8.4 dynamic build using GFortran 8.3.1 and Open MPI.
#
f2py_name: f2py3
pyd_fcompiler: gnu95
#
sfx_lib:    .so
options:    mpi hpc api
#
par_cmdexec: [par_cmd_exec_edf]
#
hpc_stdin: [hpc_stdin_edf]
#
hpc_runcode: [hpc_runcode_edf]
#
obj_flags: -O2 -fPIC [fflags_gfo] [flags_mpi] [flags_med] [flags_mumps] [flags_aed] [flags_gotm]
lib_flags: -fPIC -shared [fflags_gfo]
#
exe_flags: -fPIC
cmd_lib:    [fc] [lib_flags] -o <libname> <objs>
#
libs_all: [libs_so]
cflags: -fPIC
#
[cronos.gnu.debug]
brief: RHEL 8.4 dynamic build using GFortran 8.3.1 and Open MPI, in debug mode.
#
f2py_name: f2py3
pyd_fcompiler: gnu95
sfx_lib:    .so
options:    mpi hpc api
#
par_cmdexec: [par_cmd_exec_edf]
#
hpc_stdin: [hpc_stdin_edf]
#
hpc_runcode: [hpc_runcode_edf]
#
obj_flags: -fPIC [fflags_gfo] [fflags_debug_gfo] [flags_mpi] [flags_med] [flags_mumps] [flags_aed] [flags_gotm]
lib_flags: -fPIC -shared [fflags_gfo] -g
#
exe_flags: -fPIC [fflags_debug_gfo]
cmd_lib:    [fc] [lib_flags] -o <libname> <objs>
#
libs_all: [libs_so]
cflags: -fPIC
#
# _____          _______________________________
# ____/ Windows /______________________________/
#
[win]
brief: Windows static build using Mingw and MS-MPI
#
options: api
#
f2py_name: f2py
f2py_opt: -O3
pyd_compiler: mingw32
pyd_fcompiler: gnu95
#
obj_flags: -O2 [fflags_gfo] [flags_mpi] [flags_mumps] [flags_med] [flags_aed] [flags_gotm]
lib_flags: cru
#
exe_flags: -fPIC [fflags_gfo]
#
sfx_lib:    .a
sfx_exe:    .exe
#
mpi_cmdexec: mpiexec -n <ncsize> <exename>
#
# METIS info
#
libs_metis: -L%METISHOME%/lib -lmetis
#
# MED info
#
incs_med: -I%MEDHOME%/include
flags_med: -DHAVE_MED
libs_med: -lm -L%MEDHOME%/lib -lmed -lmedfwrap -L%HDF5HOME%/lib -lhdf5 -ldl -lstdc++
#
# MSMPI info
#
libs_mpi: -L%MPIHOME%/lib -lmsmpi
#
#
# MUMPS info
#
incs_mumps: -I%MUMPSHOME%/include
flags_mumps: -DHAVE_MUMPS
libs_mumps: -L%MUMPSHOME%/lib -ldmumps -lmumps_common -lpord
            -L%SCALAPACKHOME%/lib -lscalapack
            -L%LAPACKHOME%/lib -llapack -lblas
#
# AED info
#
incs_aed: -I%AEDHOME%/include
flags_aed: -DHAVE_AED2
libs_aed: -L%AEDHOME%/lib -laed2
#
# GOTM info
#
incs_gotm: -I%GOTMHOME%/include
flags_gotm: -DHAVE_GOTM
libs_gotm: -L%GOTMHOME%/lib -lturbulence -lutil
#
incs_all: [incs_med] [incs_mumps] [incs_aed] [incs_gotm]
libs_all: -lgfortran [libs_med] [libs_metis] [libs_mumps] [libs_mpi] [libs_aed] [libs_gotm]
#
[win.dyn]
brief: Windows dynamic build using Mingw and MS-MPI
#
options: api
#
f2py_name: f2py
f2py_opt: -O3
pyd_compiler: mingw32
pyd_fcompiler: gnu95
#
obj_flags: -O2 -fPIC [fflags_gfo] [flags_mpi] [flags_mumps] [flags_med] [flags_aed] [flags_gotm]
lib_flags: -fPIC -shared [fflags_gfo] -Wl,--subsystem,windows,--out-implib,<libname>.a
#
exe_flags: -fPIC [fflags_gfo]
#
cmd_lib:    [fc] [lib_flags] -o <libname> <objs> <libs>
cflags: -fPIC
#
sfx_exe:    .exe
sfx_lib:    .dll
#
mpi_cmdexec: mpiexec -n <ncsize> <exename>
#
# METIS info
#
libs_metis: -L%METISHOME%/lib -lmetis
#
# MED info
#
incs_med: -I%MEDHOME%/include
flags_med: -DHAVE_MED
libs_med: -lm -L%MEDHOME%/lib -lmed -lmedfwrap -L%HDF5HOME%/lib -lhdf5 -ldl -lstdc++
#
# MSMPI info
#
libs_mpi: -L%MPIHOME%/lib -lmsmpi
#
#
# MUMPS info
#
incs_mumps: -I%MUMPSHOME%/include
flags_mumps: -DHAVE_MUMPS
libs_mumps: -L%MUMPSHOME%/lib -ldmumps -lmumps_common -lpord
            -L%SCALAPACKHOME%/lib -lscalapack
            -L%LAPACKHOME%/lib -llapack -lblas
#
# AED info
#
incs_aed: -I%AEDHOME%/include
flags_aed: -DHAVE_AED2
libs_aed: -L%AEDHOME%/lib -laed2
#
# GOTM info
#
incs_gotm: -I%GOTMHOME%/include
flags_gotm: -DHAVE_GOTM
libs_gotm: -L%GOTMHOME%/lib -lturbulence -lutil
#
incs_all: [incs_med] [incs_mumps] [incs_aed] [incs_gotm]
libs_all: -lgfortran [libs_med] [libs_metis] [libs_mumps] [libs_mpi] [libs_aed] [libs_gotm]
#
[win.debug]
brief: Windows static build using Mingw and MS-MPI, in debug mode.
#
options: api
#
f2py_name: f2py
f2py_opt: -O3
pyd_compiler: mingw32
pyd_fcompiler: gnu95
#
obj_flags: -c -O0 [fflags_gfo] [fflags_debug_gfo] [flags_mpi] [flags_mumps] [flags_med] [flags_aed] [flags_gotm]
lib_flags: cru
#
exe_flags: -fPIC [fflags_gfo] [fflags_debug_gfo]
#
sfx_lib:    .a
sfx_exe:    .exe
#
mpi_cmdexec: mpiexec -n <ncsize> <exename>
#
# METIS info
#
libs_metis: -L%METISHOME%/lib -lmetis
#
# MED info
#
incs_med: -I%MEDHOME%/include
flags_med: -DHAVE_MED
libs_med: -lm -L%MEDHOME%/lib -lmed -lmedfwrap -L%HDF5HOME%/lib -lhdf5 -ldl -lstdc++
#
# MSMPI info
#
libs_mpi: -L%MPIHOME%/lib -lmsmpi
#
#
# MUMPS info
#
incs_mumps: -I%MUMPSHOME%/include
flags_mumps: -DHAVE_MUMPS
libs_mumps: -L%MUMPSHOME%/lib -ldmumps -lmumps_common -lpord
            -L%SCALAPACKHOME%/lib -lscalapack
            -L%LAPACKHOME%/lib -llapack -lblas
#
# AED info
#
incs_aed: -I%AEDHOME%/include
flags_aed: -DHAVE_AED2
libs_aed: -L%AEDHOME%/lib -laed2
#
# GOTM info
#
incs_gotm: -I%GOTMHOME%/include
flags_gotm: -DHAVE_GOTM
libs_gotm: -L%GOTMHOME%/lib -lturbulence -lutil
#
incs_all: [incs_med] [incs_mumps] [incs_aed] [incs_gotm]
libs_all: -lgfortran [libs_med] [libs_metis] [libs_mumps] [libs_mpi] [libs_aed] [libs_gotm]
#
[win.dyn.debug]
brief: Windows dynamic build using Mingw and MS-MPI, in debug mode.
#
options: api
#
f2py_name: f2py
f2py_opt: -O3
pyd_compiler: mingw32
pyd_fcompiler: gnu95
#
obj_flags: -c -O0 -fPIC [fflags_gfo] [fflags_debug_gfo] [flags_mpi] [flags_mumps] [flags_med] [flags_aed] [flags_gotm]
lib_flags: -fPIC -shared [fflags_gfo] [fflags_debug_gfo] -Wl,--subsystem,windows,--out-implib,<libname>.a
#
exe_flags: -fPIC [fflags_gfo] [fflags_debug_gfo]
#
cmd_lib:    [fc] [lib_flags] -o <libname> <objs> <libs>
cflags: -fPIC
#
sfx_exe:    .exe
sfx_lib:    .dll
#
mpi_cmdexec: mpiexec -n <ncsize> <exename>
#
# METIS info
#
libs_metis: -L%METISHOME%/lib -lmetis
#
# MED info
#
incs_med: -I%MEDHOME%/include
flags_med: -DHAVE_MED
libs_med: -lm -L%MEDHOME%/lib -lmed -lmedfwrap -L%HDF5HOME%/lib -lhdf5 -ldl -lstdc++
#
# MSMPI info
#
libs_mpi: -L%MPIHOME%/lib -lmsmpi
#
#
# MUMPS info
#
incs_mumps: -I%MUMPSHOME%/include
flags_mumps: -DHAVE_MUMPS
libs_mumps: -L%MUMPSHOME%/lib -ldmumps -lmumps_common -lpord
            -L%SCALAPACKHOME%/lib -lscalapack
            -L%LAPACKHOME%/lib -llapack -lblas
#
# AED info
#
incs_aed: -I%AEDHOME%/include
flags_aed: -DHAVE_AED2
libs_aed: -L%AEDHOME%/lib -laed2
#
# GOTM info
#
incs_gotm: -I%GOTMHOME%/include
flags_gotm: -DHAVE_GOTM
libs_gotm: -L%GOTMHOME%/lib -lturbulence -lutil
#
incs_all: [incs_med] [incs_mumps] [incs_aed] [incs_gotm]
libs_all: -lgfortran [libs_med] [libs_metis] [libs_mumps] [libs_mpi] [libs_aed] [libs_gotm]
#
[cygwin]
brief: Windows static build using Cygwin and MS-MPI
#
options: api hermes_only
#
f2py_name: f2py
pyd_fcompiler: gnu95
#
cmd_obj:    mpif90 -cpp -c -O2 -DHAVE_MPI -fconvert=big-endian -frecord-marker=4 <mods> <incs> <f95name>
cmd_lib:    ar cru <libname> <objs>
cmd_exe:    mpif90 -fconvert=big-endian -frecord-marker=4 -lm -o <exename> <objs> <libs>
#
mpi_cmdexec:   mpiexec -n <ncsize> <exename>
#
sfx_lib: .a
sfx_exe:
#
incs_all:
libs_all:    -lmetis -lgfortran

cmd_obj_c: gcc -c [cflags] <srcName> -o <objName>

[cygwin.debug]
brief: Windows static build using Cygwin and MS-MPI, in debug mode.
#
options: api hermes_only
#
f2py_name: f2py
pyd_fcompiler: gnu95
#
cmd_obj:    mpif90 -c -cpp -Wall -g -O0  -fcheck=all -fbacktrace -ffpe-trap=invalid,zero,overflow -DHAVE_MPI -fconvert=big-endian -frecord-marker=4 <mods> <incs> <f95name> -o <objname>
cmd_lib:    ar cru <libname> <objs>
cmd_exe:    mpif90 -g -fconvert=big-endian -frecord-marker=4 -lm -o <exename> <objs> <libs>
#
mpi_cmdexec:   mpiexec.exe -wdir <wdir> -n <ncsize> <exename>
#
sfx_lib:    .a
sfx_exe:    .exe
#
incs_all:
libs_all:    -lmetis -lgfortran
